/* automatically generated by rust-bindgen 0.55.1 */

pub const _VCRT_COMPILER_PREPROCESSOR: u32 = 1;
pub const _SAL_VERSION: u32 = 20;
pub const __SAL_H_VERSION: u32 = 180000000;
pub const _USE_DECLSPECS_FOR_SAL: u32 = 0;
pub const _USE_ATTRIBUTES_FOR_SAL: u32 = 0;
pub const _CRT_PACKING: u32 = 8;
pub const _HAS_EXCEPTIONS: u32 = 1;
pub const _STL_LANG: u32 = 0;
pub const _HAS_CXX17: u32 = 0;
pub const _HAS_CXX20: u32 = 0;
pub const _HAS_CXX23: u32 = 0;
pub const _HAS_NODISCARD: u32 = 0;
pub const _ARM_WINAPI_PARTITION_DESKTOP_SDK_AVAILABLE: u32 = 1;
pub const _CRT_BUILD_DESKTOP_APP: u32 = 1;
pub const _ARGMAX: u32 = 100;
pub const _CRT_INT_MAX: u32 = 2147483647;
pub const _CRT_FUNCTIONS_REQUIRED: u32 = 1;
pub const _CRT_HAS_CXX17: u32 = 0;
pub const _CRT_HAS_C11: u32 = 1;
pub const _CRT_INTERNAL_NONSTDC_NAMES: u32 = 1;
pub const __STDC_SECURE_LIB__: u32 = 200411;
pub const __GOT_SECURE_LIB__: u32 = 200411;
pub const __STDC_WANT_SECURE_LIB__: u32 = 1;
pub const _SECURECRT_FILL_BUFFER_PATTERN: u32 = 254;
pub const _CRT_SECURE_CPP_OVERLOAD_STANDARD_NAMES: u32 = 0;
pub const _CRT_SECURE_CPP_OVERLOAD_STANDARD_NAMES_COUNT: u32 = 0;
pub const _CRT_SECURE_CPP_OVERLOAD_SECURE_NAMES: u32 = 1;
pub const _CRT_SECURE_CPP_OVERLOAD_STANDARD_NAMES_MEMORY: u32 = 0;
pub const _CRT_SECURE_CPP_OVERLOAD_SECURE_NAMES_MEMORY: u32 = 0;
pub const _MAX_ITOSTR_BASE16_COUNT: u32 = 9;
pub const _MAX_ITOSTR_BASE10_COUNT: u32 = 12;
pub const _MAX_ITOSTR_BASE8_COUNT: u32 = 12;
pub const _MAX_ITOSTR_BASE2_COUNT: u32 = 33;
pub const _MAX_LTOSTR_BASE16_COUNT: u32 = 9;
pub const _MAX_LTOSTR_BASE10_COUNT: u32 = 12;
pub const _MAX_LTOSTR_BASE8_COUNT: u32 = 12;
pub const _MAX_LTOSTR_BASE2_COUNT: u32 = 33;
pub const _MAX_ULTOSTR_BASE16_COUNT: u32 = 9;
pub const _MAX_ULTOSTR_BASE10_COUNT: u32 = 11;
pub const _MAX_ULTOSTR_BASE8_COUNT: u32 = 12;
pub const _MAX_ULTOSTR_BASE2_COUNT: u32 = 33;
pub const _MAX_I64TOSTR_BASE16_COUNT: u32 = 17;
pub const _MAX_I64TOSTR_BASE10_COUNT: u32 = 21;
pub const _MAX_I64TOSTR_BASE8_COUNT: u32 = 23;
pub const _MAX_I64TOSTR_BASE2_COUNT: u32 = 65;
pub const _MAX_U64TOSTR_BASE16_COUNT: u32 = 17;
pub const _MAX_U64TOSTR_BASE10_COUNT: u32 = 21;
pub const _MAX_U64TOSTR_BASE8_COUNT: u32 = 23;
pub const _MAX_U64TOSTR_BASE2_COUNT: u32 = 65;
pub const CHAR_BIT: u32 = 8;
pub const SCHAR_MIN: i32 = -128;
pub const SCHAR_MAX: u32 = 127;
pub const UCHAR_MAX: u32 = 255;
pub const CHAR_MIN: i32 = -128;
pub const CHAR_MAX: u32 = 127;
pub const MB_LEN_MAX: u32 = 5;
pub const SHRT_MIN: i32 = -32768;
pub const SHRT_MAX: u32 = 32767;
pub const USHRT_MAX: u32 = 65535;
pub const INT_MIN: i32 = -2147483648;
pub const INT_MAX: u32 = 2147483647;
pub const UINT_MAX: u32 = 4294967295;
pub const LONG_MIN: i32 = -2147483648;
pub const LONG_MAX: u32 = 2147483647;
pub const ULONG_MAX: u32 = 4294967295;
pub const EXIT_SUCCESS: u32 = 0;
pub const EXIT_FAILURE: u32 = 1;
pub const _WRITE_ABORT_MSG: u32 = 1;
pub const _CALL_REPORTFAULT: u32 = 2;
pub const _OUT_TO_DEFAULT: u32 = 0;
pub const _OUT_TO_STDERR: u32 = 1;
pub const _OUT_TO_MSGBOX: u32 = 2;
pub const _REPORT_ERRMODE: u32 = 3;
pub const RAND_MAX: u32 = 32767;
pub const _CVTBUFSIZE: u32 = 349;
pub const _MAX_PATH: u32 = 260;
pub const _MAX_DRIVE: u32 = 3;
pub const _MAX_DIR: u32 = 256;
pub const _MAX_FNAME: u32 = 256;
pub const _MAX_EXT: u32 = 256;
pub const _MAX_ENV: u32 = 32767;
pub const _CRT_INTERNAL_STDIO_SYMBOL_PREFIX: &'static [u8; 1usize] = b"\0";
pub const _CRT_INTERNAL_PRINTF_LEGACY_VSPRINTF_NULL_TERMINATION: u32 = 1;
pub const _CRT_INTERNAL_PRINTF_STANDARD_SNPRINTF_BEHAVIOR: u32 = 2;
pub const _CRT_INTERNAL_PRINTF_LEGACY_WIDE_SPECIFIERS: u32 = 4;
pub const _CRT_INTERNAL_PRINTF_LEGACY_MSVCRT_COMPATIBILITY: u32 = 8;
pub const _CRT_INTERNAL_PRINTF_LEGACY_THREE_DIGIT_EXPONENTS: u32 = 16;
pub const _CRT_INTERNAL_PRINTF_STANDARD_ROUNDING: u32 = 32;
pub const _CRT_INTERNAL_SCANF_SECURECRT: u32 = 1;
pub const _CRT_INTERNAL_SCANF_LEGACY_WIDE_SPECIFIERS: u32 = 2;
pub const _CRT_INTERNAL_SCANF_LEGACY_MSVCRT_COMPATIBILITY: u32 = 4;
pub const BUFSIZ: u32 = 512;
pub const _NSTREAM_: u32 = 512;
pub const _IOB_ENTRIES: u32 = 3;
pub const EOF: i32 = -1;
pub const _IOFBF: u32 = 0;
pub const _IOLBF: u32 = 64;
pub const _IONBF: u32 = 4;
pub const L_tmpnam: u32 = 260;
pub const L_tmpnam_s: u32 = 260;
pub const SEEK_CUR: u32 = 1;
pub const SEEK_END: u32 = 2;
pub const SEEK_SET: u32 = 0;
pub const FILENAME_MAX: u32 = 260;
pub const FOPEN_MAX: u32 = 20;
pub const _SYS_OPEN: u32 = 20;
pub const TMP_MAX: u32 = 2147483647;
pub const TMP_MAX_S: u32 = 2147483647;
pub const _TMP_MAX_S: u32 = 2147483647;
pub const SYS_OPEN: u32 = 20;
pub const EPERM: u32 = 1;
pub const ENOENT: u32 = 2;
pub const ESRCH: u32 = 3;
pub const EINTR: u32 = 4;
pub const EIO: u32 = 5;
pub const ENXIO: u32 = 6;
pub const E2BIG: u32 = 7;
pub const ENOEXEC: u32 = 8;
pub const EBADF: u32 = 9;
pub const ECHILD: u32 = 10;
pub const EAGAIN: u32 = 11;
pub const ENOMEM: u32 = 12;
pub const EACCES: u32 = 13;
pub const EFAULT: u32 = 14;
pub const EBUSY: u32 = 16;
pub const EEXIST: u32 = 17;
pub const EXDEV: u32 = 18;
pub const ENODEV: u32 = 19;
pub const ENOTDIR: u32 = 20;
pub const EISDIR: u32 = 21;
pub const ENFILE: u32 = 23;
pub const EMFILE: u32 = 24;
pub const ENOTTY: u32 = 25;
pub const EFBIG: u32 = 27;
pub const ENOSPC: u32 = 28;
pub const ESPIPE: u32 = 29;
pub const EROFS: u32 = 30;
pub const EMLINK: u32 = 31;
pub const EPIPE: u32 = 32;
pub const EDOM: u32 = 33;
pub const EDEADLK: u32 = 36;
pub const ENAMETOOLONG: u32 = 38;
pub const ENOLCK: u32 = 39;
pub const ENOSYS: u32 = 40;
pub const ENOTEMPTY: u32 = 41;
pub const EINVAL: u32 = 22;
pub const ERANGE: u32 = 34;
pub const EILSEQ: u32 = 42;
pub const STRUNCATE: u32 = 80;
pub const EDEADLOCK: u32 = 36;
pub const EADDRINUSE: u32 = 100;
pub const EADDRNOTAVAIL: u32 = 101;
pub const EAFNOSUPPORT: u32 = 102;
pub const EALREADY: u32 = 103;
pub const EBADMSG: u32 = 104;
pub const ECANCELED: u32 = 105;
pub const ECONNABORTED: u32 = 106;
pub const ECONNREFUSED: u32 = 107;
pub const ECONNRESET: u32 = 108;
pub const EDESTADDRREQ: u32 = 109;
pub const EHOSTUNREACH: u32 = 110;
pub const EIDRM: u32 = 111;
pub const EINPROGRESS: u32 = 112;
pub const EISCONN: u32 = 113;
pub const ELOOP: u32 = 114;
pub const EMSGSIZE: u32 = 115;
pub const ENETDOWN: u32 = 116;
pub const ENETRESET: u32 = 117;
pub const ENETUNREACH: u32 = 118;
pub const ENOBUFS: u32 = 119;
pub const ENODATA: u32 = 120;
pub const ENOLINK: u32 = 121;
pub const ENOMSG: u32 = 122;
pub const ENOPROTOOPT: u32 = 123;
pub const ENOSR: u32 = 124;
pub const ENOSTR: u32 = 125;
pub const ENOTCONN: u32 = 126;
pub const ENOTRECOVERABLE: u32 = 127;
pub const ENOTSOCK: u32 = 128;
pub const ENOTSUP: u32 = 129;
pub const EOPNOTSUPP: u32 = 130;
pub const EOTHER: u32 = 131;
pub const EOVERFLOW: u32 = 132;
pub const EOWNERDEAD: u32 = 133;
pub const EPROTO: u32 = 134;
pub const EPROTONOSUPPORT: u32 = 135;
pub const EPROTOTYPE: u32 = 136;
pub const ETIME: u32 = 137;
pub const ETIMEDOUT: u32 = 138;
pub const ETXTBSY: u32 = 139;
pub const EWOULDBLOCK: u32 = 140;
pub const _NLSCMPERROR: u32 = 2147483647;
pub const WCHAR_MIN: u32 = 0;
pub const WCHAR_MAX: u32 = 65535;
pub const WINT_MIN: u32 = 0;
pub const WINT_MAX: u32 = 65535;
pub const PTW32_VERSION_STRING: &'static [u8; 12usize] = b"2, 9, 1, 0\0\0";
pub const PTW32_LEVEL_MAX: u32 = 3;
pub const PTW32_LEVEL: u32 = 3;
pub const TIME_UTC: u32 = 1;
pub const PTW32_SCHED_LEVEL_MAX: u32 = 3;
pub const PTW32_SCHED_LEVEL: u32 = 3;
pub const SIG_BLOCK: u32 = 0;
pub const SIG_UNBLOCK: u32 = 1;
pub const SIG_SETMASK: u32 = 2;
pub const _POSIX_THREADS: u32 = 200809;
pub const _POSIX_READER_WRITER_LOCKS: u32 = 200809;
pub const _POSIX_SPIN_LOCKS: u32 = 200809;
pub const _POSIX_BARRIERS: u32 = 200809;
pub const _POSIX_THREAD_SAFE_FUNCTIONS: u32 = 200809;
pub const _POSIX_THREAD_ATTR_STACKSIZE: u32 = 200809;
pub const _POSIX_THREAD_ATTR_STACKADDR: i32 = -1;
pub const _POSIX_THREAD_PRIO_INHERIT: i32 = -1;
pub const _POSIX_THREAD_PRIO_PROTECT: i32 = -1;
pub const _POSIX_THREAD_PRIORITY_SCHEDULING: i32 = -1;
pub const _POSIX_THREAD_PROCESS_SHARED: i32 = -1;
pub const _POSIX_THREAD_DESTRUCTOR_ITERATIONS: u32 = 4;
pub const PTHREAD_DESTRUCTOR_ITERATIONS: u32 = 4;
pub const _POSIX_THREAD_KEYS_MAX: u32 = 128;
pub const PTHREAD_KEYS_MAX: u32 = 128;
pub const PTHREAD_STACK_MIN: u32 = 0;
pub const _POSIX_THREAD_THREADS_MAX: u32 = 64;
pub const PTHREAD_THREADS_MAX: u32 = 2019;
pub const _POSIX_SEM_NSEMS_MAX: u32 = 256;
pub const SEM_NSEMS_MAX: u32 = 1024;
pub const _POSIX_SEM_VALUE_MAX: u32 = 32767;
pub const SEM_VALUE_MAX: u32 = 2147483647;
pub const SECRET_NUM: i32 = -1234;
pub type va_list = *mut ::std::os::raw::c_char;
extern "C" {
    pub fn __va_start(arg1: *mut *mut ::std::os::raw::c_char, ...);
}
pub type size_t = ::std::os::raw::c_ulonglong;
pub type __vcrt_bool = bool;
pub type wchar_t = ::std::os::raw::c_ushort;
extern "C" {
    pub fn __security_init_cookie();
}
extern "C" {
    pub fn __security_check_cookie(_StackCookie: usize);
}
extern "C" {
    pub fn __report_gsfailure(_StackCookie: usize);
}
extern "C" {
    pub static mut __security_cookie: usize;
}
pub type __crt_bool = bool;
extern "C" {
    pub fn _invalid_parameter_noinfo();
}
extern "C" {
    pub fn _invalid_parameter_noinfo_noreturn();
}
extern "C" {
    pub fn _invoke_watson(
        _Expression: *const wchar_t,
        _FunctionName: *const wchar_t,
        _FileName: *const wchar_t,
        _LineNo: ::std::os::raw::c_uint,
        _Reserved: usize,
    );
}
pub type errno_t = ::std::os::raw::c_int;
pub type wint_t = ::std::os::raw::c_ushort;
pub type wctype_t = ::std::os::raw::c_ushort;
pub type __time32_t = ::std::os::raw::c_long;
pub type __time64_t = ::std::os::raw::c_longlong;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct __crt_locale_data_public {
    pub _locale_pctype: *const ::std::os::raw::c_ushort,
    pub _locale_mb_cur_max: ::std::os::raw::c_int,
    pub _locale_lc_codepage: ::std::os::raw::c_uint,
}
#[test]
fn bindgen_test_layout___crt_locale_data_public() {
    assert_eq!(
        ::std::mem::size_of::<__crt_locale_data_public>(),
        16usize,
        concat!("Size of: ", stringify!(__crt_locale_data_public))
    );
    assert_eq!(
        ::std::mem::align_of::<__crt_locale_data_public>(),
        8usize,
        concat!("Alignment of ", stringify!(__crt_locale_data_public))
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<__crt_locale_data_public>()))._locale_pctype as *const _ as usize
        },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(__crt_locale_data_public),
            "::",
            stringify!(_locale_pctype)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<__crt_locale_data_public>()))._locale_mb_cur_max as *const _
                as usize
        },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(__crt_locale_data_public),
            "::",
            stringify!(_locale_mb_cur_max)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<__crt_locale_data_public>()))._locale_lc_codepage as *const _
                as usize
        },
        12usize,
        concat!(
            "Offset of field: ",
            stringify!(__crt_locale_data_public),
            "::",
            stringify!(_locale_lc_codepage)
        )
    );
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct __crt_locale_pointers {
    pub locinfo: *mut __crt_locale_data,
    pub mbcinfo: *mut __crt_multibyte_data,
}
#[test]
fn bindgen_test_layout___crt_locale_pointers() {
    assert_eq!(
        ::std::mem::size_of::<__crt_locale_pointers>(),
        16usize,
        concat!("Size of: ", stringify!(__crt_locale_pointers))
    );
    assert_eq!(
        ::std::mem::align_of::<__crt_locale_pointers>(),
        8usize,
        concat!("Alignment of ", stringify!(__crt_locale_pointers))
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<__crt_locale_pointers>())).locinfo as *const _ as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(__crt_locale_pointers),
            "::",
            stringify!(locinfo)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<__crt_locale_pointers>())).mbcinfo as *const _ as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(__crt_locale_pointers),
            "::",
            stringify!(mbcinfo)
        )
    );
}
pub type _locale_t = *mut __crt_locale_pointers;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct _Mbstatet {
    pub _Wchar: ::std::os::raw::c_ulong,
    pub _Byte: ::std::os::raw::c_ushort,
    pub _State: ::std::os::raw::c_ushort,
}
#[test]
fn bindgen_test_layout__Mbstatet() {
    assert_eq!(
        ::std::mem::size_of::<_Mbstatet>(),
        8usize,
        concat!("Size of: ", stringify!(_Mbstatet))
    );
    assert_eq!(
        ::std::mem::align_of::<_Mbstatet>(),
        4usize,
        concat!("Alignment of ", stringify!(_Mbstatet))
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<_Mbstatet>()))._Wchar as *const _ as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(_Mbstatet),
            "::",
            stringify!(_Wchar)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<_Mbstatet>()))._Byte as *const _ as usize },
        4usize,
        concat!(
            "Offset of field: ",
            stringify!(_Mbstatet),
            "::",
            stringify!(_Byte)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<_Mbstatet>()))._State as *const _ as usize },
        6usize,
        concat!(
            "Offset of field: ",
            stringify!(_Mbstatet),
            "::",
            stringify!(_State)
        )
    );
}
pub type mbstate_t = _Mbstatet;
pub type time_t = __time64_t;
pub type rsize_t = size_t;
extern "C" {
    pub fn _calloc_base(_Count: size_t, _Size: size_t) -> *mut ::std::os::raw::c_void;
}
extern "C" {
    pub fn calloc(
        _Count: ::std::os::raw::c_ulonglong,
        _Size: ::std::os::raw::c_ulonglong,
    ) -> *mut ::std::os::raw::c_void;
}
extern "C" {
    pub fn _callnewh(_Size: size_t) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn _expand(
        _Block: *mut ::std::os::raw::c_void,
        _Size: size_t,
    ) -> *mut ::std::os::raw::c_void;
}
extern "C" {
    pub fn _free_base(_Block: *mut ::std::os::raw::c_void);
}
extern "C" {
    pub fn free(_Block: *mut ::std::os::raw::c_void);
}
extern "C" {
    pub fn _malloc_base(_Size: size_t) -> *mut ::std::os::raw::c_void;
}
extern "C" {
    pub fn malloc(_Size: ::std::os::raw::c_ulonglong) -> *mut ::std::os::raw::c_void;
}
extern "C" {
    pub fn _msize_base(_Block: *mut ::std::os::raw::c_void) -> size_t;
}
extern "C" {
    pub fn _msize(_Block: *mut ::std::os::raw::c_void) -> size_t;
}
extern "C" {
    pub fn _realloc_base(
        _Block: *mut ::std::os::raw::c_void,
        _Size: size_t,
    ) -> *mut ::std::os::raw::c_void;
}
extern "C" {
    pub fn realloc(
        _Block: *mut ::std::os::raw::c_void,
        _Size: ::std::os::raw::c_ulonglong,
    ) -> *mut ::std::os::raw::c_void;
}
extern "C" {
    pub fn _recalloc_base(
        _Block: *mut ::std::os::raw::c_void,
        _Count: size_t,
        _Size: size_t,
    ) -> *mut ::std::os::raw::c_void;
}
extern "C" {
    pub fn _recalloc(
        _Block: *mut ::std::os::raw::c_void,
        _Count: size_t,
        _Size: size_t,
    ) -> *mut ::std::os::raw::c_void;
}
extern "C" {
    pub fn _aligned_free(_Block: *mut ::std::os::raw::c_void);
}
extern "C" {
    pub fn _aligned_malloc(_Size: size_t, _Alignment: size_t) -> *mut ::std::os::raw::c_void;
}
extern "C" {
    pub fn _aligned_offset_malloc(
        _Size: size_t,
        _Alignment: size_t,
        _Offset: size_t,
    ) -> *mut ::std::os::raw::c_void;
}
extern "C" {
    pub fn _aligned_msize(
        _Block: *mut ::std::os::raw::c_void,
        _Alignment: size_t,
        _Offset: size_t,
    ) -> size_t;
}
extern "C" {
    pub fn _aligned_offset_realloc(
        _Block: *mut ::std::os::raw::c_void,
        _Size: size_t,
        _Alignment: size_t,
        _Offset: size_t,
    ) -> *mut ::std::os::raw::c_void;
}
extern "C" {
    pub fn _aligned_offset_recalloc(
        _Block: *mut ::std::os::raw::c_void,
        _Count: size_t,
        _Size: size_t,
        _Alignment: size_t,
        _Offset: size_t,
    ) -> *mut ::std::os::raw::c_void;
}
extern "C" {
    pub fn _aligned_realloc(
        _Block: *mut ::std::os::raw::c_void,
        _Size: size_t,
        _Alignment: size_t,
    ) -> *mut ::std::os::raw::c_void;
}
extern "C" {
    pub fn _aligned_recalloc(
        _Block: *mut ::std::os::raw::c_void,
        _Count: size_t,
        _Size: size_t,
        _Alignment: size_t,
    ) -> *mut ::std::os::raw::c_void;
}
pub type max_align_t = f64;
pub type _CoreCrtSecureSearchSortCompareFunction = ::std::option::Option<
    unsafe extern "C" fn(
        arg1: *mut ::std::os::raw::c_void,
        arg2: *const ::std::os::raw::c_void,
        arg3: *const ::std::os::raw::c_void,
    ) -> ::std::os::raw::c_int,
>;
pub type _CoreCrtNonSecureSearchSortCompareFunction = ::std::option::Option<
    unsafe extern "C" fn(
        arg1: *const ::std::os::raw::c_void,
        arg2: *const ::std::os::raw::c_void,
    ) -> ::std::os::raw::c_int,
>;
extern "C" {
    pub fn bsearch_s(
        _Key: *const ::std::os::raw::c_void,
        _Base: *const ::std::os::raw::c_void,
        _NumOfElements: rsize_t,
        _SizeOfElements: rsize_t,
        _CompareFunction: _CoreCrtSecureSearchSortCompareFunction,
        _Context: *mut ::std::os::raw::c_void,
    ) -> *mut ::std::os::raw::c_void;
}
extern "C" {
    pub fn qsort_s(
        _Base: *mut ::std::os::raw::c_void,
        _NumOfElements: rsize_t,
        _SizeOfElements: rsize_t,
        _CompareFunction: _CoreCrtSecureSearchSortCompareFunction,
        _Context: *mut ::std::os::raw::c_void,
    );
}
extern "C" {
    pub fn bsearch(
        _Key: *const ::std::os::raw::c_void,
        _Base: *const ::std::os::raw::c_void,
        _NumOfElements: size_t,
        _SizeOfElements: size_t,
        _CompareFunction: _CoreCrtNonSecureSearchSortCompareFunction,
    ) -> *mut ::std::os::raw::c_void;
}
extern "C" {
    pub fn qsort(
        _Base: *mut ::std::os::raw::c_void,
        _NumOfElements: size_t,
        _SizeOfElements: size_t,
        _CompareFunction: _CoreCrtNonSecureSearchSortCompareFunction,
    );
}
extern "C" {
    pub fn _lfind_s(
        _Key: *const ::std::os::raw::c_void,
        _Base: *const ::std::os::raw::c_void,
        _NumOfElements: *mut ::std::os::raw::c_uint,
        _SizeOfElements: size_t,
        _CompareFunction: _CoreCrtSecureSearchSortCompareFunction,
        _Context: *mut ::std::os::raw::c_void,
    ) -> *mut ::std::os::raw::c_void;
}
extern "C" {
    pub fn _lfind(
        _Key: *const ::std::os::raw::c_void,
        _Base: *const ::std::os::raw::c_void,
        _NumOfElements: *mut ::std::os::raw::c_uint,
        _SizeOfElements: ::std::os::raw::c_uint,
        _CompareFunction: _CoreCrtNonSecureSearchSortCompareFunction,
    ) -> *mut ::std::os::raw::c_void;
}
extern "C" {
    pub fn _lsearch_s(
        _Key: *const ::std::os::raw::c_void,
        _Base: *mut ::std::os::raw::c_void,
        _NumOfElements: *mut ::std::os::raw::c_uint,
        _SizeOfElements: size_t,
        _CompareFunction: _CoreCrtSecureSearchSortCompareFunction,
        _Context: *mut ::std::os::raw::c_void,
    ) -> *mut ::std::os::raw::c_void;
}
extern "C" {
    pub fn _lsearch(
        _Key: *const ::std::os::raw::c_void,
        _Base: *mut ::std::os::raw::c_void,
        _NumOfElements: *mut ::std::os::raw::c_uint,
        _SizeOfElements: ::std::os::raw::c_uint,
        _CompareFunction: _CoreCrtNonSecureSearchSortCompareFunction,
    ) -> *mut ::std::os::raw::c_void;
}
extern "C" {
    pub fn lfind(
        _Key: *const ::std::os::raw::c_void,
        _Base: *const ::std::os::raw::c_void,
        _NumOfElements: *mut ::std::os::raw::c_uint,
        _SizeOfElements: ::std::os::raw::c_uint,
        _CompareFunction: _CoreCrtNonSecureSearchSortCompareFunction,
    ) -> *mut ::std::os::raw::c_void;
}
extern "C" {
    pub fn lsearch(
        _Key: *const ::std::os::raw::c_void,
        _Base: *mut ::std::os::raw::c_void,
        _NumOfElements: *mut ::std::os::raw::c_uint,
        _SizeOfElements: ::std::os::raw::c_uint,
        _CompareFunction: _CoreCrtNonSecureSearchSortCompareFunction,
    ) -> *mut ::std::os::raw::c_void;
}
extern "C" {
    pub fn _itow_s(
        _Value: ::std::os::raw::c_int,
        _Buffer: *mut wchar_t,
        _BufferCount: size_t,
        _Radix: ::std::os::raw::c_int,
    ) -> errno_t;
}
extern "C" {
    pub fn _itow(
        _Value: ::std::os::raw::c_int,
        _Buffer: *mut wchar_t,
        _Radix: ::std::os::raw::c_int,
    ) -> *mut wchar_t;
}
extern "C" {
    pub fn _ltow_s(
        _Value: ::std::os::raw::c_long,
        _Buffer: *mut wchar_t,
        _BufferCount: size_t,
        _Radix: ::std::os::raw::c_int,
    ) -> errno_t;
}
extern "C" {
    pub fn _ltow(
        _Value: ::std::os::raw::c_long,
        _Buffer: *mut wchar_t,
        _Radix: ::std::os::raw::c_int,
    ) -> *mut wchar_t;
}
extern "C" {
    pub fn _ultow_s(
        _Value: ::std::os::raw::c_ulong,
        _Buffer: *mut wchar_t,
        _BufferCount: size_t,
        _Radix: ::std::os::raw::c_int,
    ) -> errno_t;
}
extern "C" {
    pub fn _ultow(
        _Value: ::std::os::raw::c_ulong,
        _Buffer: *mut wchar_t,
        _Radix: ::std::os::raw::c_int,
    ) -> *mut wchar_t;
}
extern "C" {
    pub fn wcstod(_String: *const wchar_t, _EndPtr: *mut *mut wchar_t) -> f64;
}
extern "C" {
    pub fn _wcstod_l(
        _String: *const wchar_t,
        _EndPtr: *mut *mut wchar_t,
        _Locale: _locale_t,
    ) -> f64;
}
extern "C" {
    pub fn wcstol(
        _String: *const wchar_t,
        _EndPtr: *mut *mut wchar_t,
        _Radix: ::std::os::raw::c_int,
    ) -> ::std::os::raw::c_long;
}
extern "C" {
    pub fn _wcstol_l(
        _String: *const wchar_t,
        _EndPtr: *mut *mut wchar_t,
        _Radix: ::std::os::raw::c_int,
        _Locale: _locale_t,
    ) -> ::std::os::raw::c_long;
}
extern "C" {
    pub fn wcstoll(
        _String: *const wchar_t,
        _EndPtr: *mut *mut wchar_t,
        _Radix: ::std::os::raw::c_int,
    ) -> ::std::os::raw::c_longlong;
}
extern "C" {
    pub fn _wcstoll_l(
        _String: *const wchar_t,
        _EndPtr: *mut *mut wchar_t,
        _Radix: ::std::os::raw::c_int,
        _Locale: _locale_t,
    ) -> ::std::os::raw::c_longlong;
}
extern "C" {
    pub fn wcstoul(
        _String: *const wchar_t,
        _EndPtr: *mut *mut wchar_t,
        _Radix: ::std::os::raw::c_int,
    ) -> ::std::os::raw::c_ulong;
}
extern "C" {
    pub fn _wcstoul_l(
        _String: *const wchar_t,
        _EndPtr: *mut *mut wchar_t,
        _Radix: ::std::os::raw::c_int,
        _Locale: _locale_t,
    ) -> ::std::os::raw::c_ulong;
}
extern "C" {
    pub fn wcstoull(
        _String: *const wchar_t,
        _EndPtr: *mut *mut wchar_t,
        _Radix: ::std::os::raw::c_int,
    ) -> ::std::os::raw::c_ulonglong;
}
extern "C" {
    pub fn _wcstoull_l(
        _String: *const wchar_t,
        _EndPtr: *mut *mut wchar_t,
        _Radix: ::std::os::raw::c_int,
        _Locale: _locale_t,
    ) -> ::std::os::raw::c_ulonglong;
}
extern "C" {
    pub fn wcstold(_String: *const wchar_t, _EndPtr: *mut *mut wchar_t) -> f64;
}
extern "C" {
    pub fn _wcstold_l(
        _String: *const wchar_t,
        _EndPtr: *mut *mut wchar_t,
        _Locale: _locale_t,
    ) -> f64;
}
extern "C" {
    pub fn wcstof(_String: *const wchar_t, _EndPtr: *mut *mut wchar_t) -> f32;
}
extern "C" {
    pub fn _wcstof_l(
        _String: *const wchar_t,
        _EndPtr: *mut *mut wchar_t,
        _Locale: _locale_t,
    ) -> f32;
}
extern "C" {
    pub fn _wtof(_String: *const wchar_t) -> f64;
}
extern "C" {
    pub fn _wtof_l(_String: *const wchar_t, _Locale: _locale_t) -> f64;
}
extern "C" {
    pub fn _wtoi(_String: *const wchar_t) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn _wtoi_l(_String: *const wchar_t, _Locale: _locale_t) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn _wtol(_String: *const wchar_t) -> ::std::os::raw::c_long;
}
extern "C" {
    pub fn _wtol_l(_String: *const wchar_t, _Locale: _locale_t) -> ::std::os::raw::c_long;
}
extern "C" {
    pub fn _wtoll(_String: *const wchar_t) -> ::std::os::raw::c_longlong;
}
extern "C" {
    pub fn _wtoll_l(_String: *const wchar_t, _Locale: _locale_t) -> ::std::os::raw::c_longlong;
}
extern "C" {
    pub fn _i64tow_s(
        _Value: ::std::os::raw::c_longlong,
        _Buffer: *mut wchar_t,
        _BufferCount: size_t,
        _Radix: ::std::os::raw::c_int,
    ) -> errno_t;
}
extern "C" {
    pub fn _i64tow(
        _Value: ::std::os::raw::c_longlong,
        _Buffer: *mut wchar_t,
        _Radix: ::std::os::raw::c_int,
    ) -> *mut wchar_t;
}
extern "C" {
    pub fn _ui64tow_s(
        _Value: ::std::os::raw::c_ulonglong,
        _Buffer: *mut wchar_t,
        _BufferCount: size_t,
        _Radix: ::std::os::raw::c_int,
    ) -> errno_t;
}
extern "C" {
    pub fn _ui64tow(
        _Value: ::std::os::raw::c_ulonglong,
        _Buffer: *mut wchar_t,
        _Radix: ::std::os::raw::c_int,
    ) -> *mut wchar_t;
}
extern "C" {
    pub fn _wtoi64(_String: *const wchar_t) -> ::std::os::raw::c_longlong;
}
extern "C" {
    pub fn _wtoi64_l(_String: *const wchar_t, _Locale: _locale_t) -> ::std::os::raw::c_longlong;
}
extern "C" {
    pub fn _wcstoi64(
        _String: *const wchar_t,
        _EndPtr: *mut *mut wchar_t,
        _Radix: ::std::os::raw::c_int,
    ) -> ::std::os::raw::c_longlong;
}
extern "C" {
    pub fn _wcstoi64_l(
        _String: *const wchar_t,
        _EndPtr: *mut *mut wchar_t,
        _Radix: ::std::os::raw::c_int,
        _Locale: _locale_t,
    ) -> ::std::os::raw::c_longlong;
}
extern "C" {
    pub fn _wcstoui64(
        _String: *const wchar_t,
        _EndPtr: *mut *mut wchar_t,
        _Radix: ::std::os::raw::c_int,
    ) -> ::std::os::raw::c_ulonglong;
}
extern "C" {
    pub fn _wcstoui64_l(
        _String: *const wchar_t,
        _EndPtr: *mut *mut wchar_t,
        _Radix: ::std::os::raw::c_int,
        _Locale: _locale_t,
    ) -> ::std::os::raw::c_ulonglong;
}
extern "C" {
    pub fn _wfullpath(
        _Buffer: *mut wchar_t,
        _Path: *const wchar_t,
        _BufferCount: size_t,
    ) -> *mut wchar_t;
}
extern "C" {
    pub fn _wmakepath_s(
        _Buffer: *mut wchar_t,
        _BufferCount: size_t,
        _Drive: *const wchar_t,
        _Dir: *const wchar_t,
        _Filename: *const wchar_t,
        _Ext: *const wchar_t,
    ) -> errno_t;
}
extern "C" {
    pub fn _wmakepath(
        _Buffer: *mut wchar_t,
        _Drive: *const wchar_t,
        _Dir: *const wchar_t,
        _Filename: *const wchar_t,
        _Ext: *const wchar_t,
    );
}
extern "C" {
    pub fn _wperror(_ErrorMessage: *const wchar_t);
}
extern "C" {
    pub fn _wsplitpath(
        _FullPath: *const wchar_t,
        _Drive: *mut wchar_t,
        _Dir: *mut wchar_t,
        _Filename: *mut wchar_t,
        _Ext: *mut wchar_t,
    );
}
extern "C" {
    pub fn _wsplitpath_s(
        _FullPath: *const wchar_t,
        _Drive: *mut wchar_t,
        _DriveCount: size_t,
        _Dir: *mut wchar_t,
        _DirCount: size_t,
        _Filename: *mut wchar_t,
        _FilenameCount: size_t,
        _Ext: *mut wchar_t,
        _ExtCount: size_t,
    ) -> errno_t;
}
extern "C" {
    pub fn _wdupenv_s(
        _Buffer: *mut *mut wchar_t,
        _BufferCount: *mut size_t,
        _VarName: *const wchar_t,
    ) -> errno_t;
}
extern "C" {
    pub fn _wgetenv(_VarName: *const wchar_t) -> *mut wchar_t;
}
extern "C" {
    pub fn _wgetenv_s(
        _RequiredCount: *mut size_t,
        _Buffer: *mut wchar_t,
        _BufferCount: size_t,
        _VarName: *const wchar_t,
    ) -> errno_t;
}
extern "C" {
    pub fn _wputenv(_EnvString: *const wchar_t) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn _wputenv_s(_Name: *const wchar_t, _Value: *const wchar_t) -> errno_t;
}
extern "C" {
    pub fn _wsearchenv_s(
        _Filename: *const wchar_t,
        _VarName: *const wchar_t,
        _Buffer: *mut wchar_t,
        _BufferCount: size_t,
    ) -> errno_t;
}
extern "C" {
    pub fn _wsearchenv(
        _Filename: *const wchar_t,
        _VarName: *const wchar_t,
        _ResultPath: *mut wchar_t,
    );
}
extern "C" {
    pub fn _wsystem(_Command: *const wchar_t) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn _swab(
        _Buf1: *mut ::std::os::raw::c_char,
        _Buf2: *mut ::std::os::raw::c_char,
        _SizeInBytes: ::std::os::raw::c_int,
    );
}
extern "C" {
    pub fn exit(_Code: ::std::os::raw::c_int);
}
extern "C" {
    pub fn _exit(_Code: ::std::os::raw::c_int);
}
extern "C" {
    pub fn _Exit(_Code: ::std::os::raw::c_int);
}
extern "C" {
    pub fn quick_exit(_Code: ::std::os::raw::c_int);
}
extern "C" {
    pub fn abort();
}
extern "C" {
    pub fn _set_abort_behavior(
        _Flags: ::std::os::raw::c_uint,
        _Mask: ::std::os::raw::c_uint,
    ) -> ::std::os::raw::c_uint;
}
pub type _onexit_t = ::std::option::Option<unsafe extern "C" fn() -> ::std::os::raw::c_int>;
extern "C" {
    pub fn atexit(arg1: ::std::option::Option<unsafe extern "C" fn()>) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn _onexit(_Func: _onexit_t) -> _onexit_t;
}
extern "C" {
    pub fn at_quick_exit(
        arg1: ::std::option::Option<unsafe extern "C" fn()>,
    ) -> ::std::os::raw::c_int;
}
pub type _purecall_handler = ::std::option::Option<unsafe extern "C" fn()>;
pub type _invalid_parameter_handler = ::std::option::Option<
    unsafe extern "C" fn(
        arg1: *const wchar_t,
        arg2: *const wchar_t,
        arg3: *const wchar_t,
        arg4: ::std::os::raw::c_uint,
        arg5: usize,
    ),
>;
extern "C" {
    pub fn _set_purecall_handler(_Handler: _purecall_handler) -> _purecall_handler;
}
extern "C" {
    pub fn _get_purecall_handler() -> _purecall_handler;
}
extern "C" {
    pub fn _set_invalid_parameter_handler(
        _Handler: _invalid_parameter_handler,
    ) -> _invalid_parameter_handler;
}
extern "C" {
    pub fn _get_invalid_parameter_handler() -> _invalid_parameter_handler;
}
extern "C" {
    pub fn _set_thread_local_invalid_parameter_handler(
        _Handler: _invalid_parameter_handler,
    ) -> _invalid_parameter_handler;
}
extern "C" {
    pub fn _get_thread_local_invalid_parameter_handler() -> _invalid_parameter_handler;
}
extern "C" {
    pub fn _set_error_mode(_Mode: ::std::os::raw::c_int) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn _errno() -> *mut ::std::os::raw::c_int;
}
extern "C" {
    pub fn _set_errno(_Value: ::std::os::raw::c_int) -> errno_t;
}
extern "C" {
    pub fn _get_errno(_Value: *mut ::std::os::raw::c_int) -> errno_t;
}
extern "C" {
    pub fn __doserrno() -> *mut ::std::os::raw::c_ulong;
}
extern "C" {
    pub fn _set_doserrno(_Value: ::std::os::raw::c_ulong) -> errno_t;
}
extern "C" {
    pub fn _get_doserrno(_Value: *mut ::std::os::raw::c_ulong) -> errno_t;
}
extern "C" {
    pub fn __sys_errlist() -> *mut *mut ::std::os::raw::c_char;
}
extern "C" {
    pub fn __sys_nerr() -> *mut ::std::os::raw::c_int;
}
extern "C" {
    pub fn perror(_ErrMsg: *const ::std::os::raw::c_char);
}
extern "C" {
    pub fn __p__pgmptr() -> *mut *mut ::std::os::raw::c_char;
}
extern "C" {
    pub fn __p__wpgmptr() -> *mut *mut wchar_t;
}
extern "C" {
    pub fn __p__fmode() -> *mut ::std::os::raw::c_int;
}
extern "C" {
    pub fn _get_pgmptr(_Value: *mut *mut ::std::os::raw::c_char) -> errno_t;
}
extern "C" {
    pub fn _get_wpgmptr(_Value: *mut *mut wchar_t) -> errno_t;
}
extern "C" {
    pub fn _set_fmode(_Mode: ::std::os::raw::c_int) -> errno_t;
}
extern "C" {
    pub fn _get_fmode(_PMode: *mut ::std::os::raw::c_int) -> errno_t;
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct _div_t {
    pub quot: ::std::os::raw::c_int,
    pub rem: ::std::os::raw::c_int,
}
#[test]
fn bindgen_test_layout__div_t() {
    assert_eq!(
        ::std::mem::size_of::<_div_t>(),
        8usize,
        concat!("Size of: ", stringify!(_div_t))
    );
    assert_eq!(
        ::std::mem::align_of::<_div_t>(),
        4usize,
        concat!("Alignment of ", stringify!(_div_t))
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<_div_t>())).quot as *const _ as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(_div_t),
            "::",
            stringify!(quot)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<_div_t>())).rem as *const _ as usize },
        4usize,
        concat!(
            "Offset of field: ",
            stringify!(_div_t),
            "::",
            stringify!(rem)
        )
    );
}
pub type div_t = _div_t;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct _ldiv_t {
    pub quot: ::std::os::raw::c_long,
    pub rem: ::std::os::raw::c_long,
}
#[test]
fn bindgen_test_layout__ldiv_t() {
    assert_eq!(
        ::std::mem::size_of::<_ldiv_t>(),
        8usize,
        concat!("Size of: ", stringify!(_ldiv_t))
    );
    assert_eq!(
        ::std::mem::align_of::<_ldiv_t>(),
        4usize,
        concat!("Alignment of ", stringify!(_ldiv_t))
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<_ldiv_t>())).quot as *const _ as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(_ldiv_t),
            "::",
            stringify!(quot)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<_ldiv_t>())).rem as *const _ as usize },
        4usize,
        concat!(
            "Offset of field: ",
            stringify!(_ldiv_t),
            "::",
            stringify!(rem)
        )
    );
}
pub type ldiv_t = _ldiv_t;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct _lldiv_t {
    pub quot: ::std::os::raw::c_longlong,
    pub rem: ::std::os::raw::c_longlong,
}
#[test]
fn bindgen_test_layout__lldiv_t() {
    assert_eq!(
        ::std::mem::size_of::<_lldiv_t>(),
        16usize,
        concat!("Size of: ", stringify!(_lldiv_t))
    );
    assert_eq!(
        ::std::mem::align_of::<_lldiv_t>(),
        8usize,
        concat!("Alignment of ", stringify!(_lldiv_t))
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<_lldiv_t>())).quot as *const _ as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(_lldiv_t),
            "::",
            stringify!(quot)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<_lldiv_t>())).rem as *const _ as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(_lldiv_t),
            "::",
            stringify!(rem)
        )
    );
}
pub type lldiv_t = _lldiv_t;
extern "C" {
    pub fn abs(_Number: ::std::os::raw::c_int) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn labs(_Number: ::std::os::raw::c_long) -> ::std::os::raw::c_long;
}
extern "C" {
    pub fn llabs(_Number: ::std::os::raw::c_longlong) -> ::std::os::raw::c_longlong;
}
extern "C" {
    pub fn _abs64(_Number: ::std::os::raw::c_longlong) -> ::std::os::raw::c_longlong;
}
extern "C" {
    pub fn _byteswap_ushort(_Number: ::std::os::raw::c_ushort) -> ::std::os::raw::c_ushort;
}
extern "C" {
    pub fn _byteswap_ulong(_Number: ::std::os::raw::c_ulong) -> ::std::os::raw::c_ulong;
}
extern "C" {
    pub fn _byteswap_uint64(_Number: ::std::os::raw::c_ulonglong) -> ::std::os::raw::c_ulonglong;
}
extern "C" {
    pub fn div(_Numerator: ::std::os::raw::c_int, _Denominator: ::std::os::raw::c_int) -> div_t;
}
extern "C" {
    pub fn ldiv(_Numerator: ::std::os::raw::c_long, _Denominator: ::std::os::raw::c_long)
        -> ldiv_t;
}
extern "C" {
    pub fn lldiv(
        _Numerator: ::std::os::raw::c_longlong,
        _Denominator: ::std::os::raw::c_longlong,
    ) -> lldiv_t;
}
extern "C" {
    pub fn _rotl(
        _Value: ::std::os::raw::c_uint,
        _Shift: ::std::os::raw::c_int,
    ) -> ::std::os::raw::c_uint;
}
extern "C" {
    pub fn _lrotl(
        _Value: ::std::os::raw::c_ulong,
        _Shift: ::std::os::raw::c_int,
    ) -> ::std::os::raw::c_ulong;
}
extern "C" {
    pub fn _rotl64(
        _Value: ::std::os::raw::c_ulonglong,
        _Shift: ::std::os::raw::c_int,
    ) -> ::std::os::raw::c_ulonglong;
}
extern "C" {
    pub fn _rotr(
        _Value: ::std::os::raw::c_uint,
        _Shift: ::std::os::raw::c_int,
    ) -> ::std::os::raw::c_uint;
}
extern "C" {
    pub fn _lrotr(
        _Value: ::std::os::raw::c_ulong,
        _Shift: ::std::os::raw::c_int,
    ) -> ::std::os::raw::c_ulong;
}
extern "C" {
    pub fn _rotr64(
        _Value: ::std::os::raw::c_ulonglong,
        _Shift: ::std::os::raw::c_int,
    ) -> ::std::os::raw::c_ulonglong;
}
extern "C" {
    pub fn srand(_Seed: ::std::os::raw::c_uint);
}
extern "C" {
    pub fn rand() -> ::std::os::raw::c_int;
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct _LDOUBLE {
    pub ld: [::std::os::raw::c_uchar; 10usize],
}
#[test]
fn bindgen_test_layout__LDOUBLE() {
    assert_eq!(
        ::std::mem::size_of::<_LDOUBLE>(),
        10usize,
        concat!("Size of: ", stringify!(_LDOUBLE))
    );
    assert_eq!(
        ::std::mem::align_of::<_LDOUBLE>(),
        1usize,
        concat!("Alignment of ", stringify!(_LDOUBLE))
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<_LDOUBLE>())).ld as *const _ as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(_LDOUBLE),
            "::",
            stringify!(ld)
        )
    );
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct _CRT_DOUBLE {
    pub x: f64,
}
#[test]
fn bindgen_test_layout__CRT_DOUBLE() {
    assert_eq!(
        ::std::mem::size_of::<_CRT_DOUBLE>(),
        8usize,
        concat!("Size of: ", stringify!(_CRT_DOUBLE))
    );
    assert_eq!(
        ::std::mem::align_of::<_CRT_DOUBLE>(),
        8usize,
        concat!("Alignment of ", stringify!(_CRT_DOUBLE))
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<_CRT_DOUBLE>())).x as *const _ as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(_CRT_DOUBLE),
            "::",
            stringify!(x)
        )
    );
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct _CRT_FLOAT {
    pub f: f32,
}
#[test]
fn bindgen_test_layout__CRT_FLOAT() {
    assert_eq!(
        ::std::mem::size_of::<_CRT_FLOAT>(),
        4usize,
        concat!("Size of: ", stringify!(_CRT_FLOAT))
    );
    assert_eq!(
        ::std::mem::align_of::<_CRT_FLOAT>(),
        4usize,
        concat!("Alignment of ", stringify!(_CRT_FLOAT))
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<_CRT_FLOAT>())).f as *const _ as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(_CRT_FLOAT),
            "::",
            stringify!(f)
        )
    );
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct _LONGDOUBLE {
    pub x: f64,
}
#[test]
fn bindgen_test_layout__LONGDOUBLE() {
    assert_eq!(
        ::std::mem::size_of::<_LONGDOUBLE>(),
        8usize,
        concat!("Size of: ", stringify!(_LONGDOUBLE))
    );
    assert_eq!(
        ::std::mem::align_of::<_LONGDOUBLE>(),
        8usize,
        concat!("Alignment of ", stringify!(_LONGDOUBLE))
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<_LONGDOUBLE>())).x as *const _ as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(_LONGDOUBLE),
            "::",
            stringify!(x)
        )
    );
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct _LDBL12 {
    pub ld12: [::std::os::raw::c_uchar; 12usize],
}
#[test]
fn bindgen_test_layout__LDBL12() {
    assert_eq!(
        ::std::mem::size_of::<_LDBL12>(),
        12usize,
        concat!("Size of: ", stringify!(_LDBL12))
    );
    assert_eq!(
        ::std::mem::align_of::<_LDBL12>(),
        1usize,
        concat!("Alignment of ", stringify!(_LDBL12))
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<_LDBL12>())).ld12 as *const _ as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(_LDBL12),
            "::",
            stringify!(ld12)
        )
    );
}
extern "C" {
    pub fn atof(_String: *const ::std::os::raw::c_char) -> f64;
}
extern "C" {
    pub fn atoi(_String: *const ::std::os::raw::c_char) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn atol(_String: *const ::std::os::raw::c_char) -> ::std::os::raw::c_long;
}
extern "C" {
    pub fn atoll(_String: *const ::std::os::raw::c_char) -> ::std::os::raw::c_longlong;
}
extern "C" {
    pub fn _atoi64(_String: *const ::std::os::raw::c_char) -> ::std::os::raw::c_longlong;
}
extern "C" {
    pub fn _atof_l(_String: *const ::std::os::raw::c_char, _Locale: _locale_t) -> f64;
}
extern "C" {
    pub fn _atoi_l(
        _String: *const ::std::os::raw::c_char,
        _Locale: _locale_t,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn _atol_l(
        _String: *const ::std::os::raw::c_char,
        _Locale: _locale_t,
    ) -> ::std::os::raw::c_long;
}
extern "C" {
    pub fn _atoll_l(
        _String: *const ::std::os::raw::c_char,
        _Locale: _locale_t,
    ) -> ::std::os::raw::c_longlong;
}
extern "C" {
    pub fn _atoi64_l(
        _String: *const ::std::os::raw::c_char,
        _Locale: _locale_t,
    ) -> ::std::os::raw::c_longlong;
}
extern "C" {
    pub fn _atoflt(
        _Result: *mut _CRT_FLOAT,
        _String: *const ::std::os::raw::c_char,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn _atodbl(
        _Result: *mut _CRT_DOUBLE,
        _String: *mut ::std::os::raw::c_char,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn _atoldbl(
        _Result: *mut _LDOUBLE,
        _String: *mut ::std::os::raw::c_char,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn _atoflt_l(
        _Result: *mut _CRT_FLOAT,
        _String: *const ::std::os::raw::c_char,
        _Locale: _locale_t,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn _atodbl_l(
        _Result: *mut _CRT_DOUBLE,
        _String: *mut ::std::os::raw::c_char,
        _Locale: _locale_t,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn _atoldbl_l(
        _Result: *mut _LDOUBLE,
        _String: *mut ::std::os::raw::c_char,
        _Locale: _locale_t,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn strtof(
        _String: *const ::std::os::raw::c_char,
        _EndPtr: *mut *mut ::std::os::raw::c_char,
    ) -> f32;
}
extern "C" {
    pub fn _strtof_l(
        _String: *const ::std::os::raw::c_char,
        _EndPtr: *mut *mut ::std::os::raw::c_char,
        _Locale: _locale_t,
    ) -> f32;
}
extern "C" {
    pub fn strtod(
        _String: *const ::std::os::raw::c_char,
        _EndPtr: *mut *mut ::std::os::raw::c_char,
    ) -> f64;
}
extern "C" {
    pub fn _strtod_l(
        _String: *const ::std::os::raw::c_char,
        _EndPtr: *mut *mut ::std::os::raw::c_char,
        _Locale: _locale_t,
    ) -> f64;
}
extern "C" {
    pub fn strtold(
        _String: *const ::std::os::raw::c_char,
        _EndPtr: *mut *mut ::std::os::raw::c_char,
    ) -> f64;
}
extern "C" {
    pub fn _strtold_l(
        _String: *const ::std::os::raw::c_char,
        _EndPtr: *mut *mut ::std::os::raw::c_char,
        _Locale: _locale_t,
    ) -> f64;
}
extern "C" {
    pub fn strtol(
        _String: *const ::std::os::raw::c_char,
        _EndPtr: *mut *mut ::std::os::raw::c_char,
        _Radix: ::std::os::raw::c_int,
    ) -> ::std::os::raw::c_long;
}
extern "C" {
    pub fn _strtol_l(
        _String: *const ::std::os::raw::c_char,
        _EndPtr: *mut *mut ::std::os::raw::c_char,
        _Radix: ::std::os::raw::c_int,
        _Locale: _locale_t,
    ) -> ::std::os::raw::c_long;
}
extern "C" {
    pub fn strtoll(
        _String: *const ::std::os::raw::c_char,
        _EndPtr: *mut *mut ::std::os::raw::c_char,
        _Radix: ::std::os::raw::c_int,
    ) -> ::std::os::raw::c_longlong;
}
extern "C" {
    pub fn _strtoll_l(
        _String: *const ::std::os::raw::c_char,
        _EndPtr: *mut *mut ::std::os::raw::c_char,
        _Radix: ::std::os::raw::c_int,
        _Locale: _locale_t,
    ) -> ::std::os::raw::c_longlong;
}
extern "C" {
    pub fn strtoul(
        _String: *const ::std::os::raw::c_char,
        _EndPtr: *mut *mut ::std::os::raw::c_char,
        _Radix: ::std::os::raw::c_int,
    ) -> ::std::os::raw::c_ulong;
}
extern "C" {
    pub fn _strtoul_l(
        _String: *const ::std::os::raw::c_char,
        _EndPtr: *mut *mut ::std::os::raw::c_char,
        _Radix: ::std::os::raw::c_int,
        _Locale: _locale_t,
    ) -> ::std::os::raw::c_ulong;
}
extern "C" {
    pub fn strtoull(
        _String: *const ::std::os::raw::c_char,
        _EndPtr: *mut *mut ::std::os::raw::c_char,
        _Radix: ::std::os::raw::c_int,
    ) -> ::std::os::raw::c_ulonglong;
}
extern "C" {
    pub fn _strtoull_l(
        _String: *const ::std::os::raw::c_char,
        _EndPtr: *mut *mut ::std::os::raw::c_char,
        _Radix: ::std::os::raw::c_int,
        _Locale: _locale_t,
    ) -> ::std::os::raw::c_ulonglong;
}
extern "C" {
    pub fn _strtoi64(
        _String: *const ::std::os::raw::c_char,
        _EndPtr: *mut *mut ::std::os::raw::c_char,
        _Radix: ::std::os::raw::c_int,
    ) -> ::std::os::raw::c_longlong;
}
extern "C" {
    pub fn _strtoi64_l(
        _String: *const ::std::os::raw::c_char,
        _EndPtr: *mut *mut ::std::os::raw::c_char,
        _Radix: ::std::os::raw::c_int,
        _Locale: _locale_t,
    ) -> ::std::os::raw::c_longlong;
}
extern "C" {
    pub fn _strtoui64(
        _String: *const ::std::os::raw::c_char,
        _EndPtr: *mut *mut ::std::os::raw::c_char,
        _Radix: ::std::os::raw::c_int,
    ) -> ::std::os::raw::c_ulonglong;
}
extern "C" {
    pub fn _strtoui64_l(
        _String: *const ::std::os::raw::c_char,
        _EndPtr: *mut *mut ::std::os::raw::c_char,
        _Radix: ::std::os::raw::c_int,
        _Locale: _locale_t,
    ) -> ::std::os::raw::c_ulonglong;
}
extern "C" {
    pub fn _itoa_s(
        _Value: ::std::os::raw::c_int,
        _Buffer: *mut ::std::os::raw::c_char,
        _BufferCount: size_t,
        _Radix: ::std::os::raw::c_int,
    ) -> errno_t;
}
extern "C" {
    pub fn _itoa(
        _Value: ::std::os::raw::c_int,
        _Buffer: *mut ::std::os::raw::c_char,
        _Radix: ::std::os::raw::c_int,
    ) -> *mut ::std::os::raw::c_char;
}
extern "C" {
    pub fn _ltoa_s(
        _Value: ::std::os::raw::c_long,
        _Buffer: *mut ::std::os::raw::c_char,
        _BufferCount: size_t,
        _Radix: ::std::os::raw::c_int,
    ) -> errno_t;
}
extern "C" {
    pub fn _ltoa(
        _Value: ::std::os::raw::c_long,
        _Buffer: *mut ::std::os::raw::c_char,
        _Radix: ::std::os::raw::c_int,
    ) -> *mut ::std::os::raw::c_char;
}
extern "C" {
    pub fn _ultoa_s(
        _Value: ::std::os::raw::c_ulong,
        _Buffer: *mut ::std::os::raw::c_char,
        _BufferCount: size_t,
        _Radix: ::std::os::raw::c_int,
    ) -> errno_t;
}
extern "C" {
    pub fn _ultoa(
        _Value: ::std::os::raw::c_ulong,
        _Buffer: *mut ::std::os::raw::c_char,
        _Radix: ::std::os::raw::c_int,
    ) -> *mut ::std::os::raw::c_char;
}
extern "C" {
    pub fn _i64toa_s(
        _Value: ::std::os::raw::c_longlong,
        _Buffer: *mut ::std::os::raw::c_char,
        _BufferCount: size_t,
        _Radix: ::std::os::raw::c_int,
    ) -> errno_t;
}
extern "C" {
    pub fn _i64toa(
        _Value: ::std::os::raw::c_longlong,
        _Buffer: *mut ::std::os::raw::c_char,
        _Radix: ::std::os::raw::c_int,
    ) -> *mut ::std::os::raw::c_char;
}
extern "C" {
    pub fn _ui64toa_s(
        _Value: ::std::os::raw::c_ulonglong,
        _Buffer: *mut ::std::os::raw::c_char,
        _BufferCount: size_t,
        _Radix: ::std::os::raw::c_int,
    ) -> errno_t;
}
extern "C" {
    pub fn _ui64toa(
        _Value: ::std::os::raw::c_ulonglong,
        _Buffer: *mut ::std::os::raw::c_char,
        _Radix: ::std::os::raw::c_int,
    ) -> *mut ::std::os::raw::c_char;
}
extern "C" {
    pub fn _ecvt_s(
        _Buffer: *mut ::std::os::raw::c_char,
        _BufferCount: size_t,
        _Value: f64,
        _DigitCount: ::std::os::raw::c_int,
        _PtDec: *mut ::std::os::raw::c_int,
        _PtSign: *mut ::std::os::raw::c_int,
    ) -> errno_t;
}
extern "C" {
    pub fn _ecvt(
        _Value: f64,
        _DigitCount: ::std::os::raw::c_int,
        _PtDec: *mut ::std::os::raw::c_int,
        _PtSign: *mut ::std::os::raw::c_int,
    ) -> *mut ::std::os::raw::c_char;
}
extern "C" {
    pub fn _fcvt_s(
        _Buffer: *mut ::std::os::raw::c_char,
        _BufferCount: size_t,
        _Value: f64,
        _FractionalDigitCount: ::std::os::raw::c_int,
        _PtDec: *mut ::std::os::raw::c_int,
        _PtSign: *mut ::std::os::raw::c_int,
    ) -> errno_t;
}
extern "C" {
    pub fn _fcvt(
        _Value: f64,
        _FractionalDigitCount: ::std::os::raw::c_int,
        _PtDec: *mut ::std::os::raw::c_int,
        _PtSign: *mut ::std::os::raw::c_int,
    ) -> *mut ::std::os::raw::c_char;
}
extern "C" {
    pub fn _gcvt_s(
        _Buffer: *mut ::std::os::raw::c_char,
        _BufferCount: size_t,
        _Value: f64,
        _DigitCount: ::std::os::raw::c_int,
    ) -> errno_t;
}
extern "C" {
    pub fn _gcvt(
        _Value: f64,
        _DigitCount: ::std::os::raw::c_int,
        _Buffer: *mut ::std::os::raw::c_char,
    ) -> *mut ::std::os::raw::c_char;
}
extern "C" {
    pub fn ___mb_cur_max_func() -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn ___mb_cur_max_l_func(_Locale: _locale_t) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn mblen(_Ch: *const ::std::os::raw::c_char, _MaxCount: size_t) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn _mblen_l(
        _Ch: *const ::std::os::raw::c_char,
        _MaxCount: size_t,
        _Locale: _locale_t,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn _mbstrlen(_String: *const ::std::os::raw::c_char) -> size_t;
}
extern "C" {
    pub fn _mbstrlen_l(_String: *const ::std::os::raw::c_char, _Locale: _locale_t) -> size_t;
}
extern "C" {
    pub fn _mbstrnlen(_String: *const ::std::os::raw::c_char, _MaxCount: size_t) -> size_t;
}
extern "C" {
    pub fn _mbstrnlen_l(
        _String: *const ::std::os::raw::c_char,
        _MaxCount: size_t,
        _Locale: _locale_t,
    ) -> size_t;
}
extern "C" {
    pub fn mbtowc(
        _DstCh: *mut wchar_t,
        _SrcCh: *const ::std::os::raw::c_char,
        _SrcSizeInBytes: size_t,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn _mbtowc_l(
        _DstCh: *mut wchar_t,
        _SrcCh: *const ::std::os::raw::c_char,
        _SrcSizeInBytes: size_t,
        _Locale: _locale_t,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn mbstowcs_s(
        _PtNumOfCharConverted: *mut size_t,
        _DstBuf: *mut wchar_t,
        _SizeInWords: size_t,
        _SrcBuf: *const ::std::os::raw::c_char,
        _MaxCount: size_t,
    ) -> errno_t;
}
extern "C" {
    pub fn mbstowcs(
        _Dest: *mut wchar_t,
        _Source: *const ::std::os::raw::c_char,
        _MaxCount: size_t,
    ) -> size_t;
}
extern "C" {
    pub fn _mbstowcs_s_l(
        _PtNumOfCharConverted: *mut size_t,
        _DstBuf: *mut wchar_t,
        _SizeInWords: size_t,
        _SrcBuf: *const ::std::os::raw::c_char,
        _MaxCount: size_t,
        _Locale: _locale_t,
    ) -> errno_t;
}
extern "C" {
    pub fn _mbstowcs_l(
        _Dest: *mut wchar_t,
        _Source: *const ::std::os::raw::c_char,
        _MaxCount: size_t,
        _Locale: _locale_t,
    ) -> size_t;
}
extern "C" {
    pub fn wctomb(_MbCh: *mut ::std::os::raw::c_char, _WCh: wchar_t) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn _wctomb_l(
        _MbCh: *mut ::std::os::raw::c_char,
        _WCh: wchar_t,
        _Locale: _locale_t,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn wctomb_s(
        _SizeConverted: *mut ::std::os::raw::c_int,
        _MbCh: *mut ::std::os::raw::c_char,
        _SizeInBytes: rsize_t,
        _WCh: wchar_t,
    ) -> errno_t;
}
extern "C" {
    pub fn _wctomb_s_l(
        _SizeConverted: *mut ::std::os::raw::c_int,
        _MbCh: *mut ::std::os::raw::c_char,
        _SizeInBytes: size_t,
        _WCh: wchar_t,
        _Locale: _locale_t,
    ) -> errno_t;
}
extern "C" {
    pub fn wcstombs_s(
        _PtNumOfCharConverted: *mut size_t,
        _Dst: *mut ::std::os::raw::c_char,
        _DstSizeInBytes: size_t,
        _Src: *const wchar_t,
        _MaxCountInBytes: size_t,
    ) -> errno_t;
}
extern "C" {
    pub fn wcstombs(
        _Dest: *mut ::std::os::raw::c_char,
        _Source: *const wchar_t,
        _MaxCount: size_t,
    ) -> size_t;
}
extern "C" {
    pub fn _wcstombs_s_l(
        _PtNumOfCharConverted: *mut size_t,
        _Dst: *mut ::std::os::raw::c_char,
        _DstSizeInBytes: size_t,
        _Src: *const wchar_t,
        _MaxCountInBytes: size_t,
        _Locale: _locale_t,
    ) -> errno_t;
}
extern "C" {
    pub fn _wcstombs_l(
        _Dest: *mut ::std::os::raw::c_char,
        _Source: *const wchar_t,
        _MaxCount: size_t,
        _Locale: _locale_t,
    ) -> size_t;
}
extern "C" {
    pub fn _fullpath(
        _Buffer: *mut ::std::os::raw::c_char,
        _Path: *const ::std::os::raw::c_char,
        _BufferCount: size_t,
    ) -> *mut ::std::os::raw::c_char;
}
extern "C" {
    pub fn _makepath_s(
        _Buffer: *mut ::std::os::raw::c_char,
        _BufferCount: size_t,
        _Drive: *const ::std::os::raw::c_char,
        _Dir: *const ::std::os::raw::c_char,
        _Filename: *const ::std::os::raw::c_char,
        _Ext: *const ::std::os::raw::c_char,
    ) -> errno_t;
}
extern "C" {
    pub fn _makepath(
        _Buffer: *mut ::std::os::raw::c_char,
        _Drive: *const ::std::os::raw::c_char,
        _Dir: *const ::std::os::raw::c_char,
        _Filename: *const ::std::os::raw::c_char,
        _Ext: *const ::std::os::raw::c_char,
    );
}
extern "C" {
    pub fn _splitpath(
        _FullPath: *const ::std::os::raw::c_char,
        _Drive: *mut ::std::os::raw::c_char,
        _Dir: *mut ::std::os::raw::c_char,
        _Filename: *mut ::std::os::raw::c_char,
        _Ext: *mut ::std::os::raw::c_char,
    );
}
extern "C" {
    pub fn _splitpath_s(
        _FullPath: *const ::std::os::raw::c_char,
        _Drive: *mut ::std::os::raw::c_char,
        _DriveCount: size_t,
        _Dir: *mut ::std::os::raw::c_char,
        _DirCount: size_t,
        _Filename: *mut ::std::os::raw::c_char,
        _FilenameCount: size_t,
        _Ext: *mut ::std::os::raw::c_char,
        _ExtCount: size_t,
    ) -> errno_t;
}
extern "C" {
    pub fn getenv_s(
        _RequiredCount: *mut size_t,
        _Buffer: *mut ::std::os::raw::c_char,
        _BufferCount: rsize_t,
        _VarName: *const ::std::os::raw::c_char,
    ) -> errno_t;
}
extern "C" {
    pub fn __p___argc() -> *mut ::std::os::raw::c_int;
}
extern "C" {
    pub fn __p___argv() -> *mut *mut *mut ::std::os::raw::c_char;
}
extern "C" {
    pub fn __p___wargv() -> *mut *mut *mut wchar_t;
}
extern "C" {
    pub fn __p__environ() -> *mut *mut *mut ::std::os::raw::c_char;
}
extern "C" {
    pub fn __p__wenviron() -> *mut *mut *mut wchar_t;
}
extern "C" {
    pub fn getenv(_VarName: *const ::std::os::raw::c_char) -> *mut ::std::os::raw::c_char;
}
extern "C" {
    pub fn _dupenv_s(
        _Buffer: *mut *mut ::std::os::raw::c_char,
        _BufferCount: *mut size_t,
        _VarName: *const ::std::os::raw::c_char,
    ) -> errno_t;
}
extern "C" {
    pub fn system(_Command: *const ::std::os::raw::c_char) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn _putenv(_EnvString: *const ::std::os::raw::c_char) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn _putenv_s(
        _Name: *const ::std::os::raw::c_char,
        _Value: *const ::std::os::raw::c_char,
    ) -> errno_t;
}
extern "C" {
    pub fn _searchenv_s(
        _Filename: *const ::std::os::raw::c_char,
        _VarName: *const ::std::os::raw::c_char,
        _Buffer: *mut ::std::os::raw::c_char,
        _BufferCount: size_t,
    ) -> errno_t;
}
extern "C" {
    pub fn _searchenv(
        _Filename: *const ::std::os::raw::c_char,
        _VarName: *const ::std::os::raw::c_char,
        _Buffer: *mut ::std::os::raw::c_char,
    );
}
extern "C" {
    pub fn _seterrormode(_Mode: ::std::os::raw::c_int);
}
extern "C" {
    pub fn _beep(_Frequency: ::std::os::raw::c_uint, _Duration: ::std::os::raw::c_uint);
}
extern "C" {
    pub fn _sleep(_Duration: ::std::os::raw::c_ulong);
}
extern "C" {
    pub fn ecvt(
        _Value: f64,
        _DigitCount: ::std::os::raw::c_int,
        _PtDec: *mut ::std::os::raw::c_int,
        _PtSign: *mut ::std::os::raw::c_int,
    ) -> *mut ::std::os::raw::c_char;
}
extern "C" {
    pub fn fcvt(
        _Value: f64,
        _FractionalDigitCount: ::std::os::raw::c_int,
        _PtDec: *mut ::std::os::raw::c_int,
        _PtSign: *mut ::std::os::raw::c_int,
    ) -> *mut ::std::os::raw::c_char;
}
extern "C" {
    pub fn gcvt(
        _Value: f64,
        _DigitCount: ::std::os::raw::c_int,
        _DstBuf: *mut ::std::os::raw::c_char,
    ) -> *mut ::std::os::raw::c_char;
}
extern "C" {
    pub fn itoa(
        _Value: ::std::os::raw::c_int,
        _Buffer: *mut ::std::os::raw::c_char,
        _Radix: ::std::os::raw::c_int,
    ) -> *mut ::std::os::raw::c_char;
}
extern "C" {
    pub fn ltoa(
        _Value: ::std::os::raw::c_long,
        _Buffer: *mut ::std::os::raw::c_char,
        _Radix: ::std::os::raw::c_int,
    ) -> *mut ::std::os::raw::c_char;
}
extern "C" {
    pub fn swab(
        _Buf1: *mut ::std::os::raw::c_char,
        _Buf2: *mut ::std::os::raw::c_char,
        _SizeInBytes: ::std::os::raw::c_int,
    );
}
extern "C" {
    pub fn ultoa(
        _Value: ::std::os::raw::c_ulong,
        _Buffer: *mut ::std::os::raw::c_char,
        _Radix: ::std::os::raw::c_int,
    ) -> *mut ::std::os::raw::c_char;
}
extern "C" {
    pub fn putenv(_EnvString: *const ::std::os::raw::c_char) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn onexit(_Func: _onexit_t) -> _onexit_t;
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct _iobuf {
    pub _Placeholder: *mut ::std::os::raw::c_void,
}
#[test]
fn bindgen_test_layout__iobuf() {
    assert_eq!(
        ::std::mem::size_of::<_iobuf>(),
        8usize,
        concat!("Size of: ", stringify!(_iobuf))
    );
    assert_eq!(
        ::std::mem::align_of::<_iobuf>(),
        8usize,
        concat!("Alignment of ", stringify!(_iobuf))
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<_iobuf>()))._Placeholder as *const _ as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(_iobuf),
            "::",
            stringify!(_Placeholder)
        )
    );
}
pub type FILE = _iobuf;
extern "C" {
    pub fn __acrt_iob_func(_Ix: ::std::os::raw::c_uint) -> *mut FILE;
}
extern "C" {
    pub fn fgetwc(_Stream: *mut FILE) -> wint_t;
}
extern "C" {
    pub fn _fgetwchar() -> wint_t;
}
extern "C" {
    pub fn fputwc(_Character: wchar_t, _Stream: *mut FILE) -> wint_t;
}
extern "C" {
    pub fn _fputwchar(_Character: wchar_t) -> wint_t;
}
extern "C" {
    pub fn getwc(_Stream: *mut FILE) -> wint_t;
}
extern "C" {
    pub fn getwchar() -> wint_t;
}
extern "C" {
    pub fn fgetws(
        _Buffer: *mut wchar_t,
        _BufferCount: ::std::os::raw::c_int,
        _Stream: *mut FILE,
    ) -> *mut wchar_t;
}
extern "C" {
    pub fn fputws(_Buffer: *const wchar_t, _Stream: *mut FILE) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn _getws_s(_Buffer: *mut wchar_t, _BufferCount: size_t) -> *mut wchar_t;
}
extern "C" {
    pub fn putwc(_Character: wchar_t, _Stream: *mut FILE) -> wint_t;
}
extern "C" {
    pub fn putwchar(_Character: wchar_t) -> wint_t;
}
extern "C" {
    pub fn _putws(_Buffer: *const wchar_t) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn ungetwc(_Character: wint_t, _Stream: *mut FILE) -> wint_t;
}
extern "C" {
    pub fn _wfdopen(_FileHandle: ::std::os::raw::c_int, _Mode: *const wchar_t) -> *mut FILE;
}
extern "C" {
    pub fn _wfopen(_FileName: *const wchar_t, _Mode: *const wchar_t) -> *mut FILE;
}
extern "C" {
    pub fn _wfopen_s(
        _Stream: *mut *mut FILE,
        _FileName: *const wchar_t,
        _Mode: *const wchar_t,
    ) -> errno_t;
}
extern "C" {
    pub fn _wfreopen(
        _FileName: *const wchar_t,
        _Mode: *const wchar_t,
        _OldStream: *mut FILE,
    ) -> *mut FILE;
}
extern "C" {
    pub fn _wfreopen_s(
        _Stream: *mut *mut FILE,
        _FileName: *const wchar_t,
        _Mode: *const wchar_t,
        _OldStream: *mut FILE,
    ) -> errno_t;
}
extern "C" {
    pub fn _wfsopen(
        _FileName: *const wchar_t,
        _Mode: *const wchar_t,
        _ShFlag: ::std::os::raw::c_int,
    ) -> *mut FILE;
}
extern "C" {
    pub fn _wpopen(_Command: *const wchar_t, _Mode: *const wchar_t) -> *mut FILE;
}
extern "C" {
    pub fn _wremove(_FileName: *const wchar_t) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn _wtempnam(_Directory: *const wchar_t, _FilePrefix: *const wchar_t) -> *mut wchar_t;
}
extern "C" {
    pub fn _wtmpnam_s(_Buffer: *mut wchar_t, _BufferCount: size_t) -> errno_t;
}
extern "C" {
    pub fn _wtmpnam(_Buffer: *mut wchar_t) -> *mut wchar_t;
}
extern "C" {
    pub fn _fgetwc_nolock(_Stream: *mut FILE) -> wint_t;
}
extern "C" {
    pub fn _fputwc_nolock(_Character: wchar_t, _Stream: *mut FILE) -> wint_t;
}
extern "C" {
    pub fn _getwc_nolock(_Stream: *mut FILE) -> wint_t;
}
extern "C" {
    pub fn _putwc_nolock(_Character: wchar_t, _Stream: *mut FILE) -> wint_t;
}
extern "C" {
    pub fn _ungetwc_nolock(_Character: wint_t, _Stream: *mut FILE) -> wint_t;
}
extern "C" {
    pub fn __stdio_common_vfwprintf(
        _Options: ::std::os::raw::c_ulonglong,
        _Stream: *mut FILE,
        _Format: *const wchar_t,
        _Locale: _locale_t,
        _ArgList: va_list,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn __stdio_common_vfwprintf_s(
        _Options: ::std::os::raw::c_ulonglong,
        _Stream: *mut FILE,
        _Format: *const wchar_t,
        _Locale: _locale_t,
        _ArgList: va_list,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn __stdio_common_vfwprintf_p(
        _Options: ::std::os::raw::c_ulonglong,
        _Stream: *mut FILE,
        _Format: *const wchar_t,
        _Locale: _locale_t,
        _ArgList: va_list,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn __stdio_common_vfwscanf(
        _Options: ::std::os::raw::c_ulonglong,
        _Stream: *mut FILE,
        _Format: *const wchar_t,
        _Locale: _locale_t,
        _ArgList: va_list,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn __stdio_common_vswprintf(
        _Options: ::std::os::raw::c_ulonglong,
        _Buffer: *mut wchar_t,
        _BufferCount: size_t,
        _Format: *const wchar_t,
        _Locale: _locale_t,
        _ArgList: va_list,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn __stdio_common_vswprintf_s(
        _Options: ::std::os::raw::c_ulonglong,
        _Buffer: *mut wchar_t,
        _BufferCount: size_t,
        _Format: *const wchar_t,
        _Locale: _locale_t,
        _ArgList: va_list,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn __stdio_common_vsnwprintf_s(
        _Options: ::std::os::raw::c_ulonglong,
        _Buffer: *mut wchar_t,
        _BufferCount: size_t,
        _MaxCount: size_t,
        _Format: *const wchar_t,
        _Locale: _locale_t,
        _ArgList: va_list,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn __stdio_common_vswprintf_p(
        _Options: ::std::os::raw::c_ulonglong,
        _Buffer: *mut wchar_t,
        _BufferCount: size_t,
        _Format: *const wchar_t,
        _Locale: _locale_t,
        _ArgList: va_list,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn __stdio_common_vswscanf(
        _Options: ::std::os::raw::c_ulonglong,
        _Buffer: *const wchar_t,
        _BufferCount: size_t,
        _Format: *const wchar_t,
        _Locale: _locale_t,
        _ArgList: va_list,
    ) -> ::std::os::raw::c_int;
}
pub type fpos_t = ::std::os::raw::c_longlong;
extern "C" {
    pub fn _get_stream_buffer_pointers(
        _Stream: *mut FILE,
        _Base: *mut *mut *mut ::std::os::raw::c_char,
        _Pointer: *mut *mut *mut ::std::os::raw::c_char,
        _Count: *mut *mut ::std::os::raw::c_int,
    ) -> errno_t;
}
extern "C" {
    pub fn clearerr_s(_Stream: *mut FILE) -> errno_t;
}
extern "C" {
    pub fn fopen_s(
        _Stream: *mut *mut FILE,
        _FileName: *const ::std::os::raw::c_char,
        _Mode: *const ::std::os::raw::c_char,
    ) -> errno_t;
}
extern "C" {
    pub fn fread_s(
        _Buffer: *mut ::std::os::raw::c_void,
        _BufferSize: size_t,
        _ElementSize: size_t,
        _ElementCount: size_t,
        _Stream: *mut FILE,
    ) -> size_t;
}
extern "C" {
    pub fn freopen_s(
        _Stream: *mut *mut FILE,
        _FileName: *const ::std::os::raw::c_char,
        _Mode: *const ::std::os::raw::c_char,
        _OldStream: *mut FILE,
    ) -> errno_t;
}
extern "C" {
    pub fn gets_s(
        _Buffer: *mut ::std::os::raw::c_char,
        _Size: rsize_t,
    ) -> *mut ::std::os::raw::c_char;
}
extern "C" {
    pub fn tmpfile_s(_Stream: *mut *mut FILE) -> errno_t;
}
extern "C" {
    pub fn tmpnam_s(_Buffer: *mut ::std::os::raw::c_char, _Size: rsize_t) -> errno_t;
}
extern "C" {
    pub fn clearerr(_Stream: *mut FILE);
}
extern "C" {
    pub fn fclose(_Stream: *mut FILE) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn _fcloseall() -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn _fdopen(
        _FileHandle: ::std::os::raw::c_int,
        _Mode: *const ::std::os::raw::c_char,
    ) -> *mut FILE;
}
extern "C" {
    pub fn feof(_Stream: *mut FILE) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn ferror(_Stream: *mut FILE) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn fflush(_Stream: *mut FILE) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn fgetc(_Stream: *mut FILE) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn _fgetchar() -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn fgetpos(_Stream: *mut FILE, _Position: *mut fpos_t) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn fgets(
        _Buffer: *mut ::std::os::raw::c_char,
        _MaxCount: ::std::os::raw::c_int,
        _Stream: *mut FILE,
    ) -> *mut ::std::os::raw::c_char;
}
extern "C" {
    pub fn _fileno(_Stream: *mut FILE) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn _flushall() -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn fopen(
        _FileName: *const ::std::os::raw::c_char,
        _Mode: *const ::std::os::raw::c_char,
    ) -> *mut FILE;
}
extern "C" {
    pub fn fputc(_Character: ::std::os::raw::c_int, _Stream: *mut FILE) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn _fputchar(_Character: ::std::os::raw::c_int) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn fputs(
        _Buffer: *const ::std::os::raw::c_char,
        _Stream: *mut FILE,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn fread(
        _Buffer: *mut ::std::os::raw::c_void,
        _ElementSize: ::std::os::raw::c_ulonglong,
        _ElementCount: ::std::os::raw::c_ulonglong,
        _Stream: *mut FILE,
    ) -> ::std::os::raw::c_ulonglong;
}
extern "C" {
    pub fn freopen(
        _FileName: *const ::std::os::raw::c_char,
        _Mode: *const ::std::os::raw::c_char,
        _Stream: *mut FILE,
    ) -> *mut FILE;
}
extern "C" {
    pub fn _fsopen(
        _FileName: *const ::std::os::raw::c_char,
        _Mode: *const ::std::os::raw::c_char,
        _ShFlag: ::std::os::raw::c_int,
    ) -> *mut FILE;
}
extern "C" {
    pub fn fsetpos(_Stream: *mut FILE, _Position: *const fpos_t) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn fseek(
        _Stream: *mut FILE,
        _Offset: ::std::os::raw::c_long,
        _Origin: ::std::os::raw::c_int,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn _fseeki64(
        _Stream: *mut FILE,
        _Offset: ::std::os::raw::c_longlong,
        _Origin: ::std::os::raw::c_int,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn ftell(_Stream: *mut FILE) -> ::std::os::raw::c_long;
}
extern "C" {
    pub fn _ftelli64(_Stream: *mut FILE) -> ::std::os::raw::c_longlong;
}
extern "C" {
    pub fn fwrite(
        _Buffer: *const ::std::os::raw::c_void,
        _ElementSize: ::std::os::raw::c_ulonglong,
        _ElementCount: ::std::os::raw::c_ulonglong,
        _Stream: *mut FILE,
    ) -> ::std::os::raw::c_ulonglong;
}
extern "C" {
    pub fn getc(_Stream: *mut FILE) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn getchar() -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn _getmaxstdio() -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn _getw(_Stream: *mut FILE) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn _pclose(_Stream: *mut FILE) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn _popen(
        _Command: *const ::std::os::raw::c_char,
        _Mode: *const ::std::os::raw::c_char,
    ) -> *mut FILE;
}
extern "C" {
    pub fn putc(_Character: ::std::os::raw::c_int, _Stream: *mut FILE) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn putchar(_Character: ::std::os::raw::c_int) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn puts(_Buffer: *const ::std::os::raw::c_char) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn _putw(_Word: ::std::os::raw::c_int, _Stream: *mut FILE) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn remove(_FileName: *const ::std::os::raw::c_char) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn rename(
        _OldFileName: *const ::std::os::raw::c_char,
        _NewFileName: *const ::std::os::raw::c_char,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn _unlink(_FileName: *const ::std::os::raw::c_char) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn unlink(_FileName: *const ::std::os::raw::c_char) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn rewind(_Stream: *mut FILE);
}
extern "C" {
    pub fn _rmtmp() -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn setbuf(_Stream: *mut FILE, _Buffer: *mut ::std::os::raw::c_char);
}
extern "C" {
    pub fn _setmaxstdio(_Maximum: ::std::os::raw::c_int) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn setvbuf(
        _Stream: *mut FILE,
        _Buffer: *mut ::std::os::raw::c_char,
        _Mode: ::std::os::raw::c_int,
        _Size: size_t,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn _tempnam(
        _DirectoryName: *const ::std::os::raw::c_char,
        _FilePrefix: *const ::std::os::raw::c_char,
    ) -> *mut ::std::os::raw::c_char;
}
extern "C" {
    pub fn tmpfile() -> *mut FILE;
}
extern "C" {
    pub fn tmpnam(_Buffer: *mut ::std::os::raw::c_char) -> *mut ::std::os::raw::c_char;
}
extern "C" {
    pub fn ungetc(_Character: ::std::os::raw::c_int, _Stream: *mut FILE) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn _lock_file(_Stream: *mut FILE);
}
extern "C" {
    pub fn _unlock_file(_Stream: *mut FILE);
}
extern "C" {
    pub fn _fclose_nolock(_Stream: *mut FILE) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn _fflush_nolock(_Stream: *mut FILE) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn _fgetc_nolock(_Stream: *mut FILE) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn _fputc_nolock(
        _Character: ::std::os::raw::c_int,
        _Stream: *mut FILE,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn _fread_nolock(
        _Buffer: *mut ::std::os::raw::c_void,
        _ElementSize: size_t,
        _ElementCount: size_t,
        _Stream: *mut FILE,
    ) -> size_t;
}
extern "C" {
    pub fn _fread_nolock_s(
        _Buffer: *mut ::std::os::raw::c_void,
        _BufferSize: size_t,
        _ElementSize: size_t,
        _ElementCount: size_t,
        _Stream: *mut FILE,
    ) -> size_t;
}
extern "C" {
    pub fn _fseek_nolock(
        _Stream: *mut FILE,
        _Offset: ::std::os::raw::c_long,
        _Origin: ::std::os::raw::c_int,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn _fseeki64_nolock(
        _Stream: *mut FILE,
        _Offset: ::std::os::raw::c_longlong,
        _Origin: ::std::os::raw::c_int,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn _ftell_nolock(_Stream: *mut FILE) -> ::std::os::raw::c_long;
}
extern "C" {
    pub fn _ftelli64_nolock(_Stream: *mut FILE) -> ::std::os::raw::c_longlong;
}
extern "C" {
    pub fn _fwrite_nolock(
        _Buffer: *const ::std::os::raw::c_void,
        _ElementSize: size_t,
        _ElementCount: size_t,
        _Stream: *mut FILE,
    ) -> size_t;
}
extern "C" {
    pub fn _getc_nolock(_Stream: *mut FILE) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn _putc_nolock(
        _Character: ::std::os::raw::c_int,
        _Stream: *mut FILE,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn _ungetc_nolock(
        _Character: ::std::os::raw::c_int,
        _Stream: *mut FILE,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn __p__commode() -> *mut ::std::os::raw::c_int;
}
extern "C" {
    pub fn __stdio_common_vfprintf(
        _Options: ::std::os::raw::c_ulonglong,
        _Stream: *mut FILE,
        _Format: *const ::std::os::raw::c_char,
        _Locale: _locale_t,
        _ArgList: va_list,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn __stdio_common_vfprintf_s(
        _Options: ::std::os::raw::c_ulonglong,
        _Stream: *mut FILE,
        _Format: *const ::std::os::raw::c_char,
        _Locale: _locale_t,
        _ArgList: va_list,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn __stdio_common_vfprintf_p(
        _Options: ::std::os::raw::c_ulonglong,
        _Stream: *mut FILE,
        _Format: *const ::std::os::raw::c_char,
        _Locale: _locale_t,
        _ArgList: va_list,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn _set_printf_count_output(_Value: ::std::os::raw::c_int) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn _get_printf_count_output() -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn __stdio_common_vfscanf(
        _Options: ::std::os::raw::c_ulonglong,
        _Stream: *mut FILE,
        _Format: *const ::std::os::raw::c_char,
        _Locale: _locale_t,
        _Arglist: va_list,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn __stdio_common_vsprintf(
        _Options: ::std::os::raw::c_ulonglong,
        _Buffer: *mut ::std::os::raw::c_char,
        _BufferCount: size_t,
        _Format: *const ::std::os::raw::c_char,
        _Locale: _locale_t,
        _ArgList: va_list,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn __stdio_common_vsprintf_s(
        _Options: ::std::os::raw::c_ulonglong,
        _Buffer: *mut ::std::os::raw::c_char,
        _BufferCount: size_t,
        _Format: *const ::std::os::raw::c_char,
        _Locale: _locale_t,
        _ArgList: va_list,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn __stdio_common_vsnprintf_s(
        _Options: ::std::os::raw::c_ulonglong,
        _Buffer: *mut ::std::os::raw::c_char,
        _BufferCount: size_t,
        _MaxCount: size_t,
        _Format: *const ::std::os::raw::c_char,
        _Locale: _locale_t,
        _ArgList: va_list,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn __stdio_common_vsprintf_p(
        _Options: ::std::os::raw::c_ulonglong,
        _Buffer: *mut ::std::os::raw::c_char,
        _BufferCount: size_t,
        _Format: *const ::std::os::raw::c_char,
        _Locale: _locale_t,
        _ArgList: va_list,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn __stdio_common_vsscanf(
        _Options: ::std::os::raw::c_ulonglong,
        _Buffer: *const ::std::os::raw::c_char,
        _BufferCount: size_t,
        _Format: *const ::std::os::raw::c_char,
        _Locale: _locale_t,
        _ArgList: va_list,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn tempnam(
        _Directory: *const ::std::os::raw::c_char,
        _FilePrefix: *const ::std::os::raw::c_char,
    ) -> *mut ::std::os::raw::c_char;
}
extern "C" {
    pub fn fcloseall() -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn fdopen(
        _FileHandle: ::std::os::raw::c_int,
        _Format: *const ::std::os::raw::c_char,
    ) -> *mut FILE;
}
extern "C" {
    pub fn fgetchar() -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn fileno(_Stream: *mut FILE) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn flushall() -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn fputchar(_Ch: ::std::os::raw::c_int) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn getw(_Stream: *mut FILE) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn putw(_Ch: ::std::os::raw::c_int, _Stream: *mut FILE) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn rmtmp() -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn memchr(
        _Buf: *const ::std::os::raw::c_void,
        _Val: ::std::os::raw::c_int,
        _MaxCount: ::std::os::raw::c_ulonglong,
    ) -> *mut ::std::os::raw::c_void;
}
extern "C" {
    pub fn memcmp(
        _Buf1: *const ::std::os::raw::c_void,
        _Buf2: *const ::std::os::raw::c_void,
        _Size: ::std::os::raw::c_ulonglong,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn memcpy(
        _Dst: *mut ::std::os::raw::c_void,
        _Src: *const ::std::os::raw::c_void,
        _Size: ::std::os::raw::c_ulonglong,
    ) -> *mut ::std::os::raw::c_void;
}
extern "C" {
    pub fn memmove(
        _Dst: *mut ::std::os::raw::c_void,
        _Src: *const ::std::os::raw::c_void,
        _Size: ::std::os::raw::c_ulonglong,
    ) -> *mut ::std::os::raw::c_void;
}
extern "C" {
    pub fn memset(
        _Dst: *mut ::std::os::raw::c_void,
        _Val: ::std::os::raw::c_int,
        _Size: ::std::os::raw::c_ulonglong,
    ) -> *mut ::std::os::raw::c_void;
}
extern "C" {
    pub fn strchr(
        _Str: *const ::std::os::raw::c_char,
        _Val: ::std::os::raw::c_int,
    ) -> *mut ::std::os::raw::c_char;
}
extern "C" {
    pub fn strrchr(
        _Str: *const ::std::os::raw::c_char,
        _Ch: ::std::os::raw::c_int,
    ) -> *mut ::std::os::raw::c_char;
}
extern "C" {
    pub fn strstr(
        _Str: *const ::std::os::raw::c_char,
        _SubStr: *const ::std::os::raw::c_char,
    ) -> *mut ::std::os::raw::c_char;
}
extern "C" {
    pub fn wcschr(
        _Str: *const ::std::os::raw::c_ushort,
        _Ch: ::std::os::raw::c_ushort,
    ) -> *mut ::std::os::raw::c_ushort;
}
extern "C" {
    pub fn wcsrchr(_Str: *const wchar_t, _Ch: wchar_t) -> *mut wchar_t;
}
extern "C" {
    pub fn wcsstr(_Str: *const wchar_t, _SubStr: *const wchar_t) -> *mut wchar_t;
}
extern "C" {
    pub fn _memicmp(
        _Buf1: *const ::std::os::raw::c_void,
        _Buf2: *const ::std::os::raw::c_void,
        _Size: size_t,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn _memicmp_l(
        _Buf1: *const ::std::os::raw::c_void,
        _Buf2: *const ::std::os::raw::c_void,
        _Size: size_t,
        _Locale: _locale_t,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn memccpy(
        _Dst: *mut ::std::os::raw::c_void,
        _Src: *const ::std::os::raw::c_void,
        _Val: ::std::os::raw::c_int,
        _Size: ::std::os::raw::c_ulonglong,
    ) -> *mut ::std::os::raw::c_void;
}
extern "C" {
    pub fn memicmp(
        _Buf1: *const ::std::os::raw::c_void,
        _Buf2: *const ::std::os::raw::c_void,
        _Size: size_t,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn wcscat_s(
        _Destination: *mut wchar_t,
        _SizeInWords: rsize_t,
        _Source: *const wchar_t,
    ) -> errno_t;
}
extern "C" {
    pub fn wcscpy_s(
        _Destination: *mut wchar_t,
        _SizeInWords: rsize_t,
        _Source: *const wchar_t,
    ) -> errno_t;
}
extern "C" {
    pub fn wcsncat_s(
        _Destination: *mut wchar_t,
        _SizeInWords: rsize_t,
        _Source: *const wchar_t,
        _MaxCount: rsize_t,
    ) -> errno_t;
}
extern "C" {
    pub fn wcsncpy_s(
        _Destination: *mut wchar_t,
        _SizeInWords: rsize_t,
        _Source: *const wchar_t,
        _MaxCount: rsize_t,
    ) -> errno_t;
}
extern "C" {
    pub fn wcstok_s(
        _String: *mut wchar_t,
        _Delimiter: *const wchar_t,
        _Context: *mut *mut wchar_t,
    ) -> *mut wchar_t;
}
extern "C" {
    pub fn _wcsdup(_String: *const wchar_t) -> *mut wchar_t;
}
extern "C" {
    pub fn wcscat(_Destination: *mut wchar_t, _Source: *const wchar_t) -> *mut wchar_t;
}
extern "C" {
    pub fn wcscmp(
        _String1: *const ::std::os::raw::c_ushort,
        _String2: *const ::std::os::raw::c_ushort,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn wcscpy(_Destination: *mut wchar_t, _Source: *const wchar_t) -> *mut wchar_t;
}
extern "C" {
    pub fn wcscspn(_String: *const wchar_t, _Control: *const wchar_t) -> size_t;
}
extern "C" {
    pub fn wcslen(_String: *const ::std::os::raw::c_ushort) -> ::std::os::raw::c_ulonglong;
}
extern "C" {
    pub fn wcsnlen(_Source: *const wchar_t, _MaxCount: size_t) -> size_t;
}
extern "C" {
    pub fn wcsncat(
        _Destination: *mut wchar_t,
        _Source: *const wchar_t,
        _Count: size_t,
    ) -> *mut wchar_t;
}
extern "C" {
    pub fn wcsncmp(
        _String1: *const ::std::os::raw::c_ushort,
        _String2: *const ::std::os::raw::c_ushort,
        _MaxCount: ::std::os::raw::c_ulonglong,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn wcsncpy(
        _Destination: *mut wchar_t,
        _Source: *const wchar_t,
        _Count: size_t,
    ) -> *mut wchar_t;
}
extern "C" {
    pub fn wcspbrk(_String: *const wchar_t, _Control: *const wchar_t) -> *mut wchar_t;
}
extern "C" {
    pub fn wcsspn(_String: *const wchar_t, _Control: *const wchar_t) -> size_t;
}
extern "C" {
    pub fn wcstok(
        _String: *mut wchar_t,
        _Delimiter: *const wchar_t,
        _Context: *mut *mut wchar_t,
    ) -> *mut wchar_t;
}
extern "C" {
    pub fn _wcserror(_ErrorNumber: ::std::os::raw::c_int) -> *mut wchar_t;
}
extern "C" {
    pub fn _wcserror_s(
        _Buffer: *mut wchar_t,
        _SizeInWords: size_t,
        _ErrorNumber: ::std::os::raw::c_int,
    ) -> errno_t;
}
extern "C" {
    pub fn __wcserror(_String: *const wchar_t) -> *mut wchar_t;
}
extern "C" {
    pub fn __wcserror_s(
        _Buffer: *mut wchar_t,
        _SizeInWords: size_t,
        _ErrorMessage: *const wchar_t,
    ) -> errno_t;
}
extern "C" {
    pub fn _wcsicmp(_String1: *const wchar_t, _String2: *const wchar_t) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn _wcsicmp_l(
        _String1: *const wchar_t,
        _String2: *const wchar_t,
        _Locale: _locale_t,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn _wcsnicmp(
        _String1: *const wchar_t,
        _String2: *const wchar_t,
        _MaxCount: size_t,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn _wcsnicmp_l(
        _String1: *const wchar_t,
        _String2: *const wchar_t,
        _MaxCount: size_t,
        _Locale: _locale_t,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn _wcsnset_s(
        _Destination: *mut wchar_t,
        _SizeInWords: size_t,
        _Value: wchar_t,
        _MaxCount: size_t,
    ) -> errno_t;
}
extern "C" {
    pub fn _wcsnset(_String: *mut wchar_t, _Value: wchar_t, _MaxCount: size_t) -> *mut wchar_t;
}
extern "C" {
    pub fn _wcsrev(_String: *mut wchar_t) -> *mut wchar_t;
}
extern "C" {
    pub fn _wcsset_s(_Destination: *mut wchar_t, _SizeInWords: size_t, _Value: wchar_t) -> errno_t;
}
extern "C" {
    pub fn _wcsset(_String: *mut wchar_t, _Value: wchar_t) -> *mut wchar_t;
}
extern "C" {
    pub fn _wcslwr_s(_String: *mut wchar_t, _SizeInWords: size_t) -> errno_t;
}
extern "C" {
    pub fn _wcslwr(_String: *mut wchar_t) -> *mut wchar_t;
}
extern "C" {
    pub fn _wcslwr_s_l(_String: *mut wchar_t, _SizeInWords: size_t, _Locale: _locale_t) -> errno_t;
}
extern "C" {
    pub fn _wcslwr_l(_String: *mut wchar_t, _Locale: _locale_t) -> *mut wchar_t;
}
extern "C" {
    pub fn _wcsupr_s(_String: *mut wchar_t, _Size: size_t) -> errno_t;
}
extern "C" {
    pub fn _wcsupr(_String: *mut wchar_t) -> *mut wchar_t;
}
extern "C" {
    pub fn _wcsupr_s_l(_String: *mut wchar_t, _Size: size_t, _Locale: _locale_t) -> errno_t;
}
extern "C" {
    pub fn _wcsupr_l(_String: *mut wchar_t, _Locale: _locale_t) -> *mut wchar_t;
}
extern "C" {
    pub fn wcsxfrm(
        _Destination: *mut wchar_t,
        _Source: *const wchar_t,
        _MaxCount: size_t,
    ) -> size_t;
}
extern "C" {
    pub fn _wcsxfrm_l(
        _Destination: *mut wchar_t,
        _Source: *const wchar_t,
        _MaxCount: size_t,
        _Locale: _locale_t,
    ) -> size_t;
}
extern "C" {
    pub fn wcscoll(_String1: *const wchar_t, _String2: *const wchar_t) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn _wcscoll_l(
        _String1: *const wchar_t,
        _String2: *const wchar_t,
        _Locale: _locale_t,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn _wcsicoll(_String1: *const wchar_t, _String2: *const wchar_t) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn _wcsicoll_l(
        _String1: *const wchar_t,
        _String2: *const wchar_t,
        _Locale: _locale_t,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn _wcsncoll(
        _String1: *const wchar_t,
        _String2: *const wchar_t,
        _MaxCount: size_t,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn _wcsncoll_l(
        _String1: *const wchar_t,
        _String2: *const wchar_t,
        _MaxCount: size_t,
        _Locale: _locale_t,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn _wcsnicoll(
        _String1: *const wchar_t,
        _String2: *const wchar_t,
        _MaxCount: size_t,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn _wcsnicoll_l(
        _String1: *const wchar_t,
        _String2: *const wchar_t,
        _MaxCount: size_t,
        _Locale: _locale_t,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn wcsdup(_String: *const wchar_t) -> *mut wchar_t;
}
extern "C" {
    pub fn wcsicmp(_String1: *const wchar_t, _String2: *const wchar_t) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn wcsnicmp(
        _String1: *const wchar_t,
        _String2: *const wchar_t,
        _MaxCount: size_t,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn wcsnset(_String: *mut wchar_t, _Value: wchar_t, _MaxCount: size_t) -> *mut wchar_t;
}
extern "C" {
    pub fn wcsrev(_String: *mut wchar_t) -> *mut wchar_t;
}
extern "C" {
    pub fn wcsset(_String: *mut wchar_t, _Value: wchar_t) -> *mut wchar_t;
}
extern "C" {
    pub fn wcslwr(_String: *mut wchar_t) -> *mut wchar_t;
}
extern "C" {
    pub fn wcsupr(_String: *mut wchar_t) -> *mut wchar_t;
}
extern "C" {
    pub fn wcsicoll(_String1: *const wchar_t, _String2: *const wchar_t) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn strcpy_s(
        _Destination: *mut ::std::os::raw::c_char,
        _SizeInBytes: rsize_t,
        _Source: *const ::std::os::raw::c_char,
    ) -> errno_t;
}
extern "C" {
    pub fn strcat_s(
        _Destination: *mut ::std::os::raw::c_char,
        _SizeInBytes: rsize_t,
        _Source: *const ::std::os::raw::c_char,
    ) -> errno_t;
}
extern "C" {
    pub fn strerror_s(
        _Buffer: *mut ::std::os::raw::c_char,
        _SizeInBytes: size_t,
        _ErrorNumber: ::std::os::raw::c_int,
    ) -> errno_t;
}
extern "C" {
    pub fn strncat_s(
        _Destination: *mut ::std::os::raw::c_char,
        _SizeInBytes: rsize_t,
        _Source: *const ::std::os::raw::c_char,
        _MaxCount: rsize_t,
    ) -> errno_t;
}
extern "C" {
    pub fn strncpy_s(
        _Destination: *mut ::std::os::raw::c_char,
        _SizeInBytes: rsize_t,
        _Source: *const ::std::os::raw::c_char,
        _MaxCount: rsize_t,
    ) -> errno_t;
}
extern "C" {
    pub fn strtok_s(
        _String: *mut ::std::os::raw::c_char,
        _Delimiter: *const ::std::os::raw::c_char,
        _Context: *mut *mut ::std::os::raw::c_char,
    ) -> *mut ::std::os::raw::c_char;
}
extern "C" {
    pub fn _memccpy(
        _Dst: *mut ::std::os::raw::c_void,
        _Src: *const ::std::os::raw::c_void,
        _Val: ::std::os::raw::c_int,
        _MaxCount: size_t,
    ) -> *mut ::std::os::raw::c_void;
}
extern "C" {
    pub fn strcat(
        _Destination: *mut ::std::os::raw::c_char,
        _Source: *const ::std::os::raw::c_char,
    ) -> *mut ::std::os::raw::c_char;
}
extern "C" {
    pub fn strcmp(
        _Str1: *const ::std::os::raw::c_char,
        _Str2: *const ::std::os::raw::c_char,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn _strcmpi(
        _String1: *const ::std::os::raw::c_char,
        _String2: *const ::std::os::raw::c_char,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn strcoll(
        _String1: *const ::std::os::raw::c_char,
        _String2: *const ::std::os::raw::c_char,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn _strcoll_l(
        _String1: *const ::std::os::raw::c_char,
        _String2: *const ::std::os::raw::c_char,
        _Locale: _locale_t,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn strcpy(
        _Destination: *mut ::std::os::raw::c_char,
        _Source: *const ::std::os::raw::c_char,
    ) -> *mut ::std::os::raw::c_char;
}
extern "C" {
    pub fn strcspn(
        _Str: *const ::std::os::raw::c_char,
        _Control: *const ::std::os::raw::c_char,
    ) -> ::std::os::raw::c_ulonglong;
}
extern "C" {
    pub fn _strdup(_Source: *const ::std::os::raw::c_char) -> *mut ::std::os::raw::c_char;
}
extern "C" {
    pub fn _strerror(_ErrorMessage: *const ::std::os::raw::c_char) -> *mut ::std::os::raw::c_char;
}
extern "C" {
    pub fn _strerror_s(
        _Buffer: *mut ::std::os::raw::c_char,
        _SizeInBytes: size_t,
        _ErrorMessage: *const ::std::os::raw::c_char,
    ) -> errno_t;
}
extern "C" {
    pub fn strerror(_ErrorMessage: ::std::os::raw::c_int) -> *mut ::std::os::raw::c_char;
}
extern "C" {
    pub fn _stricmp(
        _String1: *const ::std::os::raw::c_char,
        _String2: *const ::std::os::raw::c_char,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn _stricoll(
        _String1: *const ::std::os::raw::c_char,
        _String2: *const ::std::os::raw::c_char,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn _stricoll_l(
        _String1: *const ::std::os::raw::c_char,
        _String2: *const ::std::os::raw::c_char,
        _Locale: _locale_t,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn _stricmp_l(
        _String1: *const ::std::os::raw::c_char,
        _String2: *const ::std::os::raw::c_char,
        _Locale: _locale_t,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn strlen(_Str: *const ::std::os::raw::c_char) -> ::std::os::raw::c_ulonglong;
}
extern "C" {
    pub fn _strlwr_s(_String: *mut ::std::os::raw::c_char, _Size: size_t) -> errno_t;
}
extern "C" {
    pub fn _strlwr(_String: *mut ::std::os::raw::c_char) -> *mut ::std::os::raw::c_char;
}
extern "C" {
    pub fn _strlwr_s_l(
        _String: *mut ::std::os::raw::c_char,
        _Size: size_t,
        _Locale: _locale_t,
    ) -> errno_t;
}
extern "C" {
    pub fn _strlwr_l(
        _String: *mut ::std::os::raw::c_char,
        _Locale: _locale_t,
    ) -> *mut ::std::os::raw::c_char;
}
extern "C" {
    pub fn strncat(
        _Destination: *mut ::std::os::raw::c_char,
        _Source: *const ::std::os::raw::c_char,
        _Count: ::std::os::raw::c_ulonglong,
    ) -> *mut ::std::os::raw::c_char;
}
extern "C" {
    pub fn strncmp(
        _Str1: *const ::std::os::raw::c_char,
        _Str2: *const ::std::os::raw::c_char,
        _MaxCount: ::std::os::raw::c_ulonglong,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn _strnicmp(
        _String1: *const ::std::os::raw::c_char,
        _String2: *const ::std::os::raw::c_char,
        _MaxCount: size_t,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn _strnicmp_l(
        _String1: *const ::std::os::raw::c_char,
        _String2: *const ::std::os::raw::c_char,
        _MaxCount: size_t,
        _Locale: _locale_t,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn _strnicoll(
        _String1: *const ::std::os::raw::c_char,
        _String2: *const ::std::os::raw::c_char,
        _MaxCount: size_t,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn _strnicoll_l(
        _String1: *const ::std::os::raw::c_char,
        _String2: *const ::std::os::raw::c_char,
        _MaxCount: size_t,
        _Locale: _locale_t,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn _strncoll(
        _String1: *const ::std::os::raw::c_char,
        _String2: *const ::std::os::raw::c_char,
        _MaxCount: size_t,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn _strncoll_l(
        _String1: *const ::std::os::raw::c_char,
        _String2: *const ::std::os::raw::c_char,
        _MaxCount: size_t,
        _Locale: _locale_t,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn __strncnt(_String: *const ::std::os::raw::c_char, _Count: size_t) -> size_t;
}
extern "C" {
    pub fn strncpy(
        _Destination: *mut ::std::os::raw::c_char,
        _Source: *const ::std::os::raw::c_char,
        _Count: ::std::os::raw::c_ulonglong,
    ) -> *mut ::std::os::raw::c_char;
}
extern "C" {
    pub fn strnlen(_String: *const ::std::os::raw::c_char, _MaxCount: size_t) -> size_t;
}
extern "C" {
    pub fn _strnset_s(
        _String: *mut ::std::os::raw::c_char,
        _SizeInBytes: size_t,
        _Value: ::std::os::raw::c_int,
        _MaxCount: size_t,
    ) -> errno_t;
}
extern "C" {
    pub fn _strnset(
        _Destination: *mut ::std::os::raw::c_char,
        _Value: ::std::os::raw::c_int,
        _Count: size_t,
    ) -> *mut ::std::os::raw::c_char;
}
extern "C" {
    pub fn strpbrk(
        _Str: *const ::std::os::raw::c_char,
        _Control: *const ::std::os::raw::c_char,
    ) -> *mut ::std::os::raw::c_char;
}
extern "C" {
    pub fn _strrev(_Str: *mut ::std::os::raw::c_char) -> *mut ::std::os::raw::c_char;
}
extern "C" {
    pub fn _strset_s(
        _Destination: *mut ::std::os::raw::c_char,
        _DestinationSize: size_t,
        _Value: ::std::os::raw::c_int,
    ) -> errno_t;
}
extern "C" {
    pub fn _strset(
        _Destination: *mut ::std::os::raw::c_char,
        _Value: ::std::os::raw::c_int,
    ) -> *mut ::std::os::raw::c_char;
}
extern "C" {
    pub fn strspn(
        _Str: *const ::std::os::raw::c_char,
        _Control: *const ::std::os::raw::c_char,
    ) -> ::std::os::raw::c_ulonglong;
}
extern "C" {
    pub fn strtok(
        _String: *mut ::std::os::raw::c_char,
        _Delimiter: *const ::std::os::raw::c_char,
    ) -> *mut ::std::os::raw::c_char;
}
extern "C" {
    pub fn _strupr_s(_String: *mut ::std::os::raw::c_char, _Size: size_t) -> errno_t;
}
extern "C" {
    pub fn _strupr(_String: *mut ::std::os::raw::c_char) -> *mut ::std::os::raw::c_char;
}
extern "C" {
    pub fn _strupr_s_l(
        _String: *mut ::std::os::raw::c_char,
        _Size: size_t,
        _Locale: _locale_t,
    ) -> errno_t;
}
extern "C" {
    pub fn _strupr_l(
        _String: *mut ::std::os::raw::c_char,
        _Locale: _locale_t,
    ) -> *mut ::std::os::raw::c_char;
}
extern "C" {
    pub fn strxfrm(
        _Destination: *mut ::std::os::raw::c_char,
        _Source: *const ::std::os::raw::c_char,
        _MaxCount: ::std::os::raw::c_ulonglong,
    ) -> ::std::os::raw::c_ulonglong;
}
extern "C" {
    pub fn _strxfrm_l(
        _Destination: *mut ::std::os::raw::c_char,
        _Source: *const ::std::os::raw::c_char,
        _MaxCount: size_t,
        _Locale: _locale_t,
    ) -> size_t;
}
extern "C" {
    pub fn strdup(_String: *const ::std::os::raw::c_char) -> *mut ::std::os::raw::c_char;
}
extern "C" {
    pub fn strcmpi(
        _String1: *const ::std::os::raw::c_char,
        _String2: *const ::std::os::raw::c_char,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn stricmp(
        _String1: *const ::std::os::raw::c_char,
        _String2: *const ::std::os::raw::c_char,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn strlwr(_String: *mut ::std::os::raw::c_char) -> *mut ::std::os::raw::c_char;
}
extern "C" {
    pub fn strnicmp(
        _String1: *const ::std::os::raw::c_char,
        _String2: *const ::std::os::raw::c_char,
        _MaxCount: size_t,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn strnset(
        _String: *mut ::std::os::raw::c_char,
        _Value: ::std::os::raw::c_int,
        _MaxCount: size_t,
    ) -> *mut ::std::os::raw::c_char;
}
extern "C" {
    pub fn strrev(_String: *mut ::std::os::raw::c_char) -> *mut ::std::os::raw::c_char;
}
extern "C" {
    pub fn strset(
        _String: *mut ::std::os::raw::c_char,
        _Value: ::std::os::raw::c_int,
    ) -> *mut ::std::os::raw::c_char;
}
extern "C" {
    pub fn strupr(_String: *mut ::std::os::raw::c_char) -> *mut ::std::os::raw::c_char;
}
pub type int_least8_t = ::std::os::raw::c_schar;
pub type int_least16_t = ::std::os::raw::c_short;
pub type int_least32_t = ::std::os::raw::c_int;
pub type int_least64_t = ::std::os::raw::c_longlong;
pub type uint_least8_t = ::std::os::raw::c_uchar;
pub type uint_least16_t = ::std::os::raw::c_ushort;
pub type uint_least32_t = ::std::os::raw::c_uint;
pub type uint_least64_t = ::std::os::raw::c_ulonglong;
pub type int_fast8_t = ::std::os::raw::c_schar;
pub type int_fast16_t = ::std::os::raw::c_int;
pub type int_fast32_t = ::std::os::raw::c_int;
pub type int_fast64_t = ::std::os::raw::c_longlong;
pub type uint_fast8_t = ::std::os::raw::c_uchar;
pub type uint_fast16_t = ::std::os::raw::c_uint;
pub type uint_fast32_t = ::std::os::raw::c_uint;
pub type uint_fast64_t = ::std::os::raw::c_ulonglong;
pub type intmax_t = ::std::os::raw::c_longlong;
pub type uintmax_t = ::std::os::raw::c_ulonglong;
extern "C" {
    pub fn _wassert(_Message: *const wchar_t, _File: *const wchar_t, _Line: ::std::os::raw::c_uint);
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct tm {
    pub tm_sec: ::std::os::raw::c_int,
    pub tm_min: ::std::os::raw::c_int,
    pub tm_hour: ::std::os::raw::c_int,
    pub tm_mday: ::std::os::raw::c_int,
    pub tm_mon: ::std::os::raw::c_int,
    pub tm_year: ::std::os::raw::c_int,
    pub tm_wday: ::std::os::raw::c_int,
    pub tm_yday: ::std::os::raw::c_int,
    pub tm_isdst: ::std::os::raw::c_int,
}
#[test]
fn bindgen_test_layout_tm() {
    assert_eq!(
        ::std::mem::size_of::<tm>(),
        36usize,
        concat!("Size of: ", stringify!(tm))
    );
    assert_eq!(
        ::std::mem::align_of::<tm>(),
        4usize,
        concat!("Alignment of ", stringify!(tm))
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<tm>())).tm_sec as *const _ as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(tm),
            "::",
            stringify!(tm_sec)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<tm>())).tm_min as *const _ as usize },
        4usize,
        concat!(
            "Offset of field: ",
            stringify!(tm),
            "::",
            stringify!(tm_min)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<tm>())).tm_hour as *const _ as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(tm),
            "::",
            stringify!(tm_hour)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<tm>())).tm_mday as *const _ as usize },
        12usize,
        concat!(
            "Offset of field: ",
            stringify!(tm),
            "::",
            stringify!(tm_mday)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<tm>())).tm_mon as *const _ as usize },
        16usize,
        concat!(
            "Offset of field: ",
            stringify!(tm),
            "::",
            stringify!(tm_mon)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<tm>())).tm_year as *const _ as usize },
        20usize,
        concat!(
            "Offset of field: ",
            stringify!(tm),
            "::",
            stringify!(tm_year)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<tm>())).tm_wday as *const _ as usize },
        24usize,
        concat!(
            "Offset of field: ",
            stringify!(tm),
            "::",
            stringify!(tm_wday)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<tm>())).tm_yday as *const _ as usize },
        28usize,
        concat!(
            "Offset of field: ",
            stringify!(tm),
            "::",
            stringify!(tm_yday)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<tm>())).tm_isdst as *const _ as usize },
        32usize,
        concat!(
            "Offset of field: ",
            stringify!(tm),
            "::",
            stringify!(tm_isdst)
        )
    );
}
extern "C" {
    pub fn _wasctime(_Tm: *const tm) -> *mut wchar_t;
}
extern "C" {
    pub fn _wasctime_s(_Buffer: *mut wchar_t, _SizeInWords: size_t, _Tm: *const tm) -> errno_t;
}
extern "C" {
    pub fn wcsftime(
        _Buffer: *mut wchar_t,
        _SizeInWords: size_t,
        _Format: *const wchar_t,
        _Tm: *const tm,
    ) -> size_t;
}
extern "C" {
    pub fn _wcsftime_l(
        _Buffer: *mut wchar_t,
        _SizeInWords: size_t,
        _Format: *const wchar_t,
        _Tm: *const tm,
        _Locale: _locale_t,
    ) -> size_t;
}
extern "C" {
    pub fn _wctime32(_Time: *const __time32_t) -> *mut wchar_t;
}
extern "C" {
    pub fn _wctime32_s(
        _Buffer: *mut wchar_t,
        _SizeInWords: size_t,
        _Time: *const __time32_t,
    ) -> errno_t;
}
extern "C" {
    pub fn _wctime64(_Time: *const __time64_t) -> *mut wchar_t;
}
extern "C" {
    pub fn _wctime64_s(
        _Buffer: *mut wchar_t,
        _SizeInWords: size_t,
        _Time: *const __time64_t,
    ) -> errno_t;
}
extern "C" {
    pub fn _wstrdate_s(_Buffer: *mut wchar_t, _SizeInWords: size_t) -> errno_t;
}
extern "C" {
    pub fn _wstrdate(_Buffer: *mut wchar_t) -> *mut wchar_t;
}
extern "C" {
    pub fn _wstrtime_s(_Buffer: *mut wchar_t, _SizeInWords: size_t) -> errno_t;
}
extern "C" {
    pub fn _wstrtime(_Buffer: *mut wchar_t) -> *mut wchar_t;
}
pub type clock_t = ::std::os::raw::c_long;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct _timespec32 {
    pub tv_sec: __time32_t,
    pub tv_nsec: ::std::os::raw::c_long,
}
#[test]
fn bindgen_test_layout__timespec32() {
    assert_eq!(
        ::std::mem::size_of::<_timespec32>(),
        8usize,
        concat!("Size of: ", stringify!(_timespec32))
    );
    assert_eq!(
        ::std::mem::align_of::<_timespec32>(),
        4usize,
        concat!("Alignment of ", stringify!(_timespec32))
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<_timespec32>())).tv_sec as *const _ as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(_timespec32),
            "::",
            stringify!(tv_sec)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<_timespec32>())).tv_nsec as *const _ as usize },
        4usize,
        concat!(
            "Offset of field: ",
            stringify!(_timespec32),
            "::",
            stringify!(tv_nsec)
        )
    );
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct _timespec64 {
    pub tv_sec: __time64_t,
    pub tv_nsec: ::std::os::raw::c_long,
}
#[test]
fn bindgen_test_layout__timespec64() {
    assert_eq!(
        ::std::mem::size_of::<_timespec64>(),
        16usize,
        concat!("Size of: ", stringify!(_timespec64))
    );
    assert_eq!(
        ::std::mem::align_of::<_timespec64>(),
        8usize,
        concat!("Alignment of ", stringify!(_timespec64))
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<_timespec64>())).tv_sec as *const _ as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(_timespec64),
            "::",
            stringify!(tv_sec)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<_timespec64>())).tv_nsec as *const _ as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(_timespec64),
            "::",
            stringify!(tv_nsec)
        )
    );
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct timespec {
    pub tv_sec: time_t,
    pub tv_nsec: ::std::os::raw::c_long,
}
#[test]
fn bindgen_test_layout_timespec() {
    assert_eq!(
        ::std::mem::size_of::<timespec>(),
        16usize,
        concat!("Size of: ", stringify!(timespec))
    );
    assert_eq!(
        ::std::mem::align_of::<timespec>(),
        8usize,
        concat!("Alignment of ", stringify!(timespec))
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<timespec>())).tv_sec as *const _ as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(timespec),
            "::",
            stringify!(tv_sec)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<timespec>())).tv_nsec as *const _ as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(timespec),
            "::",
            stringify!(tv_nsec)
        )
    );
}
extern "C" {
    pub fn __daylight() -> *mut ::std::os::raw::c_int;
}
extern "C" {
    pub fn __dstbias() -> *mut ::std::os::raw::c_long;
}
extern "C" {
    pub fn __timezone() -> *mut ::std::os::raw::c_long;
}
extern "C" {
    pub fn __tzname() -> *mut *mut ::std::os::raw::c_char;
}
extern "C" {
    pub fn _get_daylight(_Daylight: *mut ::std::os::raw::c_int) -> errno_t;
}
extern "C" {
    pub fn _get_dstbias(_DaylightSavingsBias: *mut ::std::os::raw::c_long) -> errno_t;
}
extern "C" {
    pub fn _get_timezone(_TimeZone: *mut ::std::os::raw::c_long) -> errno_t;
}
extern "C" {
    pub fn _get_tzname(
        _ReturnValue: *mut size_t,
        _Buffer: *mut ::std::os::raw::c_char,
        _SizeInBytes: size_t,
        _Index: ::std::os::raw::c_int,
    ) -> errno_t;
}
extern "C" {
    pub fn asctime(_Tm: *const tm) -> *mut ::std::os::raw::c_char;
}
extern "C" {
    pub fn asctime_s(
        _Buffer: *mut ::std::os::raw::c_char,
        _SizeInBytes: size_t,
        _Tm: *const tm,
    ) -> errno_t;
}
extern "C" {
    pub fn clock() -> clock_t;
}
extern "C" {
    pub fn _ctime32(_Time: *const __time32_t) -> *mut ::std::os::raw::c_char;
}
extern "C" {
    pub fn _ctime32_s(
        _Buffer: *mut ::std::os::raw::c_char,
        _SizeInBytes: size_t,
        _Time: *const __time32_t,
    ) -> errno_t;
}
extern "C" {
    pub fn _ctime64(_Time: *const __time64_t) -> *mut ::std::os::raw::c_char;
}
extern "C" {
    pub fn _ctime64_s(
        _Buffer: *mut ::std::os::raw::c_char,
        _SizeInBytes: size_t,
        _Time: *const __time64_t,
    ) -> errno_t;
}
extern "C" {
    pub fn _difftime32(_Time1: __time32_t, _Time2: __time32_t) -> f64;
}
extern "C" {
    pub fn _difftime64(_Time1: __time64_t, _Time2: __time64_t) -> f64;
}
extern "C" {
    pub fn _gmtime32(_Time: *const __time32_t) -> *mut tm;
}
extern "C" {
    pub fn _gmtime32_s(_Tm: *mut tm, _Time: *const __time32_t) -> errno_t;
}
extern "C" {
    pub fn _gmtime64(_Time: *const __time64_t) -> *mut tm;
}
extern "C" {
    pub fn _gmtime64_s(_Tm: *mut tm, _Time: *const __time64_t) -> errno_t;
}
extern "C" {
    pub fn _localtime32(_Time: *const __time32_t) -> *mut tm;
}
extern "C" {
    pub fn _localtime32_s(_Tm: *mut tm, _Time: *const __time32_t) -> errno_t;
}
extern "C" {
    pub fn _localtime64(_Time: *const __time64_t) -> *mut tm;
}
extern "C" {
    pub fn _localtime64_s(_Tm: *mut tm, _Time: *const __time64_t) -> errno_t;
}
extern "C" {
    pub fn _mkgmtime32(_Tm: *mut tm) -> __time32_t;
}
extern "C" {
    pub fn _mkgmtime64(_Tm: *mut tm) -> __time64_t;
}
extern "C" {
    pub fn _mktime32(_Tm: *mut tm) -> __time32_t;
}
extern "C" {
    pub fn _mktime64(_Tm: *mut tm) -> __time64_t;
}
extern "C" {
    pub fn strftime(
        _Buffer: *mut ::std::os::raw::c_char,
        _SizeInBytes: size_t,
        _Format: *const ::std::os::raw::c_char,
        _Tm: *const tm,
    ) -> size_t;
}
extern "C" {
    pub fn _strftime_l(
        _Buffer: *mut ::std::os::raw::c_char,
        _MaxSize: size_t,
        _Format: *const ::std::os::raw::c_char,
        _Tm: *const tm,
        _Locale: _locale_t,
    ) -> size_t;
}
extern "C" {
    pub fn _strdate_s(_Buffer: *mut ::std::os::raw::c_char, _SizeInBytes: size_t) -> errno_t;
}
extern "C" {
    pub fn _strdate(_Buffer: *mut ::std::os::raw::c_char) -> *mut ::std::os::raw::c_char;
}
extern "C" {
    pub fn _strtime_s(_Buffer: *mut ::std::os::raw::c_char, _SizeInBytes: size_t) -> errno_t;
}
extern "C" {
    pub fn _strtime(_Buffer: *mut ::std::os::raw::c_char) -> *mut ::std::os::raw::c_char;
}
extern "C" {
    pub fn _time32(_Time: *mut __time32_t) -> __time32_t;
}
extern "C" {
    pub fn _time64(_Time: *mut __time64_t) -> __time64_t;
}
extern "C" {
    pub fn _timespec32_get(
        _Ts: *mut _timespec32,
        _Base: ::std::os::raw::c_int,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn _timespec64_get(
        _Ts: *mut _timespec64,
        _Base: ::std::os::raw::c_int,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn _tzset();
}
extern "C" {
    pub fn _getsystime(_Tm: *mut tm) -> ::std::os::raw::c_uint;
}
extern "C" {
    pub fn _setsystime(
        _Tm: *mut tm,
        _Milliseconds: ::std::os::raw::c_uint,
    ) -> ::std::os::raw::c_uint;
}
extern "C" {
    pub fn tzset();
}
pub const PTW32_FALSE: ::std::os::raw::c_int = 0;
pub const PTW32_TRUE: ::std::os::raw::c_int = 1;
pub type _bindgen_ty_1 = ::std::os::raw::c_int;
pub type pid_t = ::std::os::raw::c_int;
pub const SCHED_OTHER: ::std::os::raw::c_int = 0;
pub const SCHED_FIFO: ::std::os::raw::c_int = 1;
pub const SCHED_RR: ::std::os::raw::c_int = 2;
pub const SCHED_MIN: ::std::os::raw::c_int = 0;
pub const SCHED_MAX: ::std::os::raw::c_int = 2;
pub type _bindgen_ty_2 = ::std::os::raw::c_int;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct sched_param {
    pub sched_priority: ::std::os::raw::c_int,
}
#[test]
fn bindgen_test_layout_sched_param() {
    assert_eq!(
        ::std::mem::size_of::<sched_param>(),
        4usize,
        concat!("Size of: ", stringify!(sched_param))
    );
    assert_eq!(
        ::std::mem::align_of::<sched_param>(),
        4usize,
        concat!("Alignment of ", stringify!(sched_param))
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<sched_param>())).sched_priority as *const _ as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(sched_param),
            "::",
            stringify!(sched_priority)
        )
    );
}
extern "C" {
    pub fn sched_yield() -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn sched_get_priority_min(policy: ::std::os::raw::c_int) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn sched_get_priority_max(policy: ::std::os::raw::c_int) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn sched_setscheduler(pid: pid_t, policy: ::std::os::raw::c_int) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn sched_getscheduler(pid: pid_t) -> ::std::os::raw::c_int;
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct ptw32_handle_t {
    pub p: *mut ::std::os::raw::c_void,
    pub x: ::std::os::raw::c_uint,
}
#[test]
fn bindgen_test_layout_ptw32_handle_t() {
    assert_eq!(
        ::std::mem::size_of::<ptw32_handle_t>(),
        16usize,
        concat!("Size of: ", stringify!(ptw32_handle_t))
    );
    assert_eq!(
        ::std::mem::align_of::<ptw32_handle_t>(),
        8usize,
        concat!("Alignment of ", stringify!(ptw32_handle_t))
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<ptw32_handle_t>())).p as *const _ as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(ptw32_handle_t),
            "::",
            stringify!(p)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<ptw32_handle_t>())).x as *const _ as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(ptw32_handle_t),
            "::",
            stringify!(x)
        )
    );
}
pub type pthread_t = ptw32_handle_t;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct pthread_attr_t_ {
    _unused: [u8; 0],
}
pub type pthread_attr_t = *mut pthread_attr_t_;
pub type pthread_once_t = pthread_once_t_;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct pthread_key_t_ {
    _unused: [u8; 0],
}
pub type pthread_key_t = *mut pthread_key_t_;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct pthread_mutex_t_ {
    _unused: [u8; 0],
}
pub type pthread_mutex_t = *mut pthread_mutex_t_;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct pthread_mutexattr_t_ {
    _unused: [u8; 0],
}
pub type pthread_mutexattr_t = *mut pthread_mutexattr_t_;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct pthread_cond_t_ {
    _unused: [u8; 0],
}
pub type pthread_cond_t = *mut pthread_cond_t_;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct pthread_condattr_t_ {
    _unused: [u8; 0],
}
pub type pthread_condattr_t = *mut pthread_condattr_t_;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct pthread_rwlock_t_ {
    _unused: [u8; 0],
}
pub type pthread_rwlock_t = *mut pthread_rwlock_t_;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct pthread_rwlockattr_t_ {
    _unused: [u8; 0],
}
pub type pthread_rwlockattr_t = *mut pthread_rwlockattr_t_;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct pthread_spinlock_t_ {
    _unused: [u8; 0],
}
pub type pthread_spinlock_t = *mut pthread_spinlock_t_;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct pthread_barrier_t_ {
    _unused: [u8; 0],
}
pub type pthread_barrier_t = *mut pthread_barrier_t_;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct pthread_barrierattr_t_ {
    _unused: [u8; 0],
}
pub type pthread_barrierattr_t = *mut pthread_barrierattr_t_;
pub const PTHREAD_CREATE_JOINABLE: ::std::os::raw::c_int = 0;
pub const PTHREAD_CREATE_DETACHED: ::std::os::raw::c_int = 1;
pub const PTHREAD_INHERIT_SCHED: ::std::os::raw::c_int = 0;
pub const PTHREAD_EXPLICIT_SCHED: ::std::os::raw::c_int = 1;
pub const PTHREAD_SCOPE_PROCESS: ::std::os::raw::c_int = 0;
pub const PTHREAD_SCOPE_SYSTEM: ::std::os::raw::c_int = 1;
pub const PTHREAD_CANCEL_ENABLE: ::std::os::raw::c_int = 0;
pub const PTHREAD_CANCEL_DISABLE: ::std::os::raw::c_int = 1;
pub const PTHREAD_CANCEL_ASYNCHRONOUS: ::std::os::raw::c_int = 0;
pub const PTHREAD_CANCEL_DEFERRED: ::std::os::raw::c_int = 1;
pub const PTHREAD_PROCESS_PRIVATE: ::std::os::raw::c_int = 0;
pub const PTHREAD_PROCESS_SHARED: ::std::os::raw::c_int = 1;
pub const PTHREAD_MUTEX_STALLED: ::std::os::raw::c_int = 0;
pub const PTHREAD_MUTEX_ROBUST: ::std::os::raw::c_int = 1;
pub const PTHREAD_BARRIER_SERIAL_THREAD: ::std::os::raw::c_int = -1;
pub type _bindgen_ty_3 = ::std::os::raw::c_int;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct pthread_once_t_ {
    pub done: ::std::os::raw::c_int,
    pub lock: *mut ::std::os::raw::c_void,
    pub reserved1: ::std::os::raw::c_int,
    pub reserved2: ::std::os::raw::c_int,
}
#[test]
fn bindgen_test_layout_pthread_once_t_() {
    assert_eq!(
        ::std::mem::size_of::<pthread_once_t_>(),
        24usize,
        concat!("Size of: ", stringify!(pthread_once_t_))
    );
    assert_eq!(
        ::std::mem::align_of::<pthread_once_t_>(),
        8usize,
        concat!("Alignment of ", stringify!(pthread_once_t_))
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<pthread_once_t_>())).done as *const _ as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(pthread_once_t_),
            "::",
            stringify!(done)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<pthread_once_t_>())).lock as *const _ as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(pthread_once_t_),
            "::",
            stringify!(lock)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<pthread_once_t_>())).reserved1 as *const _ as usize },
        16usize,
        concat!(
            "Offset of field: ",
            stringify!(pthread_once_t_),
            "::",
            stringify!(reserved1)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<pthread_once_t_>())).reserved2 as *const _ as usize },
        20usize,
        concat!(
            "Offset of field: ",
            stringify!(pthread_once_t_),
            "::",
            stringify!(reserved2)
        )
    );
}
pub const PTHREAD_MUTEX_FAST_NP: ::std::os::raw::c_int = 0;
pub const PTHREAD_MUTEX_RECURSIVE_NP: ::std::os::raw::c_int = 1;
pub const PTHREAD_MUTEX_ERRORCHECK_NP: ::std::os::raw::c_int = 2;
pub const PTHREAD_MUTEX_TIMED_NP: ::std::os::raw::c_int = 0;
pub const PTHREAD_MUTEX_ADAPTIVE_NP: ::std::os::raw::c_int = 0;
pub const PTHREAD_MUTEX_NORMAL: ::std::os::raw::c_int = 0;
pub const PTHREAD_MUTEX_RECURSIVE: ::std::os::raw::c_int = 1;
pub const PTHREAD_MUTEX_ERRORCHECK: ::std::os::raw::c_int = 2;
pub const PTHREAD_MUTEX_DEFAULT: ::std::os::raw::c_int = 0;
pub type _bindgen_ty_4 = ::std::os::raw::c_int;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct ptw32_cleanup_t {
    pub routine: ::std::option::Option<unsafe extern "C" fn(arg1: *mut ::std::os::raw::c_void)>,
    pub arg: *mut ::std::os::raw::c_void,
    pub prev: *mut ptw32_cleanup_t,
}
#[test]
fn bindgen_test_layout_ptw32_cleanup_t() {
    assert_eq!(
        ::std::mem::size_of::<ptw32_cleanup_t>(),
        24usize,
        concat!("Size of: ", stringify!(ptw32_cleanup_t))
    );
    assert_eq!(
        ::std::mem::align_of::<ptw32_cleanup_t>(),
        8usize,
        concat!("Alignment of ", stringify!(ptw32_cleanup_t))
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<ptw32_cleanup_t>())).routine as *const _ as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(ptw32_cleanup_t),
            "::",
            stringify!(routine)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<ptw32_cleanup_t>())).arg as *const _ as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(ptw32_cleanup_t),
            "::",
            stringify!(arg)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<ptw32_cleanup_t>())).prev as *const _ as usize },
        16usize,
        concat!(
            "Offset of field: ",
            stringify!(ptw32_cleanup_t),
            "::",
            stringify!(prev)
        )
    );
}
extern "C" {
    pub fn pthread_attr_init(attr: *mut pthread_attr_t) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn pthread_attr_destroy(attr: *mut pthread_attr_t) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn pthread_attr_getdetachstate(
        attr: *const pthread_attr_t,
        detachstate: *mut ::std::os::raw::c_int,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn pthread_attr_getstackaddr(
        attr: *const pthread_attr_t,
        stackaddr: *mut *mut ::std::os::raw::c_void,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn pthread_attr_getstacksize(
        attr: *const pthread_attr_t,
        stacksize: *mut size_t,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn pthread_attr_setdetachstate(
        attr: *mut pthread_attr_t,
        detachstate: ::std::os::raw::c_int,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn pthread_attr_setstackaddr(
        attr: *mut pthread_attr_t,
        stackaddr: *mut ::std::os::raw::c_void,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn pthread_attr_setstacksize(
        attr: *mut pthread_attr_t,
        stacksize: size_t,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn pthread_attr_getschedparam(
        attr: *const pthread_attr_t,
        param: *mut sched_param,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn pthread_attr_setschedparam(
        attr: *mut pthread_attr_t,
        param: *const sched_param,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn pthread_attr_setschedpolicy(
        arg1: *mut pthread_attr_t,
        arg2: ::std::os::raw::c_int,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn pthread_attr_getschedpolicy(
        arg1: *const pthread_attr_t,
        arg2: *mut ::std::os::raw::c_int,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn pthread_attr_setinheritsched(
        attr: *mut pthread_attr_t,
        inheritsched: ::std::os::raw::c_int,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn pthread_attr_getinheritsched(
        attr: *const pthread_attr_t,
        inheritsched: *mut ::std::os::raw::c_int,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn pthread_attr_setscope(
        arg1: *mut pthread_attr_t,
        arg2: ::std::os::raw::c_int,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn pthread_attr_getscope(
        arg1: *const pthread_attr_t,
        arg2: *mut ::std::os::raw::c_int,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn pthread_create(
        tid: *mut pthread_t,
        attr: *const pthread_attr_t,
        start: ::std::option::Option<
            unsafe extern "C" fn(arg1: *mut ::std::os::raw::c_void) -> *mut ::std::os::raw::c_void,
        >,
        arg: *mut ::std::os::raw::c_void,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn pthread_detach(tid: pthread_t) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn pthread_equal(t1: pthread_t, t2: pthread_t) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn pthread_exit(value_ptr: *mut ::std::os::raw::c_void);
}
extern "C" {
    pub fn pthread_join(
        thread: pthread_t,
        value_ptr: *mut *mut ::std::os::raw::c_void,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn pthread_self() -> pthread_t;
}
extern "C" {
    pub fn pthread_cancel(thread: pthread_t) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn pthread_setcancelstate(
        state: ::std::os::raw::c_int,
        oldstate: *mut ::std::os::raw::c_int,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn pthread_setcanceltype(
        type_: ::std::os::raw::c_int,
        oldtype: *mut ::std::os::raw::c_int,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn pthread_testcancel();
}
extern "C" {
    pub fn pthread_once(
        once_control: *mut pthread_once_t,
        init_routine: ::std::option::Option<unsafe extern "C" fn()>,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn ptw32_pop_cleanup(execute: ::std::os::raw::c_int) -> *mut ptw32_cleanup_t;
}
extern "C" {
    pub fn ptw32_push_cleanup(
        cleanup: *mut ptw32_cleanup_t,
        routine: ::std::option::Option<unsafe extern "C" fn(arg1: *mut ::std::os::raw::c_void)>,
        arg: *mut ::std::os::raw::c_void,
    );
}
extern "C" {
    pub fn pthread_key_create(
        key: *mut pthread_key_t,
        destructor: ::std::option::Option<unsafe extern "C" fn(arg1: *mut ::std::os::raw::c_void)>,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn pthread_key_delete(key: pthread_key_t) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn pthread_setspecific(
        key: pthread_key_t,
        value: *const ::std::os::raw::c_void,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn pthread_getspecific(key: pthread_key_t) -> *mut ::std::os::raw::c_void;
}
extern "C" {
    pub fn pthread_mutexattr_init(attr: *mut pthread_mutexattr_t) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn pthread_mutexattr_destroy(attr: *mut pthread_mutexattr_t) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn pthread_mutexattr_getpshared(
        attr: *const pthread_mutexattr_t,
        pshared: *mut ::std::os::raw::c_int,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn pthread_mutexattr_setpshared(
        attr: *mut pthread_mutexattr_t,
        pshared: ::std::os::raw::c_int,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn pthread_mutexattr_settype(
        attr: *mut pthread_mutexattr_t,
        kind: ::std::os::raw::c_int,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn pthread_mutexattr_gettype(
        attr: *const pthread_mutexattr_t,
        kind: *mut ::std::os::raw::c_int,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn pthread_mutexattr_setrobust(
        attr: *mut pthread_mutexattr_t,
        robust: ::std::os::raw::c_int,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn pthread_mutexattr_getrobust(
        attr: *const pthread_mutexattr_t,
        robust: *mut ::std::os::raw::c_int,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn pthread_barrierattr_init(attr: *mut pthread_barrierattr_t) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn pthread_barrierattr_destroy(attr: *mut pthread_barrierattr_t) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn pthread_barrierattr_getpshared(
        attr: *const pthread_barrierattr_t,
        pshared: *mut ::std::os::raw::c_int,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn pthread_barrierattr_setpshared(
        attr: *mut pthread_barrierattr_t,
        pshared: ::std::os::raw::c_int,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn pthread_mutex_init(
        mutex: *mut pthread_mutex_t,
        attr: *const pthread_mutexattr_t,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn pthread_mutex_destroy(mutex: *mut pthread_mutex_t) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn pthread_mutex_lock(mutex: *mut pthread_mutex_t) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn pthread_mutex_timedlock(
        mutex: *mut pthread_mutex_t,
        abstime: *const timespec,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn pthread_mutex_trylock(mutex: *mut pthread_mutex_t) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn pthread_mutex_unlock(mutex: *mut pthread_mutex_t) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn pthread_mutex_consistent(mutex: *mut pthread_mutex_t) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn pthread_spin_init(
        lock: *mut pthread_spinlock_t,
        pshared: ::std::os::raw::c_int,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn pthread_spin_destroy(lock: *mut pthread_spinlock_t) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn pthread_spin_lock(lock: *mut pthread_spinlock_t) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn pthread_spin_trylock(lock: *mut pthread_spinlock_t) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn pthread_spin_unlock(lock: *mut pthread_spinlock_t) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn pthread_barrier_init(
        barrier: *mut pthread_barrier_t,
        attr: *const pthread_barrierattr_t,
        count: ::std::os::raw::c_uint,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn pthread_barrier_destroy(barrier: *mut pthread_barrier_t) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn pthread_barrier_wait(barrier: *mut pthread_barrier_t) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn pthread_condattr_init(attr: *mut pthread_condattr_t) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn pthread_condattr_destroy(attr: *mut pthread_condattr_t) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn pthread_condattr_getpshared(
        attr: *const pthread_condattr_t,
        pshared: *mut ::std::os::raw::c_int,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn pthread_condattr_setpshared(
        attr: *mut pthread_condattr_t,
        pshared: ::std::os::raw::c_int,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn pthread_cond_init(
        cond: *mut pthread_cond_t,
        attr: *const pthread_condattr_t,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn pthread_cond_destroy(cond: *mut pthread_cond_t) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn pthread_cond_wait(
        cond: *mut pthread_cond_t,
        mutex: *mut pthread_mutex_t,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn pthread_cond_timedwait(
        cond: *mut pthread_cond_t,
        mutex: *mut pthread_mutex_t,
        abstime: *const timespec,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn pthread_cond_signal(cond: *mut pthread_cond_t) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn pthread_cond_broadcast(cond: *mut pthread_cond_t) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn pthread_setschedparam(
        thread: pthread_t,
        policy: ::std::os::raw::c_int,
        param: *const sched_param,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn pthread_getschedparam(
        thread: pthread_t,
        policy: *mut ::std::os::raw::c_int,
        param: *mut sched_param,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn pthread_setconcurrency(arg1: ::std::os::raw::c_int) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn pthread_getconcurrency() -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn pthread_rwlock_init(
        lock: *mut pthread_rwlock_t,
        attr: *const pthread_rwlockattr_t,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn pthread_rwlock_destroy(lock: *mut pthread_rwlock_t) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn pthread_rwlock_tryrdlock(arg1: *mut pthread_rwlock_t) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn pthread_rwlock_trywrlock(arg1: *mut pthread_rwlock_t) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn pthread_rwlock_rdlock(lock: *mut pthread_rwlock_t) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn pthread_rwlock_timedrdlock(
        lock: *mut pthread_rwlock_t,
        abstime: *const timespec,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn pthread_rwlock_wrlock(lock: *mut pthread_rwlock_t) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn pthread_rwlock_timedwrlock(
        lock: *mut pthread_rwlock_t,
        abstime: *const timespec,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn pthread_rwlock_unlock(lock: *mut pthread_rwlock_t) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn pthread_rwlockattr_init(attr: *mut pthread_rwlockattr_t) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn pthread_rwlockattr_destroy(attr: *mut pthread_rwlockattr_t) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn pthread_rwlockattr_getpshared(
        attr: *const pthread_rwlockattr_t,
        pshared: *mut ::std::os::raw::c_int,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn pthread_rwlockattr_setpshared(
        attr: *mut pthread_rwlockattr_t,
        pshared: ::std::os::raw::c_int,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn pthread_kill(thread: pthread_t, sig: ::std::os::raw::c_int) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn pthread_mutexattr_setkind_np(
        attr: *mut pthread_mutexattr_t,
        kind: ::std::os::raw::c_int,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn pthread_mutexattr_getkind_np(
        attr: *mut pthread_mutexattr_t,
        kind: *mut ::std::os::raw::c_int,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn pthread_delay_np(interval: *mut timespec) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn pthread_num_processors_np() -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn pthread_getunique_np(thread: pthread_t) -> ::std::os::raw::c_ulonglong;
}
extern "C" {
    pub fn pthread_win32_process_attach_np() -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn pthread_win32_process_detach_np() -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn pthread_win32_thread_attach_np() -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn pthread_win32_thread_detach_np() -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn pthread_win32_test_features_np(arg1: ::std::os::raw::c_int) -> ::std::os::raw::c_int;
}
pub const ptw32_features_PTW32_SYSTEM_INTERLOCKED_COMPARE_EXCHANGE: ptw32_features = 1;
pub const ptw32_features_PTW32_ALERTABLE_ASYNC_CANCEL: ptw32_features = 2;
pub type ptw32_features = ::std::os::raw::c_int;
extern "C" {
    pub fn pthread_timechange_handler_np(
        arg1: *mut ::std::os::raw::c_void,
    ) -> *mut ::std::os::raw::c_void;
}
extern "C" {
    pub fn pthread_getw32threadhandle_np(thread: pthread_t) -> *mut ::std::os::raw::c_void;
}
extern "C" {
    pub fn pthread_getw32threadid_np(thread: pthread_t) -> ::std::os::raw::c_ulong;
}
extern "C" {
    pub fn pthreadCancelableWait(waitHandle: *mut ::std::os::raw::c_void) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn pthreadCancelableTimedWait(
        waitHandle: *mut ::std::os::raw::c_void,
        timeout: ::std::os::raw::c_ulong,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn ptw32_get_exception_services_code() -> ::std::os::raw::c_ulong;
}
pub const UNUSED_ENUM_TYPE_UNUSED_DEF_VAL: UNUSED_ENUM_TYPE = 0;
pub type UNUSED_ENUM_TYPE = ::std::os::raw::c_int;
extern "C" {
    pub static mut gpu_index: ::std::os::raw::c_int;
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct metadata {
    pub classes: ::std::os::raw::c_int,
    pub names: *mut *mut ::std::os::raw::c_char,
}
#[test]
fn bindgen_test_layout_metadata() {
    assert_eq!(
        ::std::mem::size_of::<metadata>(),
        16usize,
        concat!("Size of: ", stringify!(metadata))
    );
    assert_eq!(
        ::std::mem::align_of::<metadata>(),
        8usize,
        concat!("Alignment of ", stringify!(metadata))
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<metadata>())).classes as *const _ as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(metadata),
            "::",
            stringify!(classes)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<metadata>())).names as *const _ as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(metadata),
            "::",
            stringify!(names)
        )
    );
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct tree {
    pub leaf: *mut ::std::os::raw::c_int,
    pub n: ::std::os::raw::c_int,
    pub parent: *mut ::std::os::raw::c_int,
    pub child: *mut ::std::os::raw::c_int,
    pub group: *mut ::std::os::raw::c_int,
    pub name: *mut *mut ::std::os::raw::c_char,
    pub groups: ::std::os::raw::c_int,
    pub group_size: *mut ::std::os::raw::c_int,
    pub group_offset: *mut ::std::os::raw::c_int,
}
#[test]
fn bindgen_test_layout_tree() {
    assert_eq!(
        ::std::mem::size_of::<tree>(),
        72usize,
        concat!("Size of: ", stringify!(tree))
    );
    assert_eq!(
        ::std::mem::align_of::<tree>(),
        8usize,
        concat!("Alignment of ", stringify!(tree))
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<tree>())).leaf as *const _ as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(tree),
            "::",
            stringify!(leaf)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<tree>())).n as *const _ as usize },
        8usize,
        concat!("Offset of field: ", stringify!(tree), "::", stringify!(n))
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<tree>())).parent as *const _ as usize },
        16usize,
        concat!(
            "Offset of field: ",
            stringify!(tree),
            "::",
            stringify!(parent)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<tree>())).child as *const _ as usize },
        24usize,
        concat!(
            "Offset of field: ",
            stringify!(tree),
            "::",
            stringify!(child)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<tree>())).group as *const _ as usize },
        32usize,
        concat!(
            "Offset of field: ",
            stringify!(tree),
            "::",
            stringify!(group)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<tree>())).name as *const _ as usize },
        40usize,
        concat!(
            "Offset of field: ",
            stringify!(tree),
            "::",
            stringify!(name)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<tree>())).groups as *const _ as usize },
        48usize,
        concat!(
            "Offset of field: ",
            stringify!(tree),
            "::",
            stringify!(groups)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<tree>())).group_size as *const _ as usize },
        56usize,
        concat!(
            "Offset of field: ",
            stringify!(tree),
            "::",
            stringify!(group_size)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<tree>())).group_offset as *const _ as usize },
        64usize,
        concat!(
            "Offset of field: ",
            stringify!(tree),
            "::",
            stringify!(group_offset)
        )
    );
}
pub const ACTIVATION_LOGISTIC: ACTIVATION = 0;
pub const ACTIVATION_RELU: ACTIVATION = 1;
pub const ACTIVATION_RELU6: ACTIVATION = 2;
pub const ACTIVATION_RELIE: ACTIVATION = 3;
pub const ACTIVATION_LINEAR: ACTIVATION = 4;
pub const ACTIVATION_RAMP: ACTIVATION = 5;
pub const ACTIVATION_TANH: ACTIVATION = 6;
pub const ACTIVATION_PLSE: ACTIVATION = 7;
pub const ACTIVATION_REVLEAKY: ACTIVATION = 8;
pub const ACTIVATION_LEAKY: ACTIVATION = 9;
pub const ACTIVATION_ELU: ACTIVATION = 10;
pub const ACTIVATION_LOGGY: ACTIVATION = 11;
pub const ACTIVATION_STAIR: ACTIVATION = 12;
pub const ACTIVATION_HARDTAN: ACTIVATION = 13;
pub const ACTIVATION_LHTAN: ACTIVATION = 14;
pub const ACTIVATION_SELU: ACTIVATION = 15;
pub const ACTIVATION_GELU: ACTIVATION = 16;
pub const ACTIVATION_SWISH: ACTIVATION = 17;
pub const ACTIVATION_MISH: ACTIVATION = 18;
pub const ACTIVATION_HARD_MISH: ACTIVATION = 19;
pub const ACTIVATION_NORM_CHAN: ACTIVATION = 20;
pub const ACTIVATION_NORM_CHAN_SOFTMAX: ACTIVATION = 21;
pub const ACTIVATION_NORM_CHAN_SOFTMAX_MAXVAL: ACTIVATION = 22;
pub type ACTIVATION = ::std::os::raw::c_int;
pub const IOU_LOSS_IOU: IOU_LOSS = 0;
pub const IOU_LOSS_GIOU: IOU_LOSS = 1;
pub const IOU_LOSS_MSE: IOU_LOSS = 2;
pub const IOU_LOSS_DIOU: IOU_LOSS = 3;
pub const IOU_LOSS_CIOU: IOU_LOSS = 4;
pub type IOU_LOSS = ::std::os::raw::c_int;
pub const NMS_KIND_DEFAULT_NMS: NMS_KIND = 0;
pub const NMS_KIND_GREEDY_NMS: NMS_KIND = 1;
pub const NMS_KIND_DIOU_NMS: NMS_KIND = 2;
pub const NMS_KIND_CORNERS_NMS: NMS_KIND = 3;
pub type NMS_KIND = ::std::os::raw::c_int;
pub const YOLO_POINT_YOLO_CENTER: YOLO_POINT = 1;
pub const YOLO_POINT_YOLO_LEFT_TOP: YOLO_POINT = 2;
pub const YOLO_POINT_YOLO_RIGHT_BOTTOM: YOLO_POINT = 4;
pub type YOLO_POINT = ::std::os::raw::c_int;
pub const WEIGHTS_TYPE_T_NO_WEIGHTS: WEIGHTS_TYPE_T = 0;
pub const WEIGHTS_TYPE_T_PER_FEATURE: WEIGHTS_TYPE_T = 1;
pub const WEIGHTS_TYPE_T_PER_CHANNEL: WEIGHTS_TYPE_T = 2;
pub type WEIGHTS_TYPE_T = ::std::os::raw::c_int;
pub const WEIGHTS_NORMALIZATION_T_NO_NORMALIZATION: WEIGHTS_NORMALIZATION_T = 0;
pub const WEIGHTS_NORMALIZATION_T_RELU_NORMALIZATION: WEIGHTS_NORMALIZATION_T = 1;
pub const WEIGHTS_NORMALIZATION_T_SOFTMAX_NORMALIZATION: WEIGHTS_NORMALIZATION_T = 2;
pub type WEIGHTS_NORMALIZATION_T = ::std::os::raw::c_int;
pub const IMTYPE_PNG: IMTYPE = 0;
pub const IMTYPE_BMP: IMTYPE = 1;
pub const IMTYPE_TGA: IMTYPE = 2;
pub const IMTYPE_JPG: IMTYPE = 3;
pub type IMTYPE = ::std::os::raw::c_int;
pub const BINARY_ACTIVATION_MULT: BINARY_ACTIVATION = 0;
pub const BINARY_ACTIVATION_ADD: BINARY_ACTIVATION = 1;
pub const BINARY_ACTIVATION_SUB: BINARY_ACTIVATION = 2;
pub const BINARY_ACTIVATION_DIV: BINARY_ACTIVATION = 3;
pub type BINARY_ACTIVATION = ::std::os::raw::c_int;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct contrastive_params {
    pub sim: f32,
    pub exp_sim: f32,
    pub P: f32,
    pub i: ::std::os::raw::c_int,
    pub j: ::std::os::raw::c_int,
    pub time_step_i: ::std::os::raw::c_int,
    pub time_step_j: ::std::os::raw::c_int,
}
#[test]
fn bindgen_test_layout_contrastive_params() {
    assert_eq!(
        ::std::mem::size_of::<contrastive_params>(),
        28usize,
        concat!("Size of: ", stringify!(contrastive_params))
    );
    assert_eq!(
        ::std::mem::align_of::<contrastive_params>(),
        4usize,
        concat!("Alignment of ", stringify!(contrastive_params))
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<contrastive_params>())).sim as *const _ as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(contrastive_params),
            "::",
            stringify!(sim)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<contrastive_params>())).exp_sim as *const _ as usize },
        4usize,
        concat!(
            "Offset of field: ",
            stringify!(contrastive_params),
            "::",
            stringify!(exp_sim)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<contrastive_params>())).P as *const _ as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(contrastive_params),
            "::",
            stringify!(P)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<contrastive_params>())).i as *const _ as usize },
        12usize,
        concat!(
            "Offset of field: ",
            stringify!(contrastive_params),
            "::",
            stringify!(i)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<contrastive_params>())).j as *const _ as usize },
        16usize,
        concat!(
            "Offset of field: ",
            stringify!(contrastive_params),
            "::",
            stringify!(j)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<contrastive_params>())).time_step_i as *const _ as usize },
        20usize,
        concat!(
            "Offset of field: ",
            stringify!(contrastive_params),
            "::",
            stringify!(time_step_i)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<contrastive_params>())).time_step_j as *const _ as usize },
        24usize,
        concat!(
            "Offset of field: ",
            stringify!(contrastive_params),
            "::",
            stringify!(time_step_j)
        )
    );
}
pub const LAYER_TYPE_CONVOLUTIONAL: LAYER_TYPE = 0;
pub const LAYER_TYPE_DECONVOLUTIONAL: LAYER_TYPE = 1;
pub const LAYER_TYPE_CONNECTED: LAYER_TYPE = 2;
pub const LAYER_TYPE_MAXPOOL: LAYER_TYPE = 3;
pub const LAYER_TYPE_LOCAL_AVGPOOL: LAYER_TYPE = 4;
pub const LAYER_TYPE_SOFTMAX: LAYER_TYPE = 5;
pub const LAYER_TYPE_DETECTION: LAYER_TYPE = 6;
pub const LAYER_TYPE_DROPOUT: LAYER_TYPE = 7;
pub const LAYER_TYPE_CROP: LAYER_TYPE = 8;
pub const LAYER_TYPE_ROUTE: LAYER_TYPE = 9;
pub const LAYER_TYPE_COST: LAYER_TYPE = 10;
pub const LAYER_TYPE_NORMALIZATION: LAYER_TYPE = 11;
pub const LAYER_TYPE_AVGPOOL: LAYER_TYPE = 12;
pub const LAYER_TYPE_LOCAL: LAYER_TYPE = 13;
pub const LAYER_TYPE_SHORTCUT: LAYER_TYPE = 14;
pub const LAYER_TYPE_SCALE_CHANNELS: LAYER_TYPE = 15;
pub const LAYER_TYPE_SAM: LAYER_TYPE = 16;
pub const LAYER_TYPE_ACTIVE: LAYER_TYPE = 17;
pub const LAYER_TYPE_RNN: LAYER_TYPE = 18;
pub const LAYER_TYPE_GRU: LAYER_TYPE = 19;
pub const LAYER_TYPE_LSTM: LAYER_TYPE = 20;
pub const LAYER_TYPE_CONV_LSTM: LAYER_TYPE = 21;
pub const LAYER_TYPE_HISTORY: LAYER_TYPE = 22;
pub const LAYER_TYPE_CRNN: LAYER_TYPE = 23;
pub const LAYER_TYPE_BATCHNORM: LAYER_TYPE = 24;
pub const LAYER_TYPE_NETWORK: LAYER_TYPE = 25;
pub const LAYER_TYPE_XNOR: LAYER_TYPE = 26;
pub const LAYER_TYPE_REGION: LAYER_TYPE = 27;
pub const LAYER_TYPE_YOLO: LAYER_TYPE = 28;
pub const LAYER_TYPE_GAUSSIAN_YOLO: LAYER_TYPE = 29;
pub const LAYER_TYPE_ISEG: LAYER_TYPE = 30;
pub const LAYER_TYPE_REORG: LAYER_TYPE = 31;
pub const LAYER_TYPE_REORG_OLD: LAYER_TYPE = 32;
pub const LAYER_TYPE_UPSAMPLE: LAYER_TYPE = 33;
pub const LAYER_TYPE_LOGXENT: LAYER_TYPE = 34;
pub const LAYER_TYPE_L2NORM: LAYER_TYPE = 35;
pub const LAYER_TYPE_EMPTY: LAYER_TYPE = 36;
pub const LAYER_TYPE_BLANK: LAYER_TYPE = 37;
pub const LAYER_TYPE_CONTRASTIVE: LAYER_TYPE = 38;
pub const LAYER_TYPE_IMPLICIT: LAYER_TYPE = 39;
pub type LAYER_TYPE = ::std::os::raw::c_int;
pub const COST_TYPE_SSE: COST_TYPE = 0;
pub const COST_TYPE_MASKED: COST_TYPE = 1;
pub const COST_TYPE_L1: COST_TYPE = 2;
pub const COST_TYPE_SEG: COST_TYPE = 3;
pub const COST_TYPE_SMOOTH: COST_TYPE = 4;
pub const COST_TYPE_WGAN: COST_TYPE = 5;
pub type COST_TYPE = ::std::os::raw::c_int;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct update_args {
    pub batch: ::std::os::raw::c_int,
    pub learning_rate: f32,
    pub momentum: f32,
    pub decay: f32,
    pub adam: ::std::os::raw::c_int,
    pub B1: f32,
    pub B2: f32,
    pub eps: f32,
    pub t: ::std::os::raw::c_int,
}
#[test]
fn bindgen_test_layout_update_args() {
    assert_eq!(
        ::std::mem::size_of::<update_args>(),
        36usize,
        concat!("Size of: ", stringify!(update_args))
    );
    assert_eq!(
        ::std::mem::align_of::<update_args>(),
        4usize,
        concat!("Alignment of ", stringify!(update_args))
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<update_args>())).batch as *const _ as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(update_args),
            "::",
            stringify!(batch)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<update_args>())).learning_rate as *const _ as usize },
        4usize,
        concat!(
            "Offset of field: ",
            stringify!(update_args),
            "::",
            stringify!(learning_rate)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<update_args>())).momentum as *const _ as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(update_args),
            "::",
            stringify!(momentum)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<update_args>())).decay as *const _ as usize },
        12usize,
        concat!(
            "Offset of field: ",
            stringify!(update_args),
            "::",
            stringify!(decay)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<update_args>())).adam as *const _ as usize },
        16usize,
        concat!(
            "Offset of field: ",
            stringify!(update_args),
            "::",
            stringify!(adam)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<update_args>())).B1 as *const _ as usize },
        20usize,
        concat!(
            "Offset of field: ",
            stringify!(update_args),
            "::",
            stringify!(B1)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<update_args>())).B2 as *const _ as usize },
        24usize,
        concat!(
            "Offset of field: ",
            stringify!(update_args),
            "::",
            stringify!(B2)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<update_args>())).eps as *const _ as usize },
        28usize,
        concat!(
            "Offset of field: ",
            stringify!(update_args),
            "::",
            stringify!(eps)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<update_args>())).t as *const _ as usize },
        32usize,
        concat!(
            "Offset of field: ",
            stringify!(update_args),
            "::",
            stringify!(t)
        )
    );
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct layer {
    pub type_: LAYER_TYPE,
    pub activation: ACTIVATION,
    pub lstm_activation: ACTIVATION,
    pub cost_type: COST_TYPE,
    pub forward: ::std::option::Option<unsafe extern "C" fn(arg1: layer, arg2: network_state)>,
    pub backward: ::std::option::Option<unsafe extern "C" fn(arg1: layer, arg2: network_state)>,
    pub update: ::std::option::Option<
        unsafe extern "C" fn(
            arg1: layer,
            arg2: ::std::os::raw::c_int,
            arg3: f32,
            arg4: f32,
            arg5: f32,
        ),
    >,
    pub forward_gpu: ::std::option::Option<unsafe extern "C" fn(arg1: layer, arg2: network_state)>,
    pub backward_gpu: ::std::option::Option<unsafe extern "C" fn(arg1: layer, arg2: network_state)>,
    pub update_gpu: ::std::option::Option<
        unsafe extern "C" fn(
            arg1: layer,
            arg2: ::std::os::raw::c_int,
            arg3: f32,
            arg4: f32,
            arg5: f32,
            arg6: f32,
        ),
    >,
    pub share_layer: *mut layer,
    pub train: ::std::os::raw::c_int,
    pub avgpool: ::std::os::raw::c_int,
    pub batch_normalize: ::std::os::raw::c_int,
    pub shortcut: ::std::os::raw::c_int,
    pub batch: ::std::os::raw::c_int,
    pub dynamic_minibatch: ::std::os::raw::c_int,
    pub forced: ::std::os::raw::c_int,
    pub flipped: ::std::os::raw::c_int,
    pub inputs: ::std::os::raw::c_int,
    pub outputs: ::std::os::raw::c_int,
    pub mean_alpha: f32,
    pub nweights: ::std::os::raw::c_int,
    pub nbiases: ::std::os::raw::c_int,
    pub extra: ::std::os::raw::c_int,
    pub truths: ::std::os::raw::c_int,
    pub h: ::std::os::raw::c_int,
    pub w: ::std::os::raw::c_int,
    pub c: ::std::os::raw::c_int,
    pub out_h: ::std::os::raw::c_int,
    pub out_w: ::std::os::raw::c_int,
    pub out_c: ::std::os::raw::c_int,
    pub n: ::std::os::raw::c_int,
    pub max_boxes: ::std::os::raw::c_int,
    pub truth_size: ::std::os::raw::c_int,
    pub groups: ::std::os::raw::c_int,
    pub group_id: ::std::os::raw::c_int,
    pub size: ::std::os::raw::c_int,
    pub side: ::std::os::raw::c_int,
    pub stride: ::std::os::raw::c_int,
    pub stride_x: ::std::os::raw::c_int,
    pub stride_y: ::std::os::raw::c_int,
    pub dilation: ::std::os::raw::c_int,
    pub antialiasing: ::std::os::raw::c_int,
    pub maxpool_depth: ::std::os::raw::c_int,
    pub maxpool_zero_nonmax: ::std::os::raw::c_int,
    pub out_channels: ::std::os::raw::c_int,
    pub reverse: f32,
    pub coordconv: ::std::os::raw::c_int,
    pub flatten: ::std::os::raw::c_int,
    pub spatial: ::std::os::raw::c_int,
    pub pad: ::std::os::raw::c_int,
    pub sqrt: ::std::os::raw::c_int,
    pub flip: ::std::os::raw::c_int,
    pub index: ::std::os::raw::c_int,
    pub scale_wh: ::std::os::raw::c_int,
    pub binary: ::std::os::raw::c_int,
    pub xnor: ::std::os::raw::c_int,
    pub peephole: ::std::os::raw::c_int,
    pub use_bin_output: ::std::os::raw::c_int,
    pub keep_delta_gpu: ::std::os::raw::c_int,
    pub optimized_memory: ::std::os::raw::c_int,
    pub steps: ::std::os::raw::c_int,
    pub history_size: ::std::os::raw::c_int,
    pub bottleneck: ::std::os::raw::c_int,
    pub time_normalizer: f32,
    pub state_constrain: ::std::os::raw::c_int,
    pub hidden: ::std::os::raw::c_int,
    pub truth: ::std::os::raw::c_int,
    pub smooth: f32,
    pub dot: f32,
    pub deform: ::std::os::raw::c_int,
    pub grad_centr: ::std::os::raw::c_int,
    pub sway: ::std::os::raw::c_int,
    pub rotate: ::std::os::raw::c_int,
    pub stretch: ::std::os::raw::c_int,
    pub stretch_sway: ::std::os::raw::c_int,
    pub angle: f32,
    pub jitter: f32,
    pub resize: f32,
    pub saturation: f32,
    pub exposure: f32,
    pub shift: f32,
    pub ratio: f32,
    pub learning_rate_scale: f32,
    pub clip: f32,
    pub focal_loss: ::std::os::raw::c_int,
    pub classes_multipliers: *mut f32,
    pub label_smooth_eps: f32,
    pub noloss: ::std::os::raw::c_int,
    pub softmax: ::std::os::raw::c_int,
    pub classes: ::std::os::raw::c_int,
    pub detection: ::std::os::raw::c_int,
    pub embedding_layer_id: ::std::os::raw::c_int,
    pub embedding_output: *mut f32,
    pub embedding_size: ::std::os::raw::c_int,
    pub sim_thresh: f32,
    pub track_history_size: ::std::os::raw::c_int,
    pub dets_for_track: ::std::os::raw::c_int,
    pub dets_for_show: ::std::os::raw::c_int,
    pub track_ciou_norm: f32,
    pub coords: ::std::os::raw::c_int,
    pub background: ::std::os::raw::c_int,
    pub rescore: ::std::os::raw::c_int,
    pub objectness: ::std::os::raw::c_int,
    pub does_cost: ::std::os::raw::c_int,
    pub joint: ::std::os::raw::c_int,
    pub noadjust: ::std::os::raw::c_int,
    pub reorg: ::std::os::raw::c_int,
    pub log: ::std::os::raw::c_int,
    pub tanh: ::std::os::raw::c_int,
    pub mask: *mut ::std::os::raw::c_int,
    pub total: ::std::os::raw::c_int,
    pub bflops: f32,
    pub adam: ::std::os::raw::c_int,
    pub B1: f32,
    pub B2: f32,
    pub eps: f32,
    pub t: ::std::os::raw::c_int,
    pub alpha: f32,
    pub beta: f32,
    pub kappa: f32,
    pub coord_scale: f32,
    pub object_scale: f32,
    pub noobject_scale: f32,
    pub mask_scale: f32,
    pub class_scale: f32,
    pub bias_match: ::std::os::raw::c_int,
    pub random: f32,
    pub ignore_thresh: f32,
    pub truth_thresh: f32,
    pub iou_thresh: f32,
    pub thresh: f32,
    pub focus: f32,
    pub classfix: ::std::os::raw::c_int,
    pub absolute: ::std::os::raw::c_int,
    pub assisted_excitation: ::std::os::raw::c_int,
    pub onlyforward: ::std::os::raw::c_int,
    pub stopbackward: ::std::os::raw::c_int,
    pub train_only_bn: ::std::os::raw::c_int,
    pub dont_update: ::std::os::raw::c_int,
    pub burnin_update: ::std::os::raw::c_int,
    pub dontload: ::std::os::raw::c_int,
    pub dontsave: ::std::os::raw::c_int,
    pub dontloadscales: ::std::os::raw::c_int,
    pub numload: ::std::os::raw::c_int,
    pub temperature: f32,
    pub probability: f32,
    pub dropblock_size_rel: f32,
    pub dropblock_size_abs: ::std::os::raw::c_int,
    pub dropblock: ::std::os::raw::c_int,
    pub scale: f32,
    pub receptive_w: ::std::os::raw::c_int,
    pub receptive_h: ::std::os::raw::c_int,
    pub receptive_w_scale: ::std::os::raw::c_int,
    pub receptive_h_scale: ::std::os::raw::c_int,
    pub cweights: *mut ::std::os::raw::c_char,
    pub indexes: *mut ::std::os::raw::c_int,
    pub input_layers: *mut ::std::os::raw::c_int,
    pub input_sizes: *mut ::std::os::raw::c_int,
    pub layers_output: *mut *mut f32,
    pub layers_delta: *mut *mut f32,
    pub weights_type: WEIGHTS_TYPE_T,
    pub weights_normalization: WEIGHTS_NORMALIZATION_T,
    pub map: *mut ::std::os::raw::c_int,
    pub counts: *mut ::std::os::raw::c_int,
    pub sums: *mut *mut f32,
    pub rand: *mut f32,
    pub cost: *mut f32,
    pub labels: *mut ::std::os::raw::c_int,
    pub class_ids: *mut ::std::os::raw::c_int,
    pub contrastive_neg_max: ::std::os::raw::c_int,
    pub cos_sim: *mut f32,
    pub exp_cos_sim: *mut f32,
    pub p_constrastive: *mut f32,
    pub contrast_p_gpu: *mut contrastive_params,
    pub state: *mut f32,
    pub prev_state: *mut f32,
    pub forgot_state: *mut f32,
    pub forgot_delta: *mut f32,
    pub state_delta: *mut f32,
    pub combine_cpu: *mut f32,
    pub combine_delta_cpu: *mut f32,
    pub concat: *mut f32,
    pub concat_delta: *mut f32,
    pub binary_weights: *mut f32,
    pub biases: *mut f32,
    pub bias_updates: *mut f32,
    pub scales: *mut f32,
    pub scale_updates: *mut f32,
    pub weights_ema: *mut f32,
    pub biases_ema: *mut f32,
    pub scales_ema: *mut f32,
    pub weights: *mut f32,
    pub weight_updates: *mut f32,
    pub scale_x_y: f32,
    pub objectness_smooth: ::std::os::raw::c_int,
    pub new_coords: ::std::os::raw::c_int,
    pub show_details: ::std::os::raw::c_int,
    pub max_delta: f32,
    pub uc_normalizer: f32,
    pub iou_normalizer: f32,
    pub obj_normalizer: f32,
    pub cls_normalizer: f32,
    pub delta_normalizer: f32,
    pub iou_loss: IOU_LOSS,
    pub iou_thresh_kind: IOU_LOSS,
    pub nms_kind: NMS_KIND,
    pub beta_nms: f32,
    pub yolo_point: YOLO_POINT,
    pub align_bit_weights_gpu: *mut ::std::os::raw::c_char,
    pub mean_arr_gpu: *mut f32,
    pub align_workspace_gpu: *mut f32,
    pub transposed_align_workspace_gpu: *mut f32,
    pub align_workspace_size: ::std::os::raw::c_int,
    pub align_bit_weights: *mut ::std::os::raw::c_char,
    pub mean_arr: *mut f32,
    pub align_bit_weights_size: ::std::os::raw::c_int,
    pub lda_align: ::std::os::raw::c_int,
    pub new_lda: ::std::os::raw::c_int,
    pub bit_align: ::std::os::raw::c_int,
    pub col_image: *mut f32,
    pub delta: *mut f32,
    pub output: *mut f32,
    pub activation_input: *mut f32,
    pub delta_pinned: ::std::os::raw::c_int,
    pub output_pinned: ::std::os::raw::c_int,
    pub loss: *mut f32,
    pub squared: *mut f32,
    pub norms: *mut f32,
    pub spatial_mean: *mut f32,
    pub mean: *mut f32,
    pub variance: *mut f32,
    pub mean_delta: *mut f32,
    pub variance_delta: *mut f32,
    pub rolling_mean: *mut f32,
    pub rolling_variance: *mut f32,
    pub x: *mut f32,
    pub x_norm: *mut f32,
    pub m: *mut f32,
    pub v: *mut f32,
    pub bias_m: *mut f32,
    pub bias_v: *mut f32,
    pub scale_m: *mut f32,
    pub scale_v: *mut f32,
    pub z_cpu: *mut f32,
    pub r_cpu: *mut f32,
    pub h_cpu: *mut f32,
    pub stored_h_cpu: *mut f32,
    pub prev_state_cpu: *mut f32,
    pub temp_cpu: *mut f32,
    pub temp2_cpu: *mut f32,
    pub temp3_cpu: *mut f32,
    pub dh_cpu: *mut f32,
    pub hh_cpu: *mut f32,
    pub prev_cell_cpu: *mut f32,
    pub cell_cpu: *mut f32,
    pub f_cpu: *mut f32,
    pub i_cpu: *mut f32,
    pub g_cpu: *mut f32,
    pub o_cpu: *mut f32,
    pub c_cpu: *mut f32,
    pub stored_c_cpu: *mut f32,
    pub dc_cpu: *mut f32,
    pub binary_input: *mut f32,
    pub bin_re_packed_input: *mut u32,
    pub t_bit_input: *mut ::std::os::raw::c_char,
    pub input_layer: *mut layer,
    pub self_layer: *mut layer,
    pub output_layer: *mut layer,
    pub reset_layer: *mut layer,
    pub update_layer: *mut layer,
    pub state_layer: *mut layer,
    pub input_gate_layer: *mut layer,
    pub state_gate_layer: *mut layer,
    pub input_save_layer: *mut layer,
    pub state_save_layer: *mut layer,
    pub input_state_layer: *mut layer,
    pub state_state_layer: *mut layer,
    pub input_z_layer: *mut layer,
    pub state_z_layer: *mut layer,
    pub input_r_layer: *mut layer,
    pub state_r_layer: *mut layer,
    pub input_h_layer: *mut layer,
    pub state_h_layer: *mut layer,
    pub wz: *mut layer,
    pub uz: *mut layer,
    pub wr: *mut layer,
    pub ur: *mut layer,
    pub wh: *mut layer,
    pub uh: *mut layer,
    pub uo: *mut layer,
    pub wo: *mut layer,
    pub vo: *mut layer,
    pub uf: *mut layer,
    pub wf: *mut layer,
    pub vf: *mut layer,
    pub ui: *mut layer,
    pub wi: *mut layer,
    pub vi: *mut layer,
    pub ug: *mut layer,
    pub wg: *mut layer,
    pub softmax_tree: *mut tree,
    pub workspace_size: size_t,
    pub indexes_gpu: *mut ::std::os::raw::c_int,
    pub stream: ::std::os::raw::c_int,
    pub wait_stream_id: ::std::os::raw::c_int,
    pub z_gpu: *mut f32,
    pub r_gpu: *mut f32,
    pub h_gpu: *mut f32,
    pub stored_h_gpu: *mut f32,
    pub bottelneck_hi_gpu: *mut f32,
    pub bottelneck_delta_gpu: *mut f32,
    pub temp_gpu: *mut f32,
    pub temp2_gpu: *mut f32,
    pub temp3_gpu: *mut f32,
    pub dh_gpu: *mut f32,
    pub hh_gpu: *mut f32,
    pub prev_cell_gpu: *mut f32,
    pub prev_state_gpu: *mut f32,
    pub last_prev_state_gpu: *mut f32,
    pub last_prev_cell_gpu: *mut f32,
    pub cell_gpu: *mut f32,
    pub f_gpu: *mut f32,
    pub i_gpu: *mut f32,
    pub g_gpu: *mut f32,
    pub o_gpu: *mut f32,
    pub c_gpu: *mut f32,
    pub stored_c_gpu: *mut f32,
    pub dc_gpu: *mut f32,
    pub m_gpu: *mut f32,
    pub v_gpu: *mut f32,
    pub bias_m_gpu: *mut f32,
    pub scale_m_gpu: *mut f32,
    pub bias_v_gpu: *mut f32,
    pub scale_v_gpu: *mut f32,
    pub combine_gpu: *mut f32,
    pub combine_delta_gpu: *mut f32,
    pub forgot_state_gpu: *mut f32,
    pub forgot_delta_gpu: *mut f32,
    pub state_gpu: *mut f32,
    pub state_delta_gpu: *mut f32,
    pub gate_gpu: *mut f32,
    pub gate_delta_gpu: *mut f32,
    pub save_gpu: *mut f32,
    pub save_delta_gpu: *mut f32,
    pub concat_gpu: *mut f32,
    pub concat_delta_gpu: *mut f32,
    pub binary_input_gpu: *mut f32,
    pub binary_weights_gpu: *mut f32,
    pub bin_conv_shortcut_in_gpu: *mut f32,
    pub bin_conv_shortcut_out_gpu: *mut f32,
    pub mean_gpu: *mut f32,
    pub variance_gpu: *mut f32,
    pub m_cbn_avg_gpu: *mut f32,
    pub v_cbn_avg_gpu: *mut f32,
    pub rolling_mean_gpu: *mut f32,
    pub rolling_variance_gpu: *mut f32,
    pub variance_delta_gpu: *mut f32,
    pub mean_delta_gpu: *mut f32,
    pub col_image_gpu: *mut f32,
    pub x_gpu: *mut f32,
    pub x_norm_gpu: *mut f32,
    pub weights_gpu: *mut f32,
    pub weight_updates_gpu: *mut f32,
    pub weight_deform_gpu: *mut f32,
    pub weight_change_gpu: *mut f32,
    pub weights_gpu16: *mut f32,
    pub weight_updates_gpu16: *mut f32,
    pub biases_gpu: *mut f32,
    pub bias_updates_gpu: *mut f32,
    pub bias_change_gpu: *mut f32,
    pub scales_gpu: *mut f32,
    pub scale_updates_gpu: *mut f32,
    pub scale_change_gpu: *mut f32,
    pub input_antialiasing_gpu: *mut f32,
    pub output_gpu: *mut f32,
    pub output_avg_gpu: *mut f32,
    pub activation_input_gpu: *mut f32,
    pub loss_gpu: *mut f32,
    pub delta_gpu: *mut f32,
    pub cos_sim_gpu: *mut f32,
    pub rand_gpu: *mut f32,
    pub drop_blocks_scale: *mut f32,
    pub drop_blocks_scale_gpu: *mut f32,
    pub squared_gpu: *mut f32,
    pub norms_gpu: *mut f32,
    pub gt_gpu: *mut f32,
    pub a_avg_gpu: *mut f32,
    pub input_sizes_gpu: *mut ::std::os::raw::c_int,
    pub layers_output_gpu: *mut *mut f32,
    pub layers_delta_gpu: *mut *mut f32,
    pub srcTensorDesc: *mut ::std::os::raw::c_void,
    pub dstTensorDesc: *mut ::std::os::raw::c_void,
    pub srcTensorDesc16: *mut ::std::os::raw::c_void,
    pub dstTensorDesc16: *mut ::std::os::raw::c_void,
    pub dsrcTensorDesc: *mut ::std::os::raw::c_void,
    pub ddstTensorDesc: *mut ::std::os::raw::c_void,
    pub dsrcTensorDesc16: *mut ::std::os::raw::c_void,
    pub ddstTensorDesc16: *mut ::std::os::raw::c_void,
    pub normTensorDesc: *mut ::std::os::raw::c_void,
    pub normDstTensorDesc: *mut ::std::os::raw::c_void,
    pub normDstTensorDescF16: *mut ::std::os::raw::c_void,
    pub weightDesc: *mut ::std::os::raw::c_void,
    pub weightDesc16: *mut ::std::os::raw::c_void,
    pub dweightDesc: *mut ::std::os::raw::c_void,
    pub dweightDesc16: *mut ::std::os::raw::c_void,
    pub convDesc: *mut ::std::os::raw::c_void,
    pub fw_algo: UNUSED_ENUM_TYPE,
    pub fw_algo16: UNUSED_ENUM_TYPE,
    pub bd_algo: UNUSED_ENUM_TYPE,
    pub bd_algo16: UNUSED_ENUM_TYPE,
    pub bf_algo: UNUSED_ENUM_TYPE,
    pub bf_algo16: UNUSED_ENUM_TYPE,
    pub poolingDesc: *mut ::std::os::raw::c_void,
}
#[test]
fn bindgen_test_layout_layer() {
    assert_eq!(
        ::std::mem::size_of::<layer>(),
        2616usize,
        concat!("Size of: ", stringify!(layer))
    );
    assert_eq!(
        ::std::mem::align_of::<layer>(),
        8usize,
        concat!("Alignment of ", stringify!(layer))
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<layer>())).type_ as *const _ as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(layer),
            "::",
            stringify!(type_)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<layer>())).activation as *const _ as usize },
        4usize,
        concat!(
            "Offset of field: ",
            stringify!(layer),
            "::",
            stringify!(activation)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<layer>())).lstm_activation as *const _ as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(layer),
            "::",
            stringify!(lstm_activation)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<layer>())).cost_type as *const _ as usize },
        12usize,
        concat!(
            "Offset of field: ",
            stringify!(layer),
            "::",
            stringify!(cost_type)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<layer>())).forward as *const _ as usize },
        16usize,
        concat!(
            "Offset of field: ",
            stringify!(layer),
            "::",
            stringify!(forward)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<layer>())).backward as *const _ as usize },
        24usize,
        concat!(
            "Offset of field: ",
            stringify!(layer),
            "::",
            stringify!(backward)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<layer>())).update as *const _ as usize },
        32usize,
        concat!(
            "Offset of field: ",
            stringify!(layer),
            "::",
            stringify!(update)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<layer>())).forward_gpu as *const _ as usize },
        40usize,
        concat!(
            "Offset of field: ",
            stringify!(layer),
            "::",
            stringify!(forward_gpu)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<layer>())).backward_gpu as *const _ as usize },
        48usize,
        concat!(
            "Offset of field: ",
            stringify!(layer),
            "::",
            stringify!(backward_gpu)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<layer>())).update_gpu as *const _ as usize },
        56usize,
        concat!(
            "Offset of field: ",
            stringify!(layer),
            "::",
            stringify!(update_gpu)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<layer>())).share_layer as *const _ as usize },
        64usize,
        concat!(
            "Offset of field: ",
            stringify!(layer),
            "::",
            stringify!(share_layer)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<layer>())).train as *const _ as usize },
        72usize,
        concat!(
            "Offset of field: ",
            stringify!(layer),
            "::",
            stringify!(train)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<layer>())).avgpool as *const _ as usize },
        76usize,
        concat!(
            "Offset of field: ",
            stringify!(layer),
            "::",
            stringify!(avgpool)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<layer>())).batch_normalize as *const _ as usize },
        80usize,
        concat!(
            "Offset of field: ",
            stringify!(layer),
            "::",
            stringify!(batch_normalize)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<layer>())).shortcut as *const _ as usize },
        84usize,
        concat!(
            "Offset of field: ",
            stringify!(layer),
            "::",
            stringify!(shortcut)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<layer>())).batch as *const _ as usize },
        88usize,
        concat!(
            "Offset of field: ",
            stringify!(layer),
            "::",
            stringify!(batch)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<layer>())).dynamic_minibatch as *const _ as usize },
        92usize,
        concat!(
            "Offset of field: ",
            stringify!(layer),
            "::",
            stringify!(dynamic_minibatch)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<layer>())).forced as *const _ as usize },
        96usize,
        concat!(
            "Offset of field: ",
            stringify!(layer),
            "::",
            stringify!(forced)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<layer>())).flipped as *const _ as usize },
        100usize,
        concat!(
            "Offset of field: ",
            stringify!(layer),
            "::",
            stringify!(flipped)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<layer>())).inputs as *const _ as usize },
        104usize,
        concat!(
            "Offset of field: ",
            stringify!(layer),
            "::",
            stringify!(inputs)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<layer>())).outputs as *const _ as usize },
        108usize,
        concat!(
            "Offset of field: ",
            stringify!(layer),
            "::",
            stringify!(outputs)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<layer>())).mean_alpha as *const _ as usize },
        112usize,
        concat!(
            "Offset of field: ",
            stringify!(layer),
            "::",
            stringify!(mean_alpha)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<layer>())).nweights as *const _ as usize },
        116usize,
        concat!(
            "Offset of field: ",
            stringify!(layer),
            "::",
            stringify!(nweights)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<layer>())).nbiases as *const _ as usize },
        120usize,
        concat!(
            "Offset of field: ",
            stringify!(layer),
            "::",
            stringify!(nbiases)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<layer>())).extra as *const _ as usize },
        124usize,
        concat!(
            "Offset of field: ",
            stringify!(layer),
            "::",
            stringify!(extra)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<layer>())).truths as *const _ as usize },
        128usize,
        concat!(
            "Offset of field: ",
            stringify!(layer),
            "::",
            stringify!(truths)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<layer>())).h as *const _ as usize },
        132usize,
        concat!("Offset of field: ", stringify!(layer), "::", stringify!(h))
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<layer>())).w as *const _ as usize },
        136usize,
        concat!("Offset of field: ", stringify!(layer), "::", stringify!(w))
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<layer>())).c as *const _ as usize },
        140usize,
        concat!("Offset of field: ", stringify!(layer), "::", stringify!(c))
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<layer>())).out_h as *const _ as usize },
        144usize,
        concat!(
            "Offset of field: ",
            stringify!(layer),
            "::",
            stringify!(out_h)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<layer>())).out_w as *const _ as usize },
        148usize,
        concat!(
            "Offset of field: ",
            stringify!(layer),
            "::",
            stringify!(out_w)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<layer>())).out_c as *const _ as usize },
        152usize,
        concat!(
            "Offset of field: ",
            stringify!(layer),
            "::",
            stringify!(out_c)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<layer>())).n as *const _ as usize },
        156usize,
        concat!("Offset of field: ", stringify!(layer), "::", stringify!(n))
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<layer>())).max_boxes as *const _ as usize },
        160usize,
        concat!(
            "Offset of field: ",
            stringify!(layer),
            "::",
            stringify!(max_boxes)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<layer>())).truth_size as *const _ as usize },
        164usize,
        concat!(
            "Offset of field: ",
            stringify!(layer),
            "::",
            stringify!(truth_size)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<layer>())).groups as *const _ as usize },
        168usize,
        concat!(
            "Offset of field: ",
            stringify!(layer),
            "::",
            stringify!(groups)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<layer>())).group_id as *const _ as usize },
        172usize,
        concat!(
            "Offset of field: ",
            stringify!(layer),
            "::",
            stringify!(group_id)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<layer>())).size as *const _ as usize },
        176usize,
        concat!(
            "Offset of field: ",
            stringify!(layer),
            "::",
            stringify!(size)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<layer>())).side as *const _ as usize },
        180usize,
        concat!(
            "Offset of field: ",
            stringify!(layer),
            "::",
            stringify!(side)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<layer>())).stride as *const _ as usize },
        184usize,
        concat!(
            "Offset of field: ",
            stringify!(layer),
            "::",
            stringify!(stride)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<layer>())).stride_x as *const _ as usize },
        188usize,
        concat!(
            "Offset of field: ",
            stringify!(layer),
            "::",
            stringify!(stride_x)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<layer>())).stride_y as *const _ as usize },
        192usize,
        concat!(
            "Offset of field: ",
            stringify!(layer),
            "::",
            stringify!(stride_y)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<layer>())).dilation as *const _ as usize },
        196usize,
        concat!(
            "Offset of field: ",
            stringify!(layer),
            "::",
            stringify!(dilation)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<layer>())).antialiasing as *const _ as usize },
        200usize,
        concat!(
            "Offset of field: ",
            stringify!(layer),
            "::",
            stringify!(antialiasing)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<layer>())).maxpool_depth as *const _ as usize },
        204usize,
        concat!(
            "Offset of field: ",
            stringify!(layer),
            "::",
            stringify!(maxpool_depth)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<layer>())).maxpool_zero_nonmax as *const _ as usize },
        208usize,
        concat!(
            "Offset of field: ",
            stringify!(layer),
            "::",
            stringify!(maxpool_zero_nonmax)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<layer>())).out_channels as *const _ as usize },
        212usize,
        concat!(
            "Offset of field: ",
            stringify!(layer),
            "::",
            stringify!(out_channels)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<layer>())).reverse as *const _ as usize },
        216usize,
        concat!(
            "Offset of field: ",
            stringify!(layer),
            "::",
            stringify!(reverse)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<layer>())).coordconv as *const _ as usize },
        220usize,
        concat!(
            "Offset of field: ",
            stringify!(layer),
            "::",
            stringify!(coordconv)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<layer>())).flatten as *const _ as usize },
        224usize,
        concat!(
            "Offset of field: ",
            stringify!(layer),
            "::",
            stringify!(flatten)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<layer>())).spatial as *const _ as usize },
        228usize,
        concat!(
            "Offset of field: ",
            stringify!(layer),
            "::",
            stringify!(spatial)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<layer>())).pad as *const _ as usize },
        232usize,
        concat!(
            "Offset of field: ",
            stringify!(layer),
            "::",
            stringify!(pad)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<layer>())).sqrt as *const _ as usize },
        236usize,
        concat!(
            "Offset of field: ",
            stringify!(layer),
            "::",
            stringify!(sqrt)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<layer>())).flip as *const _ as usize },
        240usize,
        concat!(
            "Offset of field: ",
            stringify!(layer),
            "::",
            stringify!(flip)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<layer>())).index as *const _ as usize },
        244usize,
        concat!(
            "Offset of field: ",
            stringify!(layer),
            "::",
            stringify!(index)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<layer>())).scale_wh as *const _ as usize },
        248usize,
        concat!(
            "Offset of field: ",
            stringify!(layer),
            "::",
            stringify!(scale_wh)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<layer>())).binary as *const _ as usize },
        252usize,
        concat!(
            "Offset of field: ",
            stringify!(layer),
            "::",
            stringify!(binary)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<layer>())).xnor as *const _ as usize },
        256usize,
        concat!(
            "Offset of field: ",
            stringify!(layer),
            "::",
            stringify!(xnor)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<layer>())).peephole as *const _ as usize },
        260usize,
        concat!(
            "Offset of field: ",
            stringify!(layer),
            "::",
            stringify!(peephole)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<layer>())).use_bin_output as *const _ as usize },
        264usize,
        concat!(
            "Offset of field: ",
            stringify!(layer),
            "::",
            stringify!(use_bin_output)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<layer>())).keep_delta_gpu as *const _ as usize },
        268usize,
        concat!(
            "Offset of field: ",
            stringify!(layer),
            "::",
            stringify!(keep_delta_gpu)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<layer>())).optimized_memory as *const _ as usize },
        272usize,
        concat!(
            "Offset of field: ",
            stringify!(layer),
            "::",
            stringify!(optimized_memory)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<layer>())).steps as *const _ as usize },
        276usize,
        concat!(
            "Offset of field: ",
            stringify!(layer),
            "::",
            stringify!(steps)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<layer>())).history_size as *const _ as usize },
        280usize,
        concat!(
            "Offset of field: ",
            stringify!(layer),
            "::",
            stringify!(history_size)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<layer>())).bottleneck as *const _ as usize },
        284usize,
        concat!(
            "Offset of field: ",
            stringify!(layer),
            "::",
            stringify!(bottleneck)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<layer>())).time_normalizer as *const _ as usize },
        288usize,
        concat!(
            "Offset of field: ",
            stringify!(layer),
            "::",
            stringify!(time_normalizer)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<layer>())).state_constrain as *const _ as usize },
        292usize,
        concat!(
            "Offset of field: ",
            stringify!(layer),
            "::",
            stringify!(state_constrain)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<layer>())).hidden as *const _ as usize },
        296usize,
        concat!(
            "Offset of field: ",
            stringify!(layer),
            "::",
            stringify!(hidden)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<layer>())).truth as *const _ as usize },
        300usize,
        concat!(
            "Offset of field: ",
            stringify!(layer),
            "::",
            stringify!(truth)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<layer>())).smooth as *const _ as usize },
        304usize,
        concat!(
            "Offset of field: ",
            stringify!(layer),
            "::",
            stringify!(smooth)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<layer>())).dot as *const _ as usize },
        308usize,
        concat!(
            "Offset of field: ",
            stringify!(layer),
            "::",
            stringify!(dot)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<layer>())).deform as *const _ as usize },
        312usize,
        concat!(
            "Offset of field: ",
            stringify!(layer),
            "::",
            stringify!(deform)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<layer>())).grad_centr as *const _ as usize },
        316usize,
        concat!(
            "Offset of field: ",
            stringify!(layer),
            "::",
            stringify!(grad_centr)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<layer>())).sway as *const _ as usize },
        320usize,
        concat!(
            "Offset of field: ",
            stringify!(layer),
            "::",
            stringify!(sway)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<layer>())).rotate as *const _ as usize },
        324usize,
        concat!(
            "Offset of field: ",
            stringify!(layer),
            "::",
            stringify!(rotate)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<layer>())).stretch as *const _ as usize },
        328usize,
        concat!(
            "Offset of field: ",
            stringify!(layer),
            "::",
            stringify!(stretch)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<layer>())).stretch_sway as *const _ as usize },
        332usize,
        concat!(
            "Offset of field: ",
            stringify!(layer),
            "::",
            stringify!(stretch_sway)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<layer>())).angle as *const _ as usize },
        336usize,
        concat!(
            "Offset of field: ",
            stringify!(layer),
            "::",
            stringify!(angle)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<layer>())).jitter as *const _ as usize },
        340usize,
        concat!(
            "Offset of field: ",
            stringify!(layer),
            "::",
            stringify!(jitter)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<layer>())).resize as *const _ as usize },
        344usize,
        concat!(
            "Offset of field: ",
            stringify!(layer),
            "::",
            stringify!(resize)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<layer>())).saturation as *const _ as usize },
        348usize,
        concat!(
            "Offset of field: ",
            stringify!(layer),
            "::",
            stringify!(saturation)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<layer>())).exposure as *const _ as usize },
        352usize,
        concat!(
            "Offset of field: ",
            stringify!(layer),
            "::",
            stringify!(exposure)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<layer>())).shift as *const _ as usize },
        356usize,
        concat!(
            "Offset of field: ",
            stringify!(layer),
            "::",
            stringify!(shift)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<layer>())).ratio as *const _ as usize },
        360usize,
        concat!(
            "Offset of field: ",
            stringify!(layer),
            "::",
            stringify!(ratio)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<layer>())).learning_rate_scale as *const _ as usize },
        364usize,
        concat!(
            "Offset of field: ",
            stringify!(layer),
            "::",
            stringify!(learning_rate_scale)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<layer>())).clip as *const _ as usize },
        368usize,
        concat!(
            "Offset of field: ",
            stringify!(layer),
            "::",
            stringify!(clip)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<layer>())).focal_loss as *const _ as usize },
        372usize,
        concat!(
            "Offset of field: ",
            stringify!(layer),
            "::",
            stringify!(focal_loss)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<layer>())).classes_multipliers as *const _ as usize },
        376usize,
        concat!(
            "Offset of field: ",
            stringify!(layer),
            "::",
            stringify!(classes_multipliers)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<layer>())).label_smooth_eps as *const _ as usize },
        384usize,
        concat!(
            "Offset of field: ",
            stringify!(layer),
            "::",
            stringify!(label_smooth_eps)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<layer>())).noloss as *const _ as usize },
        388usize,
        concat!(
            "Offset of field: ",
            stringify!(layer),
            "::",
            stringify!(noloss)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<layer>())).softmax as *const _ as usize },
        392usize,
        concat!(
            "Offset of field: ",
            stringify!(layer),
            "::",
            stringify!(softmax)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<layer>())).classes as *const _ as usize },
        396usize,
        concat!(
            "Offset of field: ",
            stringify!(layer),
            "::",
            stringify!(classes)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<layer>())).detection as *const _ as usize },
        400usize,
        concat!(
            "Offset of field: ",
            stringify!(layer),
            "::",
            stringify!(detection)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<layer>())).embedding_layer_id as *const _ as usize },
        404usize,
        concat!(
            "Offset of field: ",
            stringify!(layer),
            "::",
            stringify!(embedding_layer_id)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<layer>())).embedding_output as *const _ as usize },
        408usize,
        concat!(
            "Offset of field: ",
            stringify!(layer),
            "::",
            stringify!(embedding_output)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<layer>())).embedding_size as *const _ as usize },
        416usize,
        concat!(
            "Offset of field: ",
            stringify!(layer),
            "::",
            stringify!(embedding_size)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<layer>())).sim_thresh as *const _ as usize },
        420usize,
        concat!(
            "Offset of field: ",
            stringify!(layer),
            "::",
            stringify!(sim_thresh)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<layer>())).track_history_size as *const _ as usize },
        424usize,
        concat!(
            "Offset of field: ",
            stringify!(layer),
            "::",
            stringify!(track_history_size)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<layer>())).dets_for_track as *const _ as usize },
        428usize,
        concat!(
            "Offset of field: ",
            stringify!(layer),
            "::",
            stringify!(dets_for_track)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<layer>())).dets_for_show as *const _ as usize },
        432usize,
        concat!(
            "Offset of field: ",
            stringify!(layer),
            "::",
            stringify!(dets_for_show)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<layer>())).track_ciou_norm as *const _ as usize },
        436usize,
        concat!(
            "Offset of field: ",
            stringify!(layer),
            "::",
            stringify!(track_ciou_norm)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<layer>())).coords as *const _ as usize },
        440usize,
        concat!(
            "Offset of field: ",
            stringify!(layer),
            "::",
            stringify!(coords)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<layer>())).background as *const _ as usize },
        444usize,
        concat!(
            "Offset of field: ",
            stringify!(layer),
            "::",
            stringify!(background)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<layer>())).rescore as *const _ as usize },
        448usize,
        concat!(
            "Offset of field: ",
            stringify!(layer),
            "::",
            stringify!(rescore)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<layer>())).objectness as *const _ as usize },
        452usize,
        concat!(
            "Offset of field: ",
            stringify!(layer),
            "::",
            stringify!(objectness)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<layer>())).does_cost as *const _ as usize },
        456usize,
        concat!(
            "Offset of field: ",
            stringify!(layer),
            "::",
            stringify!(does_cost)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<layer>())).joint as *const _ as usize },
        460usize,
        concat!(
            "Offset of field: ",
            stringify!(layer),
            "::",
            stringify!(joint)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<layer>())).noadjust as *const _ as usize },
        464usize,
        concat!(
            "Offset of field: ",
            stringify!(layer),
            "::",
            stringify!(noadjust)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<layer>())).reorg as *const _ as usize },
        468usize,
        concat!(
            "Offset of field: ",
            stringify!(layer),
            "::",
            stringify!(reorg)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<layer>())).log as *const _ as usize },
        472usize,
        concat!(
            "Offset of field: ",
            stringify!(layer),
            "::",
            stringify!(log)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<layer>())).tanh as *const _ as usize },
        476usize,
        concat!(
            "Offset of field: ",
            stringify!(layer),
            "::",
            stringify!(tanh)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<layer>())).mask as *const _ as usize },
        480usize,
        concat!(
            "Offset of field: ",
            stringify!(layer),
            "::",
            stringify!(mask)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<layer>())).total as *const _ as usize },
        488usize,
        concat!(
            "Offset of field: ",
            stringify!(layer),
            "::",
            stringify!(total)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<layer>())).bflops as *const _ as usize },
        492usize,
        concat!(
            "Offset of field: ",
            stringify!(layer),
            "::",
            stringify!(bflops)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<layer>())).adam as *const _ as usize },
        496usize,
        concat!(
            "Offset of field: ",
            stringify!(layer),
            "::",
            stringify!(adam)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<layer>())).B1 as *const _ as usize },
        500usize,
        concat!("Offset of field: ", stringify!(layer), "::", stringify!(B1))
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<layer>())).B2 as *const _ as usize },
        504usize,
        concat!("Offset of field: ", stringify!(layer), "::", stringify!(B2))
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<layer>())).eps as *const _ as usize },
        508usize,
        concat!(
            "Offset of field: ",
            stringify!(layer),
            "::",
            stringify!(eps)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<layer>())).t as *const _ as usize },
        512usize,
        concat!("Offset of field: ", stringify!(layer), "::", stringify!(t))
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<layer>())).alpha as *const _ as usize },
        516usize,
        concat!(
            "Offset of field: ",
            stringify!(layer),
            "::",
            stringify!(alpha)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<layer>())).beta as *const _ as usize },
        520usize,
        concat!(
            "Offset of field: ",
            stringify!(layer),
            "::",
            stringify!(beta)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<layer>())).kappa as *const _ as usize },
        524usize,
        concat!(
            "Offset of field: ",
            stringify!(layer),
            "::",
            stringify!(kappa)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<layer>())).coord_scale as *const _ as usize },
        528usize,
        concat!(
            "Offset of field: ",
            stringify!(layer),
            "::",
            stringify!(coord_scale)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<layer>())).object_scale as *const _ as usize },
        532usize,
        concat!(
            "Offset of field: ",
            stringify!(layer),
            "::",
            stringify!(object_scale)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<layer>())).noobject_scale as *const _ as usize },
        536usize,
        concat!(
            "Offset of field: ",
            stringify!(layer),
            "::",
            stringify!(noobject_scale)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<layer>())).mask_scale as *const _ as usize },
        540usize,
        concat!(
            "Offset of field: ",
            stringify!(layer),
            "::",
            stringify!(mask_scale)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<layer>())).class_scale as *const _ as usize },
        544usize,
        concat!(
            "Offset of field: ",
            stringify!(layer),
            "::",
            stringify!(class_scale)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<layer>())).bias_match as *const _ as usize },
        548usize,
        concat!(
            "Offset of field: ",
            stringify!(layer),
            "::",
            stringify!(bias_match)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<layer>())).random as *const _ as usize },
        552usize,
        concat!(
            "Offset of field: ",
            stringify!(layer),
            "::",
            stringify!(random)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<layer>())).ignore_thresh as *const _ as usize },
        556usize,
        concat!(
            "Offset of field: ",
            stringify!(layer),
            "::",
            stringify!(ignore_thresh)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<layer>())).truth_thresh as *const _ as usize },
        560usize,
        concat!(
            "Offset of field: ",
            stringify!(layer),
            "::",
            stringify!(truth_thresh)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<layer>())).iou_thresh as *const _ as usize },
        564usize,
        concat!(
            "Offset of field: ",
            stringify!(layer),
            "::",
            stringify!(iou_thresh)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<layer>())).thresh as *const _ as usize },
        568usize,
        concat!(
            "Offset of field: ",
            stringify!(layer),
            "::",
            stringify!(thresh)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<layer>())).focus as *const _ as usize },
        572usize,
        concat!(
            "Offset of field: ",
            stringify!(layer),
            "::",
            stringify!(focus)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<layer>())).classfix as *const _ as usize },
        576usize,
        concat!(
            "Offset of field: ",
            stringify!(layer),
            "::",
            stringify!(classfix)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<layer>())).absolute as *const _ as usize },
        580usize,
        concat!(
            "Offset of field: ",
            stringify!(layer),
            "::",
            stringify!(absolute)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<layer>())).assisted_excitation as *const _ as usize },
        584usize,
        concat!(
            "Offset of field: ",
            stringify!(layer),
            "::",
            stringify!(assisted_excitation)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<layer>())).onlyforward as *const _ as usize },
        588usize,
        concat!(
            "Offset of field: ",
            stringify!(layer),
            "::",
            stringify!(onlyforward)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<layer>())).stopbackward as *const _ as usize },
        592usize,
        concat!(
            "Offset of field: ",
            stringify!(layer),
            "::",
            stringify!(stopbackward)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<layer>())).train_only_bn as *const _ as usize },
        596usize,
        concat!(
            "Offset of field: ",
            stringify!(layer),
            "::",
            stringify!(train_only_bn)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<layer>())).dont_update as *const _ as usize },
        600usize,
        concat!(
            "Offset of field: ",
            stringify!(layer),
            "::",
            stringify!(dont_update)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<layer>())).burnin_update as *const _ as usize },
        604usize,
        concat!(
            "Offset of field: ",
            stringify!(layer),
            "::",
            stringify!(burnin_update)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<layer>())).dontload as *const _ as usize },
        608usize,
        concat!(
            "Offset of field: ",
            stringify!(layer),
            "::",
            stringify!(dontload)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<layer>())).dontsave as *const _ as usize },
        612usize,
        concat!(
            "Offset of field: ",
            stringify!(layer),
            "::",
            stringify!(dontsave)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<layer>())).dontloadscales as *const _ as usize },
        616usize,
        concat!(
            "Offset of field: ",
            stringify!(layer),
            "::",
            stringify!(dontloadscales)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<layer>())).numload as *const _ as usize },
        620usize,
        concat!(
            "Offset of field: ",
            stringify!(layer),
            "::",
            stringify!(numload)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<layer>())).temperature as *const _ as usize },
        624usize,
        concat!(
            "Offset of field: ",
            stringify!(layer),
            "::",
            stringify!(temperature)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<layer>())).probability as *const _ as usize },
        628usize,
        concat!(
            "Offset of field: ",
            stringify!(layer),
            "::",
            stringify!(probability)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<layer>())).dropblock_size_rel as *const _ as usize },
        632usize,
        concat!(
            "Offset of field: ",
            stringify!(layer),
            "::",
            stringify!(dropblock_size_rel)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<layer>())).dropblock_size_abs as *const _ as usize },
        636usize,
        concat!(
            "Offset of field: ",
            stringify!(layer),
            "::",
            stringify!(dropblock_size_abs)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<layer>())).dropblock as *const _ as usize },
        640usize,
        concat!(
            "Offset of field: ",
            stringify!(layer),
            "::",
            stringify!(dropblock)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<layer>())).scale as *const _ as usize },
        644usize,
        concat!(
            "Offset of field: ",
            stringify!(layer),
            "::",
            stringify!(scale)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<layer>())).receptive_w as *const _ as usize },
        648usize,
        concat!(
            "Offset of field: ",
            stringify!(layer),
            "::",
            stringify!(receptive_w)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<layer>())).receptive_h as *const _ as usize },
        652usize,
        concat!(
            "Offset of field: ",
            stringify!(layer),
            "::",
            stringify!(receptive_h)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<layer>())).receptive_w_scale as *const _ as usize },
        656usize,
        concat!(
            "Offset of field: ",
            stringify!(layer),
            "::",
            stringify!(receptive_w_scale)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<layer>())).receptive_h_scale as *const _ as usize },
        660usize,
        concat!(
            "Offset of field: ",
            stringify!(layer),
            "::",
            stringify!(receptive_h_scale)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<layer>())).cweights as *const _ as usize },
        664usize,
        concat!(
            "Offset of field: ",
            stringify!(layer),
            "::",
            stringify!(cweights)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<layer>())).indexes as *const _ as usize },
        672usize,
        concat!(
            "Offset of field: ",
            stringify!(layer),
            "::",
            stringify!(indexes)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<layer>())).input_layers as *const _ as usize },
        680usize,
        concat!(
            "Offset of field: ",
            stringify!(layer),
            "::",
            stringify!(input_layers)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<layer>())).input_sizes as *const _ as usize },
        688usize,
        concat!(
            "Offset of field: ",
            stringify!(layer),
            "::",
            stringify!(input_sizes)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<layer>())).layers_output as *const _ as usize },
        696usize,
        concat!(
            "Offset of field: ",
            stringify!(layer),
            "::",
            stringify!(layers_output)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<layer>())).layers_delta as *const _ as usize },
        704usize,
        concat!(
            "Offset of field: ",
            stringify!(layer),
            "::",
            stringify!(layers_delta)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<layer>())).weights_type as *const _ as usize },
        712usize,
        concat!(
            "Offset of field: ",
            stringify!(layer),
            "::",
            stringify!(weights_type)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<layer>())).weights_normalization as *const _ as usize },
        716usize,
        concat!(
            "Offset of field: ",
            stringify!(layer),
            "::",
            stringify!(weights_normalization)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<layer>())).map as *const _ as usize },
        720usize,
        concat!(
            "Offset of field: ",
            stringify!(layer),
            "::",
            stringify!(map)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<layer>())).counts as *const _ as usize },
        728usize,
        concat!(
            "Offset of field: ",
            stringify!(layer),
            "::",
            stringify!(counts)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<layer>())).sums as *const _ as usize },
        736usize,
        concat!(
            "Offset of field: ",
            stringify!(layer),
            "::",
            stringify!(sums)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<layer>())).rand as *const _ as usize },
        744usize,
        concat!(
            "Offset of field: ",
            stringify!(layer),
            "::",
            stringify!(rand)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<layer>())).cost as *const _ as usize },
        752usize,
        concat!(
            "Offset of field: ",
            stringify!(layer),
            "::",
            stringify!(cost)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<layer>())).labels as *const _ as usize },
        760usize,
        concat!(
            "Offset of field: ",
            stringify!(layer),
            "::",
            stringify!(labels)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<layer>())).class_ids as *const _ as usize },
        768usize,
        concat!(
            "Offset of field: ",
            stringify!(layer),
            "::",
            stringify!(class_ids)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<layer>())).contrastive_neg_max as *const _ as usize },
        776usize,
        concat!(
            "Offset of field: ",
            stringify!(layer),
            "::",
            stringify!(contrastive_neg_max)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<layer>())).cos_sim as *const _ as usize },
        784usize,
        concat!(
            "Offset of field: ",
            stringify!(layer),
            "::",
            stringify!(cos_sim)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<layer>())).exp_cos_sim as *const _ as usize },
        792usize,
        concat!(
            "Offset of field: ",
            stringify!(layer),
            "::",
            stringify!(exp_cos_sim)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<layer>())).p_constrastive as *const _ as usize },
        800usize,
        concat!(
            "Offset of field: ",
            stringify!(layer),
            "::",
            stringify!(p_constrastive)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<layer>())).contrast_p_gpu as *const _ as usize },
        808usize,
        concat!(
            "Offset of field: ",
            stringify!(layer),
            "::",
            stringify!(contrast_p_gpu)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<layer>())).state as *const _ as usize },
        816usize,
        concat!(
            "Offset of field: ",
            stringify!(layer),
            "::",
            stringify!(state)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<layer>())).prev_state as *const _ as usize },
        824usize,
        concat!(
            "Offset of field: ",
            stringify!(layer),
            "::",
            stringify!(prev_state)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<layer>())).forgot_state as *const _ as usize },
        832usize,
        concat!(
            "Offset of field: ",
            stringify!(layer),
            "::",
            stringify!(forgot_state)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<layer>())).forgot_delta as *const _ as usize },
        840usize,
        concat!(
            "Offset of field: ",
            stringify!(layer),
            "::",
            stringify!(forgot_delta)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<layer>())).state_delta as *const _ as usize },
        848usize,
        concat!(
            "Offset of field: ",
            stringify!(layer),
            "::",
            stringify!(state_delta)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<layer>())).combine_cpu as *const _ as usize },
        856usize,
        concat!(
            "Offset of field: ",
            stringify!(layer),
            "::",
            stringify!(combine_cpu)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<layer>())).combine_delta_cpu as *const _ as usize },
        864usize,
        concat!(
            "Offset of field: ",
            stringify!(layer),
            "::",
            stringify!(combine_delta_cpu)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<layer>())).concat as *const _ as usize },
        872usize,
        concat!(
            "Offset of field: ",
            stringify!(layer),
            "::",
            stringify!(concat)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<layer>())).concat_delta as *const _ as usize },
        880usize,
        concat!(
            "Offset of field: ",
            stringify!(layer),
            "::",
            stringify!(concat_delta)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<layer>())).binary_weights as *const _ as usize },
        888usize,
        concat!(
            "Offset of field: ",
            stringify!(layer),
            "::",
            stringify!(binary_weights)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<layer>())).biases as *const _ as usize },
        896usize,
        concat!(
            "Offset of field: ",
            stringify!(layer),
            "::",
            stringify!(biases)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<layer>())).bias_updates as *const _ as usize },
        904usize,
        concat!(
            "Offset of field: ",
            stringify!(layer),
            "::",
            stringify!(bias_updates)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<layer>())).scales as *const _ as usize },
        912usize,
        concat!(
            "Offset of field: ",
            stringify!(layer),
            "::",
            stringify!(scales)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<layer>())).scale_updates as *const _ as usize },
        920usize,
        concat!(
            "Offset of field: ",
            stringify!(layer),
            "::",
            stringify!(scale_updates)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<layer>())).weights_ema as *const _ as usize },
        928usize,
        concat!(
            "Offset of field: ",
            stringify!(layer),
            "::",
            stringify!(weights_ema)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<layer>())).biases_ema as *const _ as usize },
        936usize,
        concat!(
            "Offset of field: ",
            stringify!(layer),
            "::",
            stringify!(biases_ema)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<layer>())).scales_ema as *const _ as usize },
        944usize,
        concat!(
            "Offset of field: ",
            stringify!(layer),
            "::",
            stringify!(scales_ema)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<layer>())).weights as *const _ as usize },
        952usize,
        concat!(
            "Offset of field: ",
            stringify!(layer),
            "::",
            stringify!(weights)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<layer>())).weight_updates as *const _ as usize },
        960usize,
        concat!(
            "Offset of field: ",
            stringify!(layer),
            "::",
            stringify!(weight_updates)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<layer>())).scale_x_y as *const _ as usize },
        968usize,
        concat!(
            "Offset of field: ",
            stringify!(layer),
            "::",
            stringify!(scale_x_y)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<layer>())).objectness_smooth as *const _ as usize },
        972usize,
        concat!(
            "Offset of field: ",
            stringify!(layer),
            "::",
            stringify!(objectness_smooth)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<layer>())).new_coords as *const _ as usize },
        976usize,
        concat!(
            "Offset of field: ",
            stringify!(layer),
            "::",
            stringify!(new_coords)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<layer>())).show_details as *const _ as usize },
        980usize,
        concat!(
            "Offset of field: ",
            stringify!(layer),
            "::",
            stringify!(show_details)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<layer>())).max_delta as *const _ as usize },
        984usize,
        concat!(
            "Offset of field: ",
            stringify!(layer),
            "::",
            stringify!(max_delta)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<layer>())).uc_normalizer as *const _ as usize },
        988usize,
        concat!(
            "Offset of field: ",
            stringify!(layer),
            "::",
            stringify!(uc_normalizer)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<layer>())).iou_normalizer as *const _ as usize },
        992usize,
        concat!(
            "Offset of field: ",
            stringify!(layer),
            "::",
            stringify!(iou_normalizer)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<layer>())).obj_normalizer as *const _ as usize },
        996usize,
        concat!(
            "Offset of field: ",
            stringify!(layer),
            "::",
            stringify!(obj_normalizer)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<layer>())).cls_normalizer as *const _ as usize },
        1000usize,
        concat!(
            "Offset of field: ",
            stringify!(layer),
            "::",
            stringify!(cls_normalizer)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<layer>())).delta_normalizer as *const _ as usize },
        1004usize,
        concat!(
            "Offset of field: ",
            stringify!(layer),
            "::",
            stringify!(delta_normalizer)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<layer>())).iou_loss as *const _ as usize },
        1008usize,
        concat!(
            "Offset of field: ",
            stringify!(layer),
            "::",
            stringify!(iou_loss)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<layer>())).iou_thresh_kind as *const _ as usize },
        1012usize,
        concat!(
            "Offset of field: ",
            stringify!(layer),
            "::",
            stringify!(iou_thresh_kind)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<layer>())).nms_kind as *const _ as usize },
        1016usize,
        concat!(
            "Offset of field: ",
            stringify!(layer),
            "::",
            stringify!(nms_kind)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<layer>())).beta_nms as *const _ as usize },
        1020usize,
        concat!(
            "Offset of field: ",
            stringify!(layer),
            "::",
            stringify!(beta_nms)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<layer>())).yolo_point as *const _ as usize },
        1024usize,
        concat!(
            "Offset of field: ",
            stringify!(layer),
            "::",
            stringify!(yolo_point)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<layer>())).align_bit_weights_gpu as *const _ as usize },
        1032usize,
        concat!(
            "Offset of field: ",
            stringify!(layer),
            "::",
            stringify!(align_bit_weights_gpu)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<layer>())).mean_arr_gpu as *const _ as usize },
        1040usize,
        concat!(
            "Offset of field: ",
            stringify!(layer),
            "::",
            stringify!(mean_arr_gpu)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<layer>())).align_workspace_gpu as *const _ as usize },
        1048usize,
        concat!(
            "Offset of field: ",
            stringify!(layer),
            "::",
            stringify!(align_workspace_gpu)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<layer>())).transposed_align_workspace_gpu as *const _ as usize
        },
        1056usize,
        concat!(
            "Offset of field: ",
            stringify!(layer),
            "::",
            stringify!(transposed_align_workspace_gpu)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<layer>())).align_workspace_size as *const _ as usize },
        1064usize,
        concat!(
            "Offset of field: ",
            stringify!(layer),
            "::",
            stringify!(align_workspace_size)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<layer>())).align_bit_weights as *const _ as usize },
        1072usize,
        concat!(
            "Offset of field: ",
            stringify!(layer),
            "::",
            stringify!(align_bit_weights)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<layer>())).mean_arr as *const _ as usize },
        1080usize,
        concat!(
            "Offset of field: ",
            stringify!(layer),
            "::",
            stringify!(mean_arr)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<layer>())).align_bit_weights_size as *const _ as usize },
        1088usize,
        concat!(
            "Offset of field: ",
            stringify!(layer),
            "::",
            stringify!(align_bit_weights_size)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<layer>())).lda_align as *const _ as usize },
        1092usize,
        concat!(
            "Offset of field: ",
            stringify!(layer),
            "::",
            stringify!(lda_align)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<layer>())).new_lda as *const _ as usize },
        1096usize,
        concat!(
            "Offset of field: ",
            stringify!(layer),
            "::",
            stringify!(new_lda)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<layer>())).bit_align as *const _ as usize },
        1100usize,
        concat!(
            "Offset of field: ",
            stringify!(layer),
            "::",
            stringify!(bit_align)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<layer>())).col_image as *const _ as usize },
        1104usize,
        concat!(
            "Offset of field: ",
            stringify!(layer),
            "::",
            stringify!(col_image)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<layer>())).delta as *const _ as usize },
        1112usize,
        concat!(
            "Offset of field: ",
            stringify!(layer),
            "::",
            stringify!(delta)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<layer>())).output as *const _ as usize },
        1120usize,
        concat!(
            "Offset of field: ",
            stringify!(layer),
            "::",
            stringify!(output)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<layer>())).activation_input as *const _ as usize },
        1128usize,
        concat!(
            "Offset of field: ",
            stringify!(layer),
            "::",
            stringify!(activation_input)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<layer>())).delta_pinned as *const _ as usize },
        1136usize,
        concat!(
            "Offset of field: ",
            stringify!(layer),
            "::",
            stringify!(delta_pinned)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<layer>())).output_pinned as *const _ as usize },
        1140usize,
        concat!(
            "Offset of field: ",
            stringify!(layer),
            "::",
            stringify!(output_pinned)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<layer>())).loss as *const _ as usize },
        1144usize,
        concat!(
            "Offset of field: ",
            stringify!(layer),
            "::",
            stringify!(loss)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<layer>())).squared as *const _ as usize },
        1152usize,
        concat!(
            "Offset of field: ",
            stringify!(layer),
            "::",
            stringify!(squared)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<layer>())).norms as *const _ as usize },
        1160usize,
        concat!(
            "Offset of field: ",
            stringify!(layer),
            "::",
            stringify!(norms)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<layer>())).spatial_mean as *const _ as usize },
        1168usize,
        concat!(
            "Offset of field: ",
            stringify!(layer),
            "::",
            stringify!(spatial_mean)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<layer>())).mean as *const _ as usize },
        1176usize,
        concat!(
            "Offset of field: ",
            stringify!(layer),
            "::",
            stringify!(mean)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<layer>())).variance as *const _ as usize },
        1184usize,
        concat!(
            "Offset of field: ",
            stringify!(layer),
            "::",
            stringify!(variance)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<layer>())).mean_delta as *const _ as usize },
        1192usize,
        concat!(
            "Offset of field: ",
            stringify!(layer),
            "::",
            stringify!(mean_delta)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<layer>())).variance_delta as *const _ as usize },
        1200usize,
        concat!(
            "Offset of field: ",
            stringify!(layer),
            "::",
            stringify!(variance_delta)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<layer>())).rolling_mean as *const _ as usize },
        1208usize,
        concat!(
            "Offset of field: ",
            stringify!(layer),
            "::",
            stringify!(rolling_mean)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<layer>())).rolling_variance as *const _ as usize },
        1216usize,
        concat!(
            "Offset of field: ",
            stringify!(layer),
            "::",
            stringify!(rolling_variance)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<layer>())).x as *const _ as usize },
        1224usize,
        concat!("Offset of field: ", stringify!(layer), "::", stringify!(x))
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<layer>())).x_norm as *const _ as usize },
        1232usize,
        concat!(
            "Offset of field: ",
            stringify!(layer),
            "::",
            stringify!(x_norm)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<layer>())).m as *const _ as usize },
        1240usize,
        concat!("Offset of field: ", stringify!(layer), "::", stringify!(m))
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<layer>())).v as *const _ as usize },
        1248usize,
        concat!("Offset of field: ", stringify!(layer), "::", stringify!(v))
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<layer>())).bias_m as *const _ as usize },
        1256usize,
        concat!(
            "Offset of field: ",
            stringify!(layer),
            "::",
            stringify!(bias_m)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<layer>())).bias_v as *const _ as usize },
        1264usize,
        concat!(
            "Offset of field: ",
            stringify!(layer),
            "::",
            stringify!(bias_v)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<layer>())).scale_m as *const _ as usize },
        1272usize,
        concat!(
            "Offset of field: ",
            stringify!(layer),
            "::",
            stringify!(scale_m)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<layer>())).scale_v as *const _ as usize },
        1280usize,
        concat!(
            "Offset of field: ",
            stringify!(layer),
            "::",
            stringify!(scale_v)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<layer>())).z_cpu as *const _ as usize },
        1288usize,
        concat!(
            "Offset of field: ",
            stringify!(layer),
            "::",
            stringify!(z_cpu)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<layer>())).r_cpu as *const _ as usize },
        1296usize,
        concat!(
            "Offset of field: ",
            stringify!(layer),
            "::",
            stringify!(r_cpu)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<layer>())).h_cpu as *const _ as usize },
        1304usize,
        concat!(
            "Offset of field: ",
            stringify!(layer),
            "::",
            stringify!(h_cpu)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<layer>())).stored_h_cpu as *const _ as usize },
        1312usize,
        concat!(
            "Offset of field: ",
            stringify!(layer),
            "::",
            stringify!(stored_h_cpu)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<layer>())).prev_state_cpu as *const _ as usize },
        1320usize,
        concat!(
            "Offset of field: ",
            stringify!(layer),
            "::",
            stringify!(prev_state_cpu)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<layer>())).temp_cpu as *const _ as usize },
        1328usize,
        concat!(
            "Offset of field: ",
            stringify!(layer),
            "::",
            stringify!(temp_cpu)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<layer>())).temp2_cpu as *const _ as usize },
        1336usize,
        concat!(
            "Offset of field: ",
            stringify!(layer),
            "::",
            stringify!(temp2_cpu)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<layer>())).temp3_cpu as *const _ as usize },
        1344usize,
        concat!(
            "Offset of field: ",
            stringify!(layer),
            "::",
            stringify!(temp3_cpu)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<layer>())).dh_cpu as *const _ as usize },
        1352usize,
        concat!(
            "Offset of field: ",
            stringify!(layer),
            "::",
            stringify!(dh_cpu)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<layer>())).hh_cpu as *const _ as usize },
        1360usize,
        concat!(
            "Offset of field: ",
            stringify!(layer),
            "::",
            stringify!(hh_cpu)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<layer>())).prev_cell_cpu as *const _ as usize },
        1368usize,
        concat!(
            "Offset of field: ",
            stringify!(layer),
            "::",
            stringify!(prev_cell_cpu)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<layer>())).cell_cpu as *const _ as usize },
        1376usize,
        concat!(
            "Offset of field: ",
            stringify!(layer),
            "::",
            stringify!(cell_cpu)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<layer>())).f_cpu as *const _ as usize },
        1384usize,
        concat!(
            "Offset of field: ",
            stringify!(layer),
            "::",
            stringify!(f_cpu)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<layer>())).i_cpu as *const _ as usize },
        1392usize,
        concat!(
            "Offset of field: ",
            stringify!(layer),
            "::",
            stringify!(i_cpu)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<layer>())).g_cpu as *const _ as usize },
        1400usize,
        concat!(
            "Offset of field: ",
            stringify!(layer),
            "::",
            stringify!(g_cpu)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<layer>())).o_cpu as *const _ as usize },
        1408usize,
        concat!(
            "Offset of field: ",
            stringify!(layer),
            "::",
            stringify!(o_cpu)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<layer>())).c_cpu as *const _ as usize },
        1416usize,
        concat!(
            "Offset of field: ",
            stringify!(layer),
            "::",
            stringify!(c_cpu)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<layer>())).stored_c_cpu as *const _ as usize },
        1424usize,
        concat!(
            "Offset of field: ",
            stringify!(layer),
            "::",
            stringify!(stored_c_cpu)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<layer>())).dc_cpu as *const _ as usize },
        1432usize,
        concat!(
            "Offset of field: ",
            stringify!(layer),
            "::",
            stringify!(dc_cpu)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<layer>())).binary_input as *const _ as usize },
        1440usize,
        concat!(
            "Offset of field: ",
            stringify!(layer),
            "::",
            stringify!(binary_input)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<layer>())).bin_re_packed_input as *const _ as usize },
        1448usize,
        concat!(
            "Offset of field: ",
            stringify!(layer),
            "::",
            stringify!(bin_re_packed_input)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<layer>())).t_bit_input as *const _ as usize },
        1456usize,
        concat!(
            "Offset of field: ",
            stringify!(layer),
            "::",
            stringify!(t_bit_input)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<layer>())).input_layer as *const _ as usize },
        1464usize,
        concat!(
            "Offset of field: ",
            stringify!(layer),
            "::",
            stringify!(input_layer)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<layer>())).self_layer as *const _ as usize },
        1472usize,
        concat!(
            "Offset of field: ",
            stringify!(layer),
            "::",
            stringify!(self_layer)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<layer>())).output_layer as *const _ as usize },
        1480usize,
        concat!(
            "Offset of field: ",
            stringify!(layer),
            "::",
            stringify!(output_layer)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<layer>())).reset_layer as *const _ as usize },
        1488usize,
        concat!(
            "Offset of field: ",
            stringify!(layer),
            "::",
            stringify!(reset_layer)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<layer>())).update_layer as *const _ as usize },
        1496usize,
        concat!(
            "Offset of field: ",
            stringify!(layer),
            "::",
            stringify!(update_layer)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<layer>())).state_layer as *const _ as usize },
        1504usize,
        concat!(
            "Offset of field: ",
            stringify!(layer),
            "::",
            stringify!(state_layer)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<layer>())).input_gate_layer as *const _ as usize },
        1512usize,
        concat!(
            "Offset of field: ",
            stringify!(layer),
            "::",
            stringify!(input_gate_layer)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<layer>())).state_gate_layer as *const _ as usize },
        1520usize,
        concat!(
            "Offset of field: ",
            stringify!(layer),
            "::",
            stringify!(state_gate_layer)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<layer>())).input_save_layer as *const _ as usize },
        1528usize,
        concat!(
            "Offset of field: ",
            stringify!(layer),
            "::",
            stringify!(input_save_layer)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<layer>())).state_save_layer as *const _ as usize },
        1536usize,
        concat!(
            "Offset of field: ",
            stringify!(layer),
            "::",
            stringify!(state_save_layer)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<layer>())).input_state_layer as *const _ as usize },
        1544usize,
        concat!(
            "Offset of field: ",
            stringify!(layer),
            "::",
            stringify!(input_state_layer)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<layer>())).state_state_layer as *const _ as usize },
        1552usize,
        concat!(
            "Offset of field: ",
            stringify!(layer),
            "::",
            stringify!(state_state_layer)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<layer>())).input_z_layer as *const _ as usize },
        1560usize,
        concat!(
            "Offset of field: ",
            stringify!(layer),
            "::",
            stringify!(input_z_layer)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<layer>())).state_z_layer as *const _ as usize },
        1568usize,
        concat!(
            "Offset of field: ",
            stringify!(layer),
            "::",
            stringify!(state_z_layer)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<layer>())).input_r_layer as *const _ as usize },
        1576usize,
        concat!(
            "Offset of field: ",
            stringify!(layer),
            "::",
            stringify!(input_r_layer)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<layer>())).state_r_layer as *const _ as usize },
        1584usize,
        concat!(
            "Offset of field: ",
            stringify!(layer),
            "::",
            stringify!(state_r_layer)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<layer>())).input_h_layer as *const _ as usize },
        1592usize,
        concat!(
            "Offset of field: ",
            stringify!(layer),
            "::",
            stringify!(input_h_layer)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<layer>())).state_h_layer as *const _ as usize },
        1600usize,
        concat!(
            "Offset of field: ",
            stringify!(layer),
            "::",
            stringify!(state_h_layer)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<layer>())).wz as *const _ as usize },
        1608usize,
        concat!("Offset of field: ", stringify!(layer), "::", stringify!(wz))
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<layer>())).uz as *const _ as usize },
        1616usize,
        concat!("Offset of field: ", stringify!(layer), "::", stringify!(uz))
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<layer>())).wr as *const _ as usize },
        1624usize,
        concat!("Offset of field: ", stringify!(layer), "::", stringify!(wr))
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<layer>())).ur as *const _ as usize },
        1632usize,
        concat!("Offset of field: ", stringify!(layer), "::", stringify!(ur))
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<layer>())).wh as *const _ as usize },
        1640usize,
        concat!("Offset of field: ", stringify!(layer), "::", stringify!(wh))
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<layer>())).uh as *const _ as usize },
        1648usize,
        concat!("Offset of field: ", stringify!(layer), "::", stringify!(uh))
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<layer>())).uo as *const _ as usize },
        1656usize,
        concat!("Offset of field: ", stringify!(layer), "::", stringify!(uo))
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<layer>())).wo as *const _ as usize },
        1664usize,
        concat!("Offset of field: ", stringify!(layer), "::", stringify!(wo))
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<layer>())).vo as *const _ as usize },
        1672usize,
        concat!("Offset of field: ", stringify!(layer), "::", stringify!(vo))
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<layer>())).uf as *const _ as usize },
        1680usize,
        concat!("Offset of field: ", stringify!(layer), "::", stringify!(uf))
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<layer>())).wf as *const _ as usize },
        1688usize,
        concat!("Offset of field: ", stringify!(layer), "::", stringify!(wf))
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<layer>())).vf as *const _ as usize },
        1696usize,
        concat!("Offset of field: ", stringify!(layer), "::", stringify!(vf))
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<layer>())).ui as *const _ as usize },
        1704usize,
        concat!("Offset of field: ", stringify!(layer), "::", stringify!(ui))
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<layer>())).wi as *const _ as usize },
        1712usize,
        concat!("Offset of field: ", stringify!(layer), "::", stringify!(wi))
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<layer>())).vi as *const _ as usize },
        1720usize,
        concat!("Offset of field: ", stringify!(layer), "::", stringify!(vi))
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<layer>())).ug as *const _ as usize },
        1728usize,
        concat!("Offset of field: ", stringify!(layer), "::", stringify!(ug))
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<layer>())).wg as *const _ as usize },
        1736usize,
        concat!("Offset of field: ", stringify!(layer), "::", stringify!(wg))
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<layer>())).softmax_tree as *const _ as usize },
        1744usize,
        concat!(
            "Offset of field: ",
            stringify!(layer),
            "::",
            stringify!(softmax_tree)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<layer>())).workspace_size as *const _ as usize },
        1752usize,
        concat!(
            "Offset of field: ",
            stringify!(layer),
            "::",
            stringify!(workspace_size)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<layer>())).indexes_gpu as *const _ as usize },
        1760usize,
        concat!(
            "Offset of field: ",
            stringify!(layer),
            "::",
            stringify!(indexes_gpu)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<layer>())).stream as *const _ as usize },
        1768usize,
        concat!(
            "Offset of field: ",
            stringify!(layer),
            "::",
            stringify!(stream)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<layer>())).wait_stream_id as *const _ as usize },
        1772usize,
        concat!(
            "Offset of field: ",
            stringify!(layer),
            "::",
            stringify!(wait_stream_id)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<layer>())).z_gpu as *const _ as usize },
        1776usize,
        concat!(
            "Offset of field: ",
            stringify!(layer),
            "::",
            stringify!(z_gpu)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<layer>())).r_gpu as *const _ as usize },
        1784usize,
        concat!(
            "Offset of field: ",
            stringify!(layer),
            "::",
            stringify!(r_gpu)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<layer>())).h_gpu as *const _ as usize },
        1792usize,
        concat!(
            "Offset of field: ",
            stringify!(layer),
            "::",
            stringify!(h_gpu)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<layer>())).stored_h_gpu as *const _ as usize },
        1800usize,
        concat!(
            "Offset of field: ",
            stringify!(layer),
            "::",
            stringify!(stored_h_gpu)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<layer>())).bottelneck_hi_gpu as *const _ as usize },
        1808usize,
        concat!(
            "Offset of field: ",
            stringify!(layer),
            "::",
            stringify!(bottelneck_hi_gpu)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<layer>())).bottelneck_delta_gpu as *const _ as usize },
        1816usize,
        concat!(
            "Offset of field: ",
            stringify!(layer),
            "::",
            stringify!(bottelneck_delta_gpu)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<layer>())).temp_gpu as *const _ as usize },
        1824usize,
        concat!(
            "Offset of field: ",
            stringify!(layer),
            "::",
            stringify!(temp_gpu)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<layer>())).temp2_gpu as *const _ as usize },
        1832usize,
        concat!(
            "Offset of field: ",
            stringify!(layer),
            "::",
            stringify!(temp2_gpu)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<layer>())).temp3_gpu as *const _ as usize },
        1840usize,
        concat!(
            "Offset of field: ",
            stringify!(layer),
            "::",
            stringify!(temp3_gpu)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<layer>())).dh_gpu as *const _ as usize },
        1848usize,
        concat!(
            "Offset of field: ",
            stringify!(layer),
            "::",
            stringify!(dh_gpu)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<layer>())).hh_gpu as *const _ as usize },
        1856usize,
        concat!(
            "Offset of field: ",
            stringify!(layer),
            "::",
            stringify!(hh_gpu)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<layer>())).prev_cell_gpu as *const _ as usize },
        1864usize,
        concat!(
            "Offset of field: ",
            stringify!(layer),
            "::",
            stringify!(prev_cell_gpu)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<layer>())).prev_state_gpu as *const _ as usize },
        1872usize,
        concat!(
            "Offset of field: ",
            stringify!(layer),
            "::",
            stringify!(prev_state_gpu)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<layer>())).last_prev_state_gpu as *const _ as usize },
        1880usize,
        concat!(
            "Offset of field: ",
            stringify!(layer),
            "::",
            stringify!(last_prev_state_gpu)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<layer>())).last_prev_cell_gpu as *const _ as usize },
        1888usize,
        concat!(
            "Offset of field: ",
            stringify!(layer),
            "::",
            stringify!(last_prev_cell_gpu)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<layer>())).cell_gpu as *const _ as usize },
        1896usize,
        concat!(
            "Offset of field: ",
            stringify!(layer),
            "::",
            stringify!(cell_gpu)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<layer>())).f_gpu as *const _ as usize },
        1904usize,
        concat!(
            "Offset of field: ",
            stringify!(layer),
            "::",
            stringify!(f_gpu)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<layer>())).i_gpu as *const _ as usize },
        1912usize,
        concat!(
            "Offset of field: ",
            stringify!(layer),
            "::",
            stringify!(i_gpu)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<layer>())).g_gpu as *const _ as usize },
        1920usize,
        concat!(
            "Offset of field: ",
            stringify!(layer),
            "::",
            stringify!(g_gpu)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<layer>())).o_gpu as *const _ as usize },
        1928usize,
        concat!(
            "Offset of field: ",
            stringify!(layer),
            "::",
            stringify!(o_gpu)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<layer>())).c_gpu as *const _ as usize },
        1936usize,
        concat!(
            "Offset of field: ",
            stringify!(layer),
            "::",
            stringify!(c_gpu)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<layer>())).stored_c_gpu as *const _ as usize },
        1944usize,
        concat!(
            "Offset of field: ",
            stringify!(layer),
            "::",
            stringify!(stored_c_gpu)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<layer>())).dc_gpu as *const _ as usize },
        1952usize,
        concat!(
            "Offset of field: ",
            stringify!(layer),
            "::",
            stringify!(dc_gpu)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<layer>())).m_gpu as *const _ as usize },
        1960usize,
        concat!(
            "Offset of field: ",
            stringify!(layer),
            "::",
            stringify!(m_gpu)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<layer>())).v_gpu as *const _ as usize },
        1968usize,
        concat!(
            "Offset of field: ",
            stringify!(layer),
            "::",
            stringify!(v_gpu)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<layer>())).bias_m_gpu as *const _ as usize },
        1976usize,
        concat!(
            "Offset of field: ",
            stringify!(layer),
            "::",
            stringify!(bias_m_gpu)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<layer>())).scale_m_gpu as *const _ as usize },
        1984usize,
        concat!(
            "Offset of field: ",
            stringify!(layer),
            "::",
            stringify!(scale_m_gpu)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<layer>())).bias_v_gpu as *const _ as usize },
        1992usize,
        concat!(
            "Offset of field: ",
            stringify!(layer),
            "::",
            stringify!(bias_v_gpu)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<layer>())).scale_v_gpu as *const _ as usize },
        2000usize,
        concat!(
            "Offset of field: ",
            stringify!(layer),
            "::",
            stringify!(scale_v_gpu)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<layer>())).combine_gpu as *const _ as usize },
        2008usize,
        concat!(
            "Offset of field: ",
            stringify!(layer),
            "::",
            stringify!(combine_gpu)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<layer>())).combine_delta_gpu as *const _ as usize },
        2016usize,
        concat!(
            "Offset of field: ",
            stringify!(layer),
            "::",
            stringify!(combine_delta_gpu)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<layer>())).forgot_state_gpu as *const _ as usize },
        2024usize,
        concat!(
            "Offset of field: ",
            stringify!(layer),
            "::",
            stringify!(forgot_state_gpu)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<layer>())).forgot_delta_gpu as *const _ as usize },
        2032usize,
        concat!(
            "Offset of field: ",
            stringify!(layer),
            "::",
            stringify!(forgot_delta_gpu)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<layer>())).state_gpu as *const _ as usize },
        2040usize,
        concat!(
            "Offset of field: ",
            stringify!(layer),
            "::",
            stringify!(state_gpu)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<layer>())).state_delta_gpu as *const _ as usize },
        2048usize,
        concat!(
            "Offset of field: ",
            stringify!(layer),
            "::",
            stringify!(state_delta_gpu)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<layer>())).gate_gpu as *const _ as usize },
        2056usize,
        concat!(
            "Offset of field: ",
            stringify!(layer),
            "::",
            stringify!(gate_gpu)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<layer>())).gate_delta_gpu as *const _ as usize },
        2064usize,
        concat!(
            "Offset of field: ",
            stringify!(layer),
            "::",
            stringify!(gate_delta_gpu)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<layer>())).save_gpu as *const _ as usize },
        2072usize,
        concat!(
            "Offset of field: ",
            stringify!(layer),
            "::",
            stringify!(save_gpu)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<layer>())).save_delta_gpu as *const _ as usize },
        2080usize,
        concat!(
            "Offset of field: ",
            stringify!(layer),
            "::",
            stringify!(save_delta_gpu)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<layer>())).concat_gpu as *const _ as usize },
        2088usize,
        concat!(
            "Offset of field: ",
            stringify!(layer),
            "::",
            stringify!(concat_gpu)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<layer>())).concat_delta_gpu as *const _ as usize },
        2096usize,
        concat!(
            "Offset of field: ",
            stringify!(layer),
            "::",
            stringify!(concat_delta_gpu)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<layer>())).binary_input_gpu as *const _ as usize },
        2104usize,
        concat!(
            "Offset of field: ",
            stringify!(layer),
            "::",
            stringify!(binary_input_gpu)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<layer>())).binary_weights_gpu as *const _ as usize },
        2112usize,
        concat!(
            "Offset of field: ",
            stringify!(layer),
            "::",
            stringify!(binary_weights_gpu)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<layer>())).bin_conv_shortcut_in_gpu as *const _ as usize },
        2120usize,
        concat!(
            "Offset of field: ",
            stringify!(layer),
            "::",
            stringify!(bin_conv_shortcut_in_gpu)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<layer>())).bin_conv_shortcut_out_gpu as *const _ as usize },
        2128usize,
        concat!(
            "Offset of field: ",
            stringify!(layer),
            "::",
            stringify!(bin_conv_shortcut_out_gpu)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<layer>())).mean_gpu as *const _ as usize },
        2136usize,
        concat!(
            "Offset of field: ",
            stringify!(layer),
            "::",
            stringify!(mean_gpu)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<layer>())).variance_gpu as *const _ as usize },
        2144usize,
        concat!(
            "Offset of field: ",
            stringify!(layer),
            "::",
            stringify!(variance_gpu)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<layer>())).m_cbn_avg_gpu as *const _ as usize },
        2152usize,
        concat!(
            "Offset of field: ",
            stringify!(layer),
            "::",
            stringify!(m_cbn_avg_gpu)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<layer>())).v_cbn_avg_gpu as *const _ as usize },
        2160usize,
        concat!(
            "Offset of field: ",
            stringify!(layer),
            "::",
            stringify!(v_cbn_avg_gpu)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<layer>())).rolling_mean_gpu as *const _ as usize },
        2168usize,
        concat!(
            "Offset of field: ",
            stringify!(layer),
            "::",
            stringify!(rolling_mean_gpu)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<layer>())).rolling_variance_gpu as *const _ as usize },
        2176usize,
        concat!(
            "Offset of field: ",
            stringify!(layer),
            "::",
            stringify!(rolling_variance_gpu)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<layer>())).variance_delta_gpu as *const _ as usize },
        2184usize,
        concat!(
            "Offset of field: ",
            stringify!(layer),
            "::",
            stringify!(variance_delta_gpu)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<layer>())).mean_delta_gpu as *const _ as usize },
        2192usize,
        concat!(
            "Offset of field: ",
            stringify!(layer),
            "::",
            stringify!(mean_delta_gpu)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<layer>())).col_image_gpu as *const _ as usize },
        2200usize,
        concat!(
            "Offset of field: ",
            stringify!(layer),
            "::",
            stringify!(col_image_gpu)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<layer>())).x_gpu as *const _ as usize },
        2208usize,
        concat!(
            "Offset of field: ",
            stringify!(layer),
            "::",
            stringify!(x_gpu)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<layer>())).x_norm_gpu as *const _ as usize },
        2216usize,
        concat!(
            "Offset of field: ",
            stringify!(layer),
            "::",
            stringify!(x_norm_gpu)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<layer>())).weights_gpu as *const _ as usize },
        2224usize,
        concat!(
            "Offset of field: ",
            stringify!(layer),
            "::",
            stringify!(weights_gpu)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<layer>())).weight_updates_gpu as *const _ as usize },
        2232usize,
        concat!(
            "Offset of field: ",
            stringify!(layer),
            "::",
            stringify!(weight_updates_gpu)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<layer>())).weight_deform_gpu as *const _ as usize },
        2240usize,
        concat!(
            "Offset of field: ",
            stringify!(layer),
            "::",
            stringify!(weight_deform_gpu)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<layer>())).weight_change_gpu as *const _ as usize },
        2248usize,
        concat!(
            "Offset of field: ",
            stringify!(layer),
            "::",
            stringify!(weight_change_gpu)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<layer>())).weights_gpu16 as *const _ as usize },
        2256usize,
        concat!(
            "Offset of field: ",
            stringify!(layer),
            "::",
            stringify!(weights_gpu16)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<layer>())).weight_updates_gpu16 as *const _ as usize },
        2264usize,
        concat!(
            "Offset of field: ",
            stringify!(layer),
            "::",
            stringify!(weight_updates_gpu16)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<layer>())).biases_gpu as *const _ as usize },
        2272usize,
        concat!(
            "Offset of field: ",
            stringify!(layer),
            "::",
            stringify!(biases_gpu)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<layer>())).bias_updates_gpu as *const _ as usize },
        2280usize,
        concat!(
            "Offset of field: ",
            stringify!(layer),
            "::",
            stringify!(bias_updates_gpu)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<layer>())).bias_change_gpu as *const _ as usize },
        2288usize,
        concat!(
            "Offset of field: ",
            stringify!(layer),
            "::",
            stringify!(bias_change_gpu)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<layer>())).scales_gpu as *const _ as usize },
        2296usize,
        concat!(
            "Offset of field: ",
            stringify!(layer),
            "::",
            stringify!(scales_gpu)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<layer>())).scale_updates_gpu as *const _ as usize },
        2304usize,
        concat!(
            "Offset of field: ",
            stringify!(layer),
            "::",
            stringify!(scale_updates_gpu)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<layer>())).scale_change_gpu as *const _ as usize },
        2312usize,
        concat!(
            "Offset of field: ",
            stringify!(layer),
            "::",
            stringify!(scale_change_gpu)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<layer>())).input_antialiasing_gpu as *const _ as usize },
        2320usize,
        concat!(
            "Offset of field: ",
            stringify!(layer),
            "::",
            stringify!(input_antialiasing_gpu)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<layer>())).output_gpu as *const _ as usize },
        2328usize,
        concat!(
            "Offset of field: ",
            stringify!(layer),
            "::",
            stringify!(output_gpu)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<layer>())).output_avg_gpu as *const _ as usize },
        2336usize,
        concat!(
            "Offset of field: ",
            stringify!(layer),
            "::",
            stringify!(output_avg_gpu)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<layer>())).activation_input_gpu as *const _ as usize },
        2344usize,
        concat!(
            "Offset of field: ",
            stringify!(layer),
            "::",
            stringify!(activation_input_gpu)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<layer>())).loss_gpu as *const _ as usize },
        2352usize,
        concat!(
            "Offset of field: ",
            stringify!(layer),
            "::",
            stringify!(loss_gpu)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<layer>())).delta_gpu as *const _ as usize },
        2360usize,
        concat!(
            "Offset of field: ",
            stringify!(layer),
            "::",
            stringify!(delta_gpu)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<layer>())).cos_sim_gpu as *const _ as usize },
        2368usize,
        concat!(
            "Offset of field: ",
            stringify!(layer),
            "::",
            stringify!(cos_sim_gpu)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<layer>())).rand_gpu as *const _ as usize },
        2376usize,
        concat!(
            "Offset of field: ",
            stringify!(layer),
            "::",
            stringify!(rand_gpu)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<layer>())).drop_blocks_scale as *const _ as usize },
        2384usize,
        concat!(
            "Offset of field: ",
            stringify!(layer),
            "::",
            stringify!(drop_blocks_scale)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<layer>())).drop_blocks_scale_gpu as *const _ as usize },
        2392usize,
        concat!(
            "Offset of field: ",
            stringify!(layer),
            "::",
            stringify!(drop_blocks_scale_gpu)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<layer>())).squared_gpu as *const _ as usize },
        2400usize,
        concat!(
            "Offset of field: ",
            stringify!(layer),
            "::",
            stringify!(squared_gpu)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<layer>())).norms_gpu as *const _ as usize },
        2408usize,
        concat!(
            "Offset of field: ",
            stringify!(layer),
            "::",
            stringify!(norms_gpu)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<layer>())).gt_gpu as *const _ as usize },
        2416usize,
        concat!(
            "Offset of field: ",
            stringify!(layer),
            "::",
            stringify!(gt_gpu)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<layer>())).a_avg_gpu as *const _ as usize },
        2424usize,
        concat!(
            "Offset of field: ",
            stringify!(layer),
            "::",
            stringify!(a_avg_gpu)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<layer>())).input_sizes_gpu as *const _ as usize },
        2432usize,
        concat!(
            "Offset of field: ",
            stringify!(layer),
            "::",
            stringify!(input_sizes_gpu)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<layer>())).layers_output_gpu as *const _ as usize },
        2440usize,
        concat!(
            "Offset of field: ",
            stringify!(layer),
            "::",
            stringify!(layers_output_gpu)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<layer>())).layers_delta_gpu as *const _ as usize },
        2448usize,
        concat!(
            "Offset of field: ",
            stringify!(layer),
            "::",
            stringify!(layers_delta_gpu)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<layer>())).srcTensorDesc as *const _ as usize },
        2456usize,
        concat!(
            "Offset of field: ",
            stringify!(layer),
            "::",
            stringify!(srcTensorDesc)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<layer>())).dstTensorDesc as *const _ as usize },
        2464usize,
        concat!(
            "Offset of field: ",
            stringify!(layer),
            "::",
            stringify!(dstTensorDesc)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<layer>())).srcTensorDesc16 as *const _ as usize },
        2472usize,
        concat!(
            "Offset of field: ",
            stringify!(layer),
            "::",
            stringify!(srcTensorDesc16)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<layer>())).dstTensorDesc16 as *const _ as usize },
        2480usize,
        concat!(
            "Offset of field: ",
            stringify!(layer),
            "::",
            stringify!(dstTensorDesc16)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<layer>())).dsrcTensorDesc as *const _ as usize },
        2488usize,
        concat!(
            "Offset of field: ",
            stringify!(layer),
            "::",
            stringify!(dsrcTensorDesc)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<layer>())).ddstTensorDesc as *const _ as usize },
        2496usize,
        concat!(
            "Offset of field: ",
            stringify!(layer),
            "::",
            stringify!(ddstTensorDesc)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<layer>())).dsrcTensorDesc16 as *const _ as usize },
        2504usize,
        concat!(
            "Offset of field: ",
            stringify!(layer),
            "::",
            stringify!(dsrcTensorDesc16)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<layer>())).ddstTensorDesc16 as *const _ as usize },
        2512usize,
        concat!(
            "Offset of field: ",
            stringify!(layer),
            "::",
            stringify!(ddstTensorDesc16)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<layer>())).normTensorDesc as *const _ as usize },
        2520usize,
        concat!(
            "Offset of field: ",
            stringify!(layer),
            "::",
            stringify!(normTensorDesc)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<layer>())).normDstTensorDesc as *const _ as usize },
        2528usize,
        concat!(
            "Offset of field: ",
            stringify!(layer),
            "::",
            stringify!(normDstTensorDesc)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<layer>())).normDstTensorDescF16 as *const _ as usize },
        2536usize,
        concat!(
            "Offset of field: ",
            stringify!(layer),
            "::",
            stringify!(normDstTensorDescF16)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<layer>())).weightDesc as *const _ as usize },
        2544usize,
        concat!(
            "Offset of field: ",
            stringify!(layer),
            "::",
            stringify!(weightDesc)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<layer>())).weightDesc16 as *const _ as usize },
        2552usize,
        concat!(
            "Offset of field: ",
            stringify!(layer),
            "::",
            stringify!(weightDesc16)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<layer>())).dweightDesc as *const _ as usize },
        2560usize,
        concat!(
            "Offset of field: ",
            stringify!(layer),
            "::",
            stringify!(dweightDesc)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<layer>())).dweightDesc16 as *const _ as usize },
        2568usize,
        concat!(
            "Offset of field: ",
            stringify!(layer),
            "::",
            stringify!(dweightDesc16)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<layer>())).convDesc as *const _ as usize },
        2576usize,
        concat!(
            "Offset of field: ",
            stringify!(layer),
            "::",
            stringify!(convDesc)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<layer>())).fw_algo as *const _ as usize },
        2584usize,
        concat!(
            "Offset of field: ",
            stringify!(layer),
            "::",
            stringify!(fw_algo)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<layer>())).fw_algo16 as *const _ as usize },
        2588usize,
        concat!(
            "Offset of field: ",
            stringify!(layer),
            "::",
            stringify!(fw_algo16)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<layer>())).bd_algo as *const _ as usize },
        2592usize,
        concat!(
            "Offset of field: ",
            stringify!(layer),
            "::",
            stringify!(bd_algo)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<layer>())).bd_algo16 as *const _ as usize },
        2596usize,
        concat!(
            "Offset of field: ",
            stringify!(layer),
            "::",
            stringify!(bd_algo16)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<layer>())).bf_algo as *const _ as usize },
        2600usize,
        concat!(
            "Offset of field: ",
            stringify!(layer),
            "::",
            stringify!(bf_algo)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<layer>())).bf_algo16 as *const _ as usize },
        2604usize,
        concat!(
            "Offset of field: ",
            stringify!(layer),
            "::",
            stringify!(bf_algo16)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<layer>())).poolingDesc as *const _ as usize },
        2608usize,
        concat!(
            "Offset of field: ",
            stringify!(layer),
            "::",
            stringify!(poolingDesc)
        )
    );
}
pub const learning_rate_policy_CONSTANT: learning_rate_policy = 0;
pub const learning_rate_policy_STEP: learning_rate_policy = 1;
pub const learning_rate_policy_EXP: learning_rate_policy = 2;
pub const learning_rate_policy_POLY: learning_rate_policy = 3;
pub const learning_rate_policy_STEPS: learning_rate_policy = 4;
pub const learning_rate_policy_SIG: learning_rate_policy = 5;
pub const learning_rate_policy_RANDOM: learning_rate_policy = 6;
pub const learning_rate_policy_SGDR: learning_rate_policy = 7;
pub type learning_rate_policy = ::std::os::raw::c_int;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct network {
    pub n: ::std::os::raw::c_int,
    pub batch: ::std::os::raw::c_int,
    pub seen: *mut u64,
    pub badlabels_reject_threshold: *mut f32,
    pub delta_rolling_max: *mut f32,
    pub delta_rolling_avg: *mut f32,
    pub delta_rolling_std: *mut f32,
    pub weights_reject_freq: ::std::os::raw::c_int,
    pub equidistant_point: ::std::os::raw::c_int,
    pub badlabels_rejection_percentage: f32,
    pub num_sigmas_reject_badlabels: f32,
    pub ema_alpha: f32,
    pub cur_iteration: *mut ::std::os::raw::c_int,
    pub loss_scale: f32,
    pub t: *mut ::std::os::raw::c_int,
    pub epoch: f32,
    pub subdivisions: ::std::os::raw::c_int,
    pub layers: *mut layer,
    pub output: *mut f32,
    pub policy: learning_rate_policy,
    pub benchmark_layers: ::std::os::raw::c_int,
    pub total_bbox: *mut ::std::os::raw::c_int,
    pub rewritten_bbox: *mut ::std::os::raw::c_int,
    pub learning_rate: f32,
    pub learning_rate_min: f32,
    pub learning_rate_max: f32,
    pub batches_per_cycle: ::std::os::raw::c_int,
    pub batches_cycle_mult: ::std::os::raw::c_int,
    pub momentum: f32,
    pub decay: f32,
    pub gamma: f32,
    pub scale: f32,
    pub power: f32,
    pub time_steps: ::std::os::raw::c_int,
    pub step: ::std::os::raw::c_int,
    pub max_batches: ::std::os::raw::c_int,
    pub num_boxes: ::std::os::raw::c_int,
    pub train_images_num: ::std::os::raw::c_int,
    pub seq_scales: *mut f32,
    pub scales: *mut f32,
    pub steps: *mut ::std::os::raw::c_int,
    pub num_steps: ::std::os::raw::c_int,
    pub burn_in: ::std::os::raw::c_int,
    pub cudnn_half: ::std::os::raw::c_int,
    pub adam: ::std::os::raw::c_int,
    pub B1: f32,
    pub B2: f32,
    pub eps: f32,
    pub inputs: ::std::os::raw::c_int,
    pub outputs: ::std::os::raw::c_int,
    pub truths: ::std::os::raw::c_int,
    pub notruth: ::std::os::raw::c_int,
    pub h: ::std::os::raw::c_int,
    pub w: ::std::os::raw::c_int,
    pub c: ::std::os::raw::c_int,
    pub max_crop: ::std::os::raw::c_int,
    pub min_crop: ::std::os::raw::c_int,
    pub max_ratio: f32,
    pub min_ratio: f32,
    pub center: ::std::os::raw::c_int,
    pub flip: ::std::os::raw::c_int,
    pub gaussian_noise: ::std::os::raw::c_int,
    pub blur: ::std::os::raw::c_int,
    pub mixup: ::std::os::raw::c_int,
    pub label_smooth_eps: f32,
    pub resize_step: ::std::os::raw::c_int,
    pub attention: ::std::os::raw::c_int,
    pub adversarial: ::std::os::raw::c_int,
    pub adversarial_lr: f32,
    pub max_chart_loss: f32,
    pub letter_box: ::std::os::raw::c_int,
    pub mosaic_bound: ::std::os::raw::c_int,
    pub contrastive: ::std::os::raw::c_int,
    pub contrastive_jit_flip: ::std::os::raw::c_int,
    pub contrastive_color: ::std::os::raw::c_int,
    pub unsupervised: ::std::os::raw::c_int,
    pub angle: f32,
    pub aspect: f32,
    pub exposure: f32,
    pub saturation: f32,
    pub hue: f32,
    pub random: ::std::os::raw::c_int,
    pub track: ::std::os::raw::c_int,
    pub augment_speed: ::std::os::raw::c_int,
    pub sequential_subdivisions: ::std::os::raw::c_int,
    pub init_sequential_subdivisions: ::std::os::raw::c_int,
    pub current_subdivision: ::std::os::raw::c_int,
    pub try_fix_nan: ::std::os::raw::c_int,
    pub gpu_index: ::std::os::raw::c_int,
    pub hierarchy: *mut tree,
    pub input: *mut f32,
    pub truth: *mut f32,
    pub delta: *mut f32,
    pub workspace: *mut f32,
    pub train: ::std::os::raw::c_int,
    pub index: ::std::os::raw::c_int,
    pub cost: *mut f32,
    pub clip: f32,
    pub delta_gpu: *mut f32,
    pub output_gpu: *mut f32,
    pub input_state_gpu: *mut f32,
    pub input_pinned_cpu: *mut f32,
    pub input_pinned_cpu_flag: ::std::os::raw::c_int,
    pub input_gpu: *mut *mut f32,
    pub truth_gpu: *mut *mut f32,
    pub input16_gpu: *mut *mut f32,
    pub output16_gpu: *mut *mut f32,
    pub max_input16_size: *mut size_t,
    pub max_output16_size: *mut size_t,
    pub wait_stream: ::std::os::raw::c_int,
    pub cuda_graph: *mut ::std::os::raw::c_void,
    pub cuda_graph_exec: *mut ::std::os::raw::c_void,
    pub use_cuda_graph: ::std::os::raw::c_int,
    pub cuda_graph_ready: *mut ::std::os::raw::c_int,
    pub global_delta_gpu: *mut f32,
    pub state_delta_gpu: *mut f32,
    pub max_delta_gpu_size: size_t,
    pub optimized_memory: ::std::os::raw::c_int,
    pub dynamic_minibatch: ::std::os::raw::c_int,
    pub workspace_size_limit: size_t,
}
#[test]
fn bindgen_test_layout_network() {
    assert_eq!(
        ::std::mem::size_of::<network>(),
        656usize,
        concat!("Size of: ", stringify!(network))
    );
    assert_eq!(
        ::std::mem::align_of::<network>(),
        8usize,
        concat!("Alignment of ", stringify!(network))
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<network>())).n as *const _ as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(network),
            "::",
            stringify!(n)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<network>())).batch as *const _ as usize },
        4usize,
        concat!(
            "Offset of field: ",
            stringify!(network),
            "::",
            stringify!(batch)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<network>())).seen as *const _ as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(network),
            "::",
            stringify!(seen)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<network>())).badlabels_reject_threshold as *const _ as usize
        },
        16usize,
        concat!(
            "Offset of field: ",
            stringify!(network),
            "::",
            stringify!(badlabels_reject_threshold)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<network>())).delta_rolling_max as *const _ as usize },
        24usize,
        concat!(
            "Offset of field: ",
            stringify!(network),
            "::",
            stringify!(delta_rolling_max)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<network>())).delta_rolling_avg as *const _ as usize },
        32usize,
        concat!(
            "Offset of field: ",
            stringify!(network),
            "::",
            stringify!(delta_rolling_avg)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<network>())).delta_rolling_std as *const _ as usize },
        40usize,
        concat!(
            "Offset of field: ",
            stringify!(network),
            "::",
            stringify!(delta_rolling_std)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<network>())).weights_reject_freq as *const _ as usize },
        48usize,
        concat!(
            "Offset of field: ",
            stringify!(network),
            "::",
            stringify!(weights_reject_freq)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<network>())).equidistant_point as *const _ as usize },
        52usize,
        concat!(
            "Offset of field: ",
            stringify!(network),
            "::",
            stringify!(equidistant_point)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<network>())).badlabels_rejection_percentage as *const _ as usize
        },
        56usize,
        concat!(
            "Offset of field: ",
            stringify!(network),
            "::",
            stringify!(badlabels_rejection_percentage)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<network>())).num_sigmas_reject_badlabels as *const _ as usize
        },
        60usize,
        concat!(
            "Offset of field: ",
            stringify!(network),
            "::",
            stringify!(num_sigmas_reject_badlabels)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<network>())).ema_alpha as *const _ as usize },
        64usize,
        concat!(
            "Offset of field: ",
            stringify!(network),
            "::",
            stringify!(ema_alpha)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<network>())).cur_iteration as *const _ as usize },
        72usize,
        concat!(
            "Offset of field: ",
            stringify!(network),
            "::",
            stringify!(cur_iteration)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<network>())).loss_scale as *const _ as usize },
        80usize,
        concat!(
            "Offset of field: ",
            stringify!(network),
            "::",
            stringify!(loss_scale)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<network>())).t as *const _ as usize },
        88usize,
        concat!(
            "Offset of field: ",
            stringify!(network),
            "::",
            stringify!(t)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<network>())).epoch as *const _ as usize },
        96usize,
        concat!(
            "Offset of field: ",
            stringify!(network),
            "::",
            stringify!(epoch)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<network>())).subdivisions as *const _ as usize },
        100usize,
        concat!(
            "Offset of field: ",
            stringify!(network),
            "::",
            stringify!(subdivisions)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<network>())).layers as *const _ as usize },
        104usize,
        concat!(
            "Offset of field: ",
            stringify!(network),
            "::",
            stringify!(layers)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<network>())).output as *const _ as usize },
        112usize,
        concat!(
            "Offset of field: ",
            stringify!(network),
            "::",
            stringify!(output)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<network>())).policy as *const _ as usize },
        120usize,
        concat!(
            "Offset of field: ",
            stringify!(network),
            "::",
            stringify!(policy)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<network>())).benchmark_layers as *const _ as usize },
        124usize,
        concat!(
            "Offset of field: ",
            stringify!(network),
            "::",
            stringify!(benchmark_layers)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<network>())).total_bbox as *const _ as usize },
        128usize,
        concat!(
            "Offset of field: ",
            stringify!(network),
            "::",
            stringify!(total_bbox)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<network>())).rewritten_bbox as *const _ as usize },
        136usize,
        concat!(
            "Offset of field: ",
            stringify!(network),
            "::",
            stringify!(rewritten_bbox)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<network>())).learning_rate as *const _ as usize },
        144usize,
        concat!(
            "Offset of field: ",
            stringify!(network),
            "::",
            stringify!(learning_rate)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<network>())).learning_rate_min as *const _ as usize },
        148usize,
        concat!(
            "Offset of field: ",
            stringify!(network),
            "::",
            stringify!(learning_rate_min)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<network>())).learning_rate_max as *const _ as usize },
        152usize,
        concat!(
            "Offset of field: ",
            stringify!(network),
            "::",
            stringify!(learning_rate_max)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<network>())).batches_per_cycle as *const _ as usize },
        156usize,
        concat!(
            "Offset of field: ",
            stringify!(network),
            "::",
            stringify!(batches_per_cycle)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<network>())).batches_cycle_mult as *const _ as usize },
        160usize,
        concat!(
            "Offset of field: ",
            stringify!(network),
            "::",
            stringify!(batches_cycle_mult)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<network>())).momentum as *const _ as usize },
        164usize,
        concat!(
            "Offset of field: ",
            stringify!(network),
            "::",
            stringify!(momentum)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<network>())).decay as *const _ as usize },
        168usize,
        concat!(
            "Offset of field: ",
            stringify!(network),
            "::",
            stringify!(decay)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<network>())).gamma as *const _ as usize },
        172usize,
        concat!(
            "Offset of field: ",
            stringify!(network),
            "::",
            stringify!(gamma)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<network>())).scale as *const _ as usize },
        176usize,
        concat!(
            "Offset of field: ",
            stringify!(network),
            "::",
            stringify!(scale)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<network>())).power as *const _ as usize },
        180usize,
        concat!(
            "Offset of field: ",
            stringify!(network),
            "::",
            stringify!(power)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<network>())).time_steps as *const _ as usize },
        184usize,
        concat!(
            "Offset of field: ",
            stringify!(network),
            "::",
            stringify!(time_steps)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<network>())).step as *const _ as usize },
        188usize,
        concat!(
            "Offset of field: ",
            stringify!(network),
            "::",
            stringify!(step)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<network>())).max_batches as *const _ as usize },
        192usize,
        concat!(
            "Offset of field: ",
            stringify!(network),
            "::",
            stringify!(max_batches)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<network>())).num_boxes as *const _ as usize },
        196usize,
        concat!(
            "Offset of field: ",
            stringify!(network),
            "::",
            stringify!(num_boxes)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<network>())).train_images_num as *const _ as usize },
        200usize,
        concat!(
            "Offset of field: ",
            stringify!(network),
            "::",
            stringify!(train_images_num)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<network>())).seq_scales as *const _ as usize },
        208usize,
        concat!(
            "Offset of field: ",
            stringify!(network),
            "::",
            stringify!(seq_scales)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<network>())).scales as *const _ as usize },
        216usize,
        concat!(
            "Offset of field: ",
            stringify!(network),
            "::",
            stringify!(scales)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<network>())).steps as *const _ as usize },
        224usize,
        concat!(
            "Offset of field: ",
            stringify!(network),
            "::",
            stringify!(steps)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<network>())).num_steps as *const _ as usize },
        232usize,
        concat!(
            "Offset of field: ",
            stringify!(network),
            "::",
            stringify!(num_steps)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<network>())).burn_in as *const _ as usize },
        236usize,
        concat!(
            "Offset of field: ",
            stringify!(network),
            "::",
            stringify!(burn_in)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<network>())).cudnn_half as *const _ as usize },
        240usize,
        concat!(
            "Offset of field: ",
            stringify!(network),
            "::",
            stringify!(cudnn_half)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<network>())).adam as *const _ as usize },
        244usize,
        concat!(
            "Offset of field: ",
            stringify!(network),
            "::",
            stringify!(adam)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<network>())).B1 as *const _ as usize },
        248usize,
        concat!(
            "Offset of field: ",
            stringify!(network),
            "::",
            stringify!(B1)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<network>())).B2 as *const _ as usize },
        252usize,
        concat!(
            "Offset of field: ",
            stringify!(network),
            "::",
            stringify!(B2)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<network>())).eps as *const _ as usize },
        256usize,
        concat!(
            "Offset of field: ",
            stringify!(network),
            "::",
            stringify!(eps)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<network>())).inputs as *const _ as usize },
        260usize,
        concat!(
            "Offset of field: ",
            stringify!(network),
            "::",
            stringify!(inputs)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<network>())).outputs as *const _ as usize },
        264usize,
        concat!(
            "Offset of field: ",
            stringify!(network),
            "::",
            stringify!(outputs)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<network>())).truths as *const _ as usize },
        268usize,
        concat!(
            "Offset of field: ",
            stringify!(network),
            "::",
            stringify!(truths)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<network>())).notruth as *const _ as usize },
        272usize,
        concat!(
            "Offset of field: ",
            stringify!(network),
            "::",
            stringify!(notruth)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<network>())).h as *const _ as usize },
        276usize,
        concat!(
            "Offset of field: ",
            stringify!(network),
            "::",
            stringify!(h)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<network>())).w as *const _ as usize },
        280usize,
        concat!(
            "Offset of field: ",
            stringify!(network),
            "::",
            stringify!(w)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<network>())).c as *const _ as usize },
        284usize,
        concat!(
            "Offset of field: ",
            stringify!(network),
            "::",
            stringify!(c)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<network>())).max_crop as *const _ as usize },
        288usize,
        concat!(
            "Offset of field: ",
            stringify!(network),
            "::",
            stringify!(max_crop)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<network>())).min_crop as *const _ as usize },
        292usize,
        concat!(
            "Offset of field: ",
            stringify!(network),
            "::",
            stringify!(min_crop)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<network>())).max_ratio as *const _ as usize },
        296usize,
        concat!(
            "Offset of field: ",
            stringify!(network),
            "::",
            stringify!(max_ratio)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<network>())).min_ratio as *const _ as usize },
        300usize,
        concat!(
            "Offset of field: ",
            stringify!(network),
            "::",
            stringify!(min_ratio)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<network>())).center as *const _ as usize },
        304usize,
        concat!(
            "Offset of field: ",
            stringify!(network),
            "::",
            stringify!(center)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<network>())).flip as *const _ as usize },
        308usize,
        concat!(
            "Offset of field: ",
            stringify!(network),
            "::",
            stringify!(flip)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<network>())).gaussian_noise as *const _ as usize },
        312usize,
        concat!(
            "Offset of field: ",
            stringify!(network),
            "::",
            stringify!(gaussian_noise)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<network>())).blur as *const _ as usize },
        316usize,
        concat!(
            "Offset of field: ",
            stringify!(network),
            "::",
            stringify!(blur)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<network>())).mixup as *const _ as usize },
        320usize,
        concat!(
            "Offset of field: ",
            stringify!(network),
            "::",
            stringify!(mixup)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<network>())).label_smooth_eps as *const _ as usize },
        324usize,
        concat!(
            "Offset of field: ",
            stringify!(network),
            "::",
            stringify!(label_smooth_eps)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<network>())).resize_step as *const _ as usize },
        328usize,
        concat!(
            "Offset of field: ",
            stringify!(network),
            "::",
            stringify!(resize_step)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<network>())).attention as *const _ as usize },
        332usize,
        concat!(
            "Offset of field: ",
            stringify!(network),
            "::",
            stringify!(attention)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<network>())).adversarial as *const _ as usize },
        336usize,
        concat!(
            "Offset of field: ",
            stringify!(network),
            "::",
            stringify!(adversarial)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<network>())).adversarial_lr as *const _ as usize },
        340usize,
        concat!(
            "Offset of field: ",
            stringify!(network),
            "::",
            stringify!(adversarial_lr)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<network>())).max_chart_loss as *const _ as usize },
        344usize,
        concat!(
            "Offset of field: ",
            stringify!(network),
            "::",
            stringify!(max_chart_loss)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<network>())).letter_box as *const _ as usize },
        348usize,
        concat!(
            "Offset of field: ",
            stringify!(network),
            "::",
            stringify!(letter_box)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<network>())).mosaic_bound as *const _ as usize },
        352usize,
        concat!(
            "Offset of field: ",
            stringify!(network),
            "::",
            stringify!(mosaic_bound)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<network>())).contrastive as *const _ as usize },
        356usize,
        concat!(
            "Offset of field: ",
            stringify!(network),
            "::",
            stringify!(contrastive)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<network>())).contrastive_jit_flip as *const _ as usize },
        360usize,
        concat!(
            "Offset of field: ",
            stringify!(network),
            "::",
            stringify!(contrastive_jit_flip)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<network>())).contrastive_color as *const _ as usize },
        364usize,
        concat!(
            "Offset of field: ",
            stringify!(network),
            "::",
            stringify!(contrastive_color)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<network>())).unsupervised as *const _ as usize },
        368usize,
        concat!(
            "Offset of field: ",
            stringify!(network),
            "::",
            stringify!(unsupervised)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<network>())).angle as *const _ as usize },
        372usize,
        concat!(
            "Offset of field: ",
            stringify!(network),
            "::",
            stringify!(angle)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<network>())).aspect as *const _ as usize },
        376usize,
        concat!(
            "Offset of field: ",
            stringify!(network),
            "::",
            stringify!(aspect)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<network>())).exposure as *const _ as usize },
        380usize,
        concat!(
            "Offset of field: ",
            stringify!(network),
            "::",
            stringify!(exposure)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<network>())).saturation as *const _ as usize },
        384usize,
        concat!(
            "Offset of field: ",
            stringify!(network),
            "::",
            stringify!(saturation)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<network>())).hue as *const _ as usize },
        388usize,
        concat!(
            "Offset of field: ",
            stringify!(network),
            "::",
            stringify!(hue)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<network>())).random as *const _ as usize },
        392usize,
        concat!(
            "Offset of field: ",
            stringify!(network),
            "::",
            stringify!(random)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<network>())).track as *const _ as usize },
        396usize,
        concat!(
            "Offset of field: ",
            stringify!(network),
            "::",
            stringify!(track)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<network>())).augment_speed as *const _ as usize },
        400usize,
        concat!(
            "Offset of field: ",
            stringify!(network),
            "::",
            stringify!(augment_speed)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<network>())).sequential_subdivisions as *const _ as usize },
        404usize,
        concat!(
            "Offset of field: ",
            stringify!(network),
            "::",
            stringify!(sequential_subdivisions)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<network>())).init_sequential_subdivisions as *const _ as usize
        },
        408usize,
        concat!(
            "Offset of field: ",
            stringify!(network),
            "::",
            stringify!(init_sequential_subdivisions)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<network>())).current_subdivision as *const _ as usize },
        412usize,
        concat!(
            "Offset of field: ",
            stringify!(network),
            "::",
            stringify!(current_subdivision)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<network>())).try_fix_nan as *const _ as usize },
        416usize,
        concat!(
            "Offset of field: ",
            stringify!(network),
            "::",
            stringify!(try_fix_nan)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<network>())).gpu_index as *const _ as usize },
        420usize,
        concat!(
            "Offset of field: ",
            stringify!(network),
            "::",
            stringify!(gpu_index)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<network>())).hierarchy as *const _ as usize },
        424usize,
        concat!(
            "Offset of field: ",
            stringify!(network),
            "::",
            stringify!(hierarchy)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<network>())).input as *const _ as usize },
        432usize,
        concat!(
            "Offset of field: ",
            stringify!(network),
            "::",
            stringify!(input)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<network>())).truth as *const _ as usize },
        440usize,
        concat!(
            "Offset of field: ",
            stringify!(network),
            "::",
            stringify!(truth)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<network>())).delta as *const _ as usize },
        448usize,
        concat!(
            "Offset of field: ",
            stringify!(network),
            "::",
            stringify!(delta)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<network>())).workspace as *const _ as usize },
        456usize,
        concat!(
            "Offset of field: ",
            stringify!(network),
            "::",
            stringify!(workspace)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<network>())).train as *const _ as usize },
        464usize,
        concat!(
            "Offset of field: ",
            stringify!(network),
            "::",
            stringify!(train)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<network>())).index as *const _ as usize },
        468usize,
        concat!(
            "Offset of field: ",
            stringify!(network),
            "::",
            stringify!(index)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<network>())).cost as *const _ as usize },
        472usize,
        concat!(
            "Offset of field: ",
            stringify!(network),
            "::",
            stringify!(cost)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<network>())).clip as *const _ as usize },
        480usize,
        concat!(
            "Offset of field: ",
            stringify!(network),
            "::",
            stringify!(clip)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<network>())).delta_gpu as *const _ as usize },
        488usize,
        concat!(
            "Offset of field: ",
            stringify!(network),
            "::",
            stringify!(delta_gpu)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<network>())).output_gpu as *const _ as usize },
        496usize,
        concat!(
            "Offset of field: ",
            stringify!(network),
            "::",
            stringify!(output_gpu)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<network>())).input_state_gpu as *const _ as usize },
        504usize,
        concat!(
            "Offset of field: ",
            stringify!(network),
            "::",
            stringify!(input_state_gpu)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<network>())).input_pinned_cpu as *const _ as usize },
        512usize,
        concat!(
            "Offset of field: ",
            stringify!(network),
            "::",
            stringify!(input_pinned_cpu)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<network>())).input_pinned_cpu_flag as *const _ as usize },
        520usize,
        concat!(
            "Offset of field: ",
            stringify!(network),
            "::",
            stringify!(input_pinned_cpu_flag)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<network>())).input_gpu as *const _ as usize },
        528usize,
        concat!(
            "Offset of field: ",
            stringify!(network),
            "::",
            stringify!(input_gpu)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<network>())).truth_gpu as *const _ as usize },
        536usize,
        concat!(
            "Offset of field: ",
            stringify!(network),
            "::",
            stringify!(truth_gpu)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<network>())).input16_gpu as *const _ as usize },
        544usize,
        concat!(
            "Offset of field: ",
            stringify!(network),
            "::",
            stringify!(input16_gpu)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<network>())).output16_gpu as *const _ as usize },
        552usize,
        concat!(
            "Offset of field: ",
            stringify!(network),
            "::",
            stringify!(output16_gpu)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<network>())).max_input16_size as *const _ as usize },
        560usize,
        concat!(
            "Offset of field: ",
            stringify!(network),
            "::",
            stringify!(max_input16_size)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<network>())).max_output16_size as *const _ as usize },
        568usize,
        concat!(
            "Offset of field: ",
            stringify!(network),
            "::",
            stringify!(max_output16_size)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<network>())).wait_stream as *const _ as usize },
        576usize,
        concat!(
            "Offset of field: ",
            stringify!(network),
            "::",
            stringify!(wait_stream)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<network>())).cuda_graph as *const _ as usize },
        584usize,
        concat!(
            "Offset of field: ",
            stringify!(network),
            "::",
            stringify!(cuda_graph)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<network>())).cuda_graph_exec as *const _ as usize },
        592usize,
        concat!(
            "Offset of field: ",
            stringify!(network),
            "::",
            stringify!(cuda_graph_exec)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<network>())).use_cuda_graph as *const _ as usize },
        600usize,
        concat!(
            "Offset of field: ",
            stringify!(network),
            "::",
            stringify!(use_cuda_graph)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<network>())).cuda_graph_ready as *const _ as usize },
        608usize,
        concat!(
            "Offset of field: ",
            stringify!(network),
            "::",
            stringify!(cuda_graph_ready)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<network>())).global_delta_gpu as *const _ as usize },
        616usize,
        concat!(
            "Offset of field: ",
            stringify!(network),
            "::",
            stringify!(global_delta_gpu)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<network>())).state_delta_gpu as *const _ as usize },
        624usize,
        concat!(
            "Offset of field: ",
            stringify!(network),
            "::",
            stringify!(state_delta_gpu)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<network>())).max_delta_gpu_size as *const _ as usize },
        632usize,
        concat!(
            "Offset of field: ",
            stringify!(network),
            "::",
            stringify!(max_delta_gpu_size)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<network>())).optimized_memory as *const _ as usize },
        640usize,
        concat!(
            "Offset of field: ",
            stringify!(network),
            "::",
            stringify!(optimized_memory)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<network>())).dynamic_minibatch as *const _ as usize },
        644usize,
        concat!(
            "Offset of field: ",
            stringify!(network),
            "::",
            stringify!(dynamic_minibatch)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<network>())).workspace_size_limit as *const _ as usize },
        648usize,
        concat!(
            "Offset of field: ",
            stringify!(network),
            "::",
            stringify!(workspace_size_limit)
        )
    );
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct network_state {
    pub truth: *mut f32,
    pub input: *mut f32,
    pub delta: *mut f32,
    pub workspace: *mut f32,
    pub train: ::std::os::raw::c_int,
    pub index: ::std::os::raw::c_int,
    pub net: network,
}
#[test]
fn bindgen_test_layout_network_state() {
    assert_eq!(
        ::std::mem::size_of::<network_state>(),
        696usize,
        concat!("Size of: ", stringify!(network_state))
    );
    assert_eq!(
        ::std::mem::align_of::<network_state>(),
        8usize,
        concat!("Alignment of ", stringify!(network_state))
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<network_state>())).truth as *const _ as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(network_state),
            "::",
            stringify!(truth)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<network_state>())).input as *const _ as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(network_state),
            "::",
            stringify!(input)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<network_state>())).delta as *const _ as usize },
        16usize,
        concat!(
            "Offset of field: ",
            stringify!(network_state),
            "::",
            stringify!(delta)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<network_state>())).workspace as *const _ as usize },
        24usize,
        concat!(
            "Offset of field: ",
            stringify!(network_state),
            "::",
            stringify!(workspace)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<network_state>())).train as *const _ as usize },
        32usize,
        concat!(
            "Offset of field: ",
            stringify!(network_state),
            "::",
            stringify!(train)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<network_state>())).index as *const _ as usize },
        36usize,
        concat!(
            "Offset of field: ",
            stringify!(network_state),
            "::",
            stringify!(index)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<network_state>())).net as *const _ as usize },
        40usize,
        concat!(
            "Offset of field: ",
            stringify!(network_state),
            "::",
            stringify!(net)
        )
    );
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct image {
    pub w: ::std::os::raw::c_int,
    pub h: ::std::os::raw::c_int,
    pub c: ::std::os::raw::c_int,
    pub data: *mut f32,
}
#[test]
fn bindgen_test_layout_image() {
    assert_eq!(
        ::std::mem::size_of::<image>(),
        24usize,
        concat!("Size of: ", stringify!(image))
    );
    assert_eq!(
        ::std::mem::align_of::<image>(),
        8usize,
        concat!("Alignment of ", stringify!(image))
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<image>())).w as *const _ as usize },
        0usize,
        concat!("Offset of field: ", stringify!(image), "::", stringify!(w))
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<image>())).h as *const _ as usize },
        4usize,
        concat!("Offset of field: ", stringify!(image), "::", stringify!(h))
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<image>())).c as *const _ as usize },
        8usize,
        concat!("Offset of field: ", stringify!(image), "::", stringify!(c))
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<image>())).data as *const _ as usize },
        16usize,
        concat!(
            "Offset of field: ",
            stringify!(image),
            "::",
            stringify!(data)
        )
    );
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct box_ {
    pub x: f32,
    pub y: f32,
    pub w: f32,
    pub h: f32,
}
#[test]
fn bindgen_test_layout_box_() {
    assert_eq!(
        ::std::mem::size_of::<box_>(),
        16usize,
        concat!("Size of: ", stringify!(box_))
    );
    assert_eq!(
        ::std::mem::align_of::<box_>(),
        4usize,
        concat!("Alignment of ", stringify!(box_))
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<box_>())).x as *const _ as usize },
        0usize,
        concat!("Offset of field: ", stringify!(box_), "::", stringify!(x))
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<box_>())).y as *const _ as usize },
        4usize,
        concat!("Offset of field: ", stringify!(box_), "::", stringify!(y))
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<box_>())).w as *const _ as usize },
        8usize,
        concat!("Offset of field: ", stringify!(box_), "::", stringify!(w))
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<box_>())).h as *const _ as usize },
        12usize,
        concat!("Offset of field: ", stringify!(box_), "::", stringify!(h))
    );
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct boxabs {
    pub left: f32,
    pub right: f32,
    pub top: f32,
    pub bot: f32,
}
#[test]
fn bindgen_test_layout_boxabs() {
    assert_eq!(
        ::std::mem::size_of::<boxabs>(),
        16usize,
        concat!("Size of: ", stringify!(boxabs))
    );
    assert_eq!(
        ::std::mem::align_of::<boxabs>(),
        4usize,
        concat!("Alignment of ", stringify!(boxabs))
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<boxabs>())).left as *const _ as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(boxabs),
            "::",
            stringify!(left)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<boxabs>())).right as *const _ as usize },
        4usize,
        concat!(
            "Offset of field: ",
            stringify!(boxabs),
            "::",
            stringify!(right)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<boxabs>())).top as *const _ as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(boxabs),
            "::",
            stringify!(top)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<boxabs>())).bot as *const _ as usize },
        12usize,
        concat!(
            "Offset of field: ",
            stringify!(boxabs),
            "::",
            stringify!(bot)
        )
    );
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct dxrep {
    pub dt: f32,
    pub db: f32,
    pub dl: f32,
    pub dr: f32,
}
#[test]
fn bindgen_test_layout_dxrep() {
    assert_eq!(
        ::std::mem::size_of::<dxrep>(),
        16usize,
        concat!("Size of: ", stringify!(dxrep))
    );
    assert_eq!(
        ::std::mem::align_of::<dxrep>(),
        4usize,
        concat!("Alignment of ", stringify!(dxrep))
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<dxrep>())).dt as *const _ as usize },
        0usize,
        concat!("Offset of field: ", stringify!(dxrep), "::", stringify!(dt))
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<dxrep>())).db as *const _ as usize },
        4usize,
        concat!("Offset of field: ", stringify!(dxrep), "::", stringify!(db))
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<dxrep>())).dl as *const _ as usize },
        8usize,
        concat!("Offset of field: ", stringify!(dxrep), "::", stringify!(dl))
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<dxrep>())).dr as *const _ as usize },
        12usize,
        concat!("Offset of field: ", stringify!(dxrep), "::", stringify!(dr))
    );
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct ious {
    pub iou: f32,
    pub giou: f32,
    pub diou: f32,
    pub ciou: f32,
    pub dx_iou: dxrep,
    pub dx_giou: dxrep,
}
#[test]
fn bindgen_test_layout_ious() {
    assert_eq!(
        ::std::mem::size_of::<ious>(),
        48usize,
        concat!("Size of: ", stringify!(ious))
    );
    assert_eq!(
        ::std::mem::align_of::<ious>(),
        4usize,
        concat!("Alignment of ", stringify!(ious))
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<ious>())).iou as *const _ as usize },
        0usize,
        concat!("Offset of field: ", stringify!(ious), "::", stringify!(iou))
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<ious>())).giou as *const _ as usize },
        4usize,
        concat!(
            "Offset of field: ",
            stringify!(ious),
            "::",
            stringify!(giou)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<ious>())).diou as *const _ as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(ious),
            "::",
            stringify!(diou)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<ious>())).ciou as *const _ as usize },
        12usize,
        concat!(
            "Offset of field: ",
            stringify!(ious),
            "::",
            stringify!(ciou)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<ious>())).dx_iou as *const _ as usize },
        16usize,
        concat!(
            "Offset of field: ",
            stringify!(ious),
            "::",
            stringify!(dx_iou)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<ious>())).dx_giou as *const _ as usize },
        32usize,
        concat!(
            "Offset of field: ",
            stringify!(ious),
            "::",
            stringify!(dx_giou)
        )
    );
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct detection {
    pub bbox: box_,
    pub classes: ::std::os::raw::c_int,
    pub best_class_idx: ::std::os::raw::c_int,
    pub prob: *mut f32,
    pub mask: *mut f32,
    pub objectness: f32,
    pub sort_class: ::std::os::raw::c_int,
    pub uc: *mut f32,
    pub points: ::std::os::raw::c_int,
    pub embeddings: *mut f32,
    pub embedding_size: ::std::os::raw::c_int,
    pub sim: f32,
    pub track_id: ::std::os::raw::c_int,
}
#[test]
fn bindgen_test_layout_detection() {
    assert_eq!(
        ::std::mem::size_of::<detection>(),
        88usize,
        concat!("Size of: ", stringify!(detection))
    );
    assert_eq!(
        ::std::mem::align_of::<detection>(),
        8usize,
        concat!("Alignment of ", stringify!(detection))
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<detection>())).bbox as *const _ as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(detection),
            "::",
            stringify!(bbox)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<detection>())).classes as *const _ as usize },
        16usize,
        concat!(
            "Offset of field: ",
            stringify!(detection),
            "::",
            stringify!(classes)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<detection>())).best_class_idx as *const _ as usize },
        20usize,
        concat!(
            "Offset of field: ",
            stringify!(detection),
            "::",
            stringify!(best_class_idx)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<detection>())).prob as *const _ as usize },
        24usize,
        concat!(
            "Offset of field: ",
            stringify!(detection),
            "::",
            stringify!(prob)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<detection>())).mask as *const _ as usize },
        32usize,
        concat!(
            "Offset of field: ",
            stringify!(detection),
            "::",
            stringify!(mask)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<detection>())).objectness as *const _ as usize },
        40usize,
        concat!(
            "Offset of field: ",
            stringify!(detection),
            "::",
            stringify!(objectness)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<detection>())).sort_class as *const _ as usize },
        44usize,
        concat!(
            "Offset of field: ",
            stringify!(detection),
            "::",
            stringify!(sort_class)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<detection>())).uc as *const _ as usize },
        48usize,
        concat!(
            "Offset of field: ",
            stringify!(detection),
            "::",
            stringify!(uc)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<detection>())).points as *const _ as usize },
        56usize,
        concat!(
            "Offset of field: ",
            stringify!(detection),
            "::",
            stringify!(points)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<detection>())).embeddings as *const _ as usize },
        64usize,
        concat!(
            "Offset of field: ",
            stringify!(detection),
            "::",
            stringify!(embeddings)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<detection>())).embedding_size as *const _ as usize },
        72usize,
        concat!(
            "Offset of field: ",
            stringify!(detection),
            "::",
            stringify!(embedding_size)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<detection>())).sim as *const _ as usize },
        76usize,
        concat!(
            "Offset of field: ",
            stringify!(detection),
            "::",
            stringify!(sim)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<detection>())).track_id as *const _ as usize },
        80usize,
        concat!(
            "Offset of field: ",
            stringify!(detection),
            "::",
            stringify!(track_id)
        )
    );
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct det_num_pair {
    pub num: ::std::os::raw::c_int,
    pub dets: *mut detection,
}
#[test]
fn bindgen_test_layout_det_num_pair() {
    assert_eq!(
        ::std::mem::size_of::<det_num_pair>(),
        16usize,
        concat!("Size of: ", stringify!(det_num_pair))
    );
    assert_eq!(
        ::std::mem::align_of::<det_num_pair>(),
        8usize,
        concat!("Alignment of ", stringify!(det_num_pair))
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<det_num_pair>())).num as *const _ as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(det_num_pair),
            "::",
            stringify!(num)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<det_num_pair>())).dets as *const _ as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(det_num_pair),
            "::",
            stringify!(dets)
        )
    );
}
pub type pdet_num_pair = *mut det_num_pair;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct matrix {
    pub rows: ::std::os::raw::c_int,
    pub cols: ::std::os::raw::c_int,
    pub vals: *mut *mut f32,
}
#[test]
fn bindgen_test_layout_matrix() {
    assert_eq!(
        ::std::mem::size_of::<matrix>(),
        16usize,
        concat!("Size of: ", stringify!(matrix))
    );
    assert_eq!(
        ::std::mem::align_of::<matrix>(),
        8usize,
        concat!("Alignment of ", stringify!(matrix))
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<matrix>())).rows as *const _ as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(matrix),
            "::",
            stringify!(rows)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<matrix>())).cols as *const _ as usize },
        4usize,
        concat!(
            "Offset of field: ",
            stringify!(matrix),
            "::",
            stringify!(cols)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<matrix>())).vals as *const _ as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(matrix),
            "::",
            stringify!(vals)
        )
    );
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct data {
    pub w: ::std::os::raw::c_int,
    pub h: ::std::os::raw::c_int,
    pub X: matrix,
    pub y: matrix,
    pub shallow: ::std::os::raw::c_int,
    pub num_boxes: *mut ::std::os::raw::c_int,
    pub boxes: *mut *mut box_,
}
#[test]
fn bindgen_test_layout_data() {
    assert_eq!(
        ::std::mem::size_of::<data>(),
        64usize,
        concat!("Size of: ", stringify!(data))
    );
    assert_eq!(
        ::std::mem::align_of::<data>(),
        8usize,
        concat!("Alignment of ", stringify!(data))
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<data>())).w as *const _ as usize },
        0usize,
        concat!("Offset of field: ", stringify!(data), "::", stringify!(w))
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<data>())).h as *const _ as usize },
        4usize,
        concat!("Offset of field: ", stringify!(data), "::", stringify!(h))
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<data>())).X as *const _ as usize },
        8usize,
        concat!("Offset of field: ", stringify!(data), "::", stringify!(X))
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<data>())).y as *const _ as usize },
        24usize,
        concat!("Offset of field: ", stringify!(data), "::", stringify!(y))
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<data>())).shallow as *const _ as usize },
        40usize,
        concat!(
            "Offset of field: ",
            stringify!(data),
            "::",
            stringify!(shallow)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<data>())).num_boxes as *const _ as usize },
        48usize,
        concat!(
            "Offset of field: ",
            stringify!(data),
            "::",
            stringify!(num_boxes)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<data>())).boxes as *const _ as usize },
        56usize,
        concat!(
            "Offset of field: ",
            stringify!(data),
            "::",
            stringify!(boxes)
        )
    );
}
pub const data_type_CLASSIFICATION_DATA: data_type = 0;
pub const data_type_DETECTION_DATA: data_type = 1;
pub const data_type_CAPTCHA_DATA: data_type = 2;
pub const data_type_REGION_DATA: data_type = 3;
pub const data_type_IMAGE_DATA: data_type = 4;
pub const data_type_COMPARE_DATA: data_type = 5;
pub const data_type_WRITING_DATA: data_type = 6;
pub const data_type_SWAG_DATA: data_type = 7;
pub const data_type_TAG_DATA: data_type = 8;
pub const data_type_OLD_CLASSIFICATION_DATA: data_type = 9;
pub const data_type_STUDY_DATA: data_type = 10;
pub const data_type_DET_DATA: data_type = 11;
pub const data_type_SUPER_DATA: data_type = 12;
pub const data_type_LETTERBOX_DATA: data_type = 13;
pub const data_type_REGRESSION_DATA: data_type = 14;
pub const data_type_SEGMENTATION_DATA: data_type = 15;
pub const data_type_INSTANCE_DATA: data_type = 16;
pub const data_type_ISEG_DATA: data_type = 17;
pub type data_type = ::std::os::raw::c_int;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct load_args {
    pub threads: ::std::os::raw::c_int,
    pub paths: *mut *mut ::std::os::raw::c_char,
    pub path: *mut ::std::os::raw::c_char,
    pub n: ::std::os::raw::c_int,
    pub m: ::std::os::raw::c_int,
    pub labels: *mut *mut ::std::os::raw::c_char,
    pub h: ::std::os::raw::c_int,
    pub w: ::std::os::raw::c_int,
    pub c: ::std::os::raw::c_int,
    pub out_w: ::std::os::raw::c_int,
    pub out_h: ::std::os::raw::c_int,
    pub nh: ::std::os::raw::c_int,
    pub nw: ::std::os::raw::c_int,
    pub num_boxes: ::std::os::raw::c_int,
    pub truth_size: ::std::os::raw::c_int,
    pub min: ::std::os::raw::c_int,
    pub max: ::std::os::raw::c_int,
    pub size: ::std::os::raw::c_int,
    pub classes: ::std::os::raw::c_int,
    pub background: ::std::os::raw::c_int,
    pub scale: ::std::os::raw::c_int,
    pub center: ::std::os::raw::c_int,
    pub coords: ::std::os::raw::c_int,
    pub mini_batch: ::std::os::raw::c_int,
    pub track: ::std::os::raw::c_int,
    pub augment_speed: ::std::os::raw::c_int,
    pub letter_box: ::std::os::raw::c_int,
    pub mosaic_bound: ::std::os::raw::c_int,
    pub show_imgs: ::std::os::raw::c_int,
    pub dontuse_opencv: ::std::os::raw::c_int,
    pub contrastive: ::std::os::raw::c_int,
    pub contrastive_jit_flip: ::std::os::raw::c_int,
    pub contrastive_color: ::std::os::raw::c_int,
    pub jitter: f32,
    pub resize: f32,
    pub flip: ::std::os::raw::c_int,
    pub gaussian_noise: ::std::os::raw::c_int,
    pub blur: ::std::os::raw::c_int,
    pub mixup: ::std::os::raw::c_int,
    pub label_smooth_eps: f32,
    pub angle: f32,
    pub aspect: f32,
    pub saturation: f32,
    pub exposure: f32,
    pub hue: f32,
    pub d: *mut data,
    pub im: *mut image,
    pub resized: *mut image,
    pub type_: data_type,
    pub hierarchy: *mut tree,
}
#[test]
fn bindgen_test_layout_load_args() {
    assert_eq!(
        ::std::mem::size_of::<load_args>(),
        240usize,
        concat!("Size of: ", stringify!(load_args))
    );
    assert_eq!(
        ::std::mem::align_of::<load_args>(),
        8usize,
        concat!("Alignment of ", stringify!(load_args))
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<load_args>())).threads as *const _ as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(load_args),
            "::",
            stringify!(threads)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<load_args>())).paths as *const _ as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(load_args),
            "::",
            stringify!(paths)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<load_args>())).path as *const _ as usize },
        16usize,
        concat!(
            "Offset of field: ",
            stringify!(load_args),
            "::",
            stringify!(path)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<load_args>())).n as *const _ as usize },
        24usize,
        concat!(
            "Offset of field: ",
            stringify!(load_args),
            "::",
            stringify!(n)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<load_args>())).m as *const _ as usize },
        28usize,
        concat!(
            "Offset of field: ",
            stringify!(load_args),
            "::",
            stringify!(m)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<load_args>())).labels as *const _ as usize },
        32usize,
        concat!(
            "Offset of field: ",
            stringify!(load_args),
            "::",
            stringify!(labels)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<load_args>())).h as *const _ as usize },
        40usize,
        concat!(
            "Offset of field: ",
            stringify!(load_args),
            "::",
            stringify!(h)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<load_args>())).w as *const _ as usize },
        44usize,
        concat!(
            "Offset of field: ",
            stringify!(load_args),
            "::",
            stringify!(w)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<load_args>())).c as *const _ as usize },
        48usize,
        concat!(
            "Offset of field: ",
            stringify!(load_args),
            "::",
            stringify!(c)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<load_args>())).out_w as *const _ as usize },
        52usize,
        concat!(
            "Offset of field: ",
            stringify!(load_args),
            "::",
            stringify!(out_w)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<load_args>())).out_h as *const _ as usize },
        56usize,
        concat!(
            "Offset of field: ",
            stringify!(load_args),
            "::",
            stringify!(out_h)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<load_args>())).nh as *const _ as usize },
        60usize,
        concat!(
            "Offset of field: ",
            stringify!(load_args),
            "::",
            stringify!(nh)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<load_args>())).nw as *const _ as usize },
        64usize,
        concat!(
            "Offset of field: ",
            stringify!(load_args),
            "::",
            stringify!(nw)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<load_args>())).num_boxes as *const _ as usize },
        68usize,
        concat!(
            "Offset of field: ",
            stringify!(load_args),
            "::",
            stringify!(num_boxes)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<load_args>())).truth_size as *const _ as usize },
        72usize,
        concat!(
            "Offset of field: ",
            stringify!(load_args),
            "::",
            stringify!(truth_size)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<load_args>())).min as *const _ as usize },
        76usize,
        concat!(
            "Offset of field: ",
            stringify!(load_args),
            "::",
            stringify!(min)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<load_args>())).max as *const _ as usize },
        80usize,
        concat!(
            "Offset of field: ",
            stringify!(load_args),
            "::",
            stringify!(max)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<load_args>())).size as *const _ as usize },
        84usize,
        concat!(
            "Offset of field: ",
            stringify!(load_args),
            "::",
            stringify!(size)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<load_args>())).classes as *const _ as usize },
        88usize,
        concat!(
            "Offset of field: ",
            stringify!(load_args),
            "::",
            stringify!(classes)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<load_args>())).background as *const _ as usize },
        92usize,
        concat!(
            "Offset of field: ",
            stringify!(load_args),
            "::",
            stringify!(background)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<load_args>())).scale as *const _ as usize },
        96usize,
        concat!(
            "Offset of field: ",
            stringify!(load_args),
            "::",
            stringify!(scale)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<load_args>())).center as *const _ as usize },
        100usize,
        concat!(
            "Offset of field: ",
            stringify!(load_args),
            "::",
            stringify!(center)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<load_args>())).coords as *const _ as usize },
        104usize,
        concat!(
            "Offset of field: ",
            stringify!(load_args),
            "::",
            stringify!(coords)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<load_args>())).mini_batch as *const _ as usize },
        108usize,
        concat!(
            "Offset of field: ",
            stringify!(load_args),
            "::",
            stringify!(mini_batch)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<load_args>())).track as *const _ as usize },
        112usize,
        concat!(
            "Offset of field: ",
            stringify!(load_args),
            "::",
            stringify!(track)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<load_args>())).augment_speed as *const _ as usize },
        116usize,
        concat!(
            "Offset of field: ",
            stringify!(load_args),
            "::",
            stringify!(augment_speed)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<load_args>())).letter_box as *const _ as usize },
        120usize,
        concat!(
            "Offset of field: ",
            stringify!(load_args),
            "::",
            stringify!(letter_box)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<load_args>())).mosaic_bound as *const _ as usize },
        124usize,
        concat!(
            "Offset of field: ",
            stringify!(load_args),
            "::",
            stringify!(mosaic_bound)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<load_args>())).show_imgs as *const _ as usize },
        128usize,
        concat!(
            "Offset of field: ",
            stringify!(load_args),
            "::",
            stringify!(show_imgs)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<load_args>())).dontuse_opencv as *const _ as usize },
        132usize,
        concat!(
            "Offset of field: ",
            stringify!(load_args),
            "::",
            stringify!(dontuse_opencv)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<load_args>())).contrastive as *const _ as usize },
        136usize,
        concat!(
            "Offset of field: ",
            stringify!(load_args),
            "::",
            stringify!(contrastive)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<load_args>())).contrastive_jit_flip as *const _ as usize },
        140usize,
        concat!(
            "Offset of field: ",
            stringify!(load_args),
            "::",
            stringify!(contrastive_jit_flip)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<load_args>())).contrastive_color as *const _ as usize },
        144usize,
        concat!(
            "Offset of field: ",
            stringify!(load_args),
            "::",
            stringify!(contrastive_color)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<load_args>())).jitter as *const _ as usize },
        148usize,
        concat!(
            "Offset of field: ",
            stringify!(load_args),
            "::",
            stringify!(jitter)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<load_args>())).resize as *const _ as usize },
        152usize,
        concat!(
            "Offset of field: ",
            stringify!(load_args),
            "::",
            stringify!(resize)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<load_args>())).flip as *const _ as usize },
        156usize,
        concat!(
            "Offset of field: ",
            stringify!(load_args),
            "::",
            stringify!(flip)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<load_args>())).gaussian_noise as *const _ as usize },
        160usize,
        concat!(
            "Offset of field: ",
            stringify!(load_args),
            "::",
            stringify!(gaussian_noise)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<load_args>())).blur as *const _ as usize },
        164usize,
        concat!(
            "Offset of field: ",
            stringify!(load_args),
            "::",
            stringify!(blur)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<load_args>())).mixup as *const _ as usize },
        168usize,
        concat!(
            "Offset of field: ",
            stringify!(load_args),
            "::",
            stringify!(mixup)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<load_args>())).label_smooth_eps as *const _ as usize },
        172usize,
        concat!(
            "Offset of field: ",
            stringify!(load_args),
            "::",
            stringify!(label_smooth_eps)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<load_args>())).angle as *const _ as usize },
        176usize,
        concat!(
            "Offset of field: ",
            stringify!(load_args),
            "::",
            stringify!(angle)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<load_args>())).aspect as *const _ as usize },
        180usize,
        concat!(
            "Offset of field: ",
            stringify!(load_args),
            "::",
            stringify!(aspect)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<load_args>())).saturation as *const _ as usize },
        184usize,
        concat!(
            "Offset of field: ",
            stringify!(load_args),
            "::",
            stringify!(saturation)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<load_args>())).exposure as *const _ as usize },
        188usize,
        concat!(
            "Offset of field: ",
            stringify!(load_args),
            "::",
            stringify!(exposure)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<load_args>())).hue as *const _ as usize },
        192usize,
        concat!(
            "Offset of field: ",
            stringify!(load_args),
            "::",
            stringify!(hue)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<load_args>())).d as *const _ as usize },
        200usize,
        concat!(
            "Offset of field: ",
            stringify!(load_args),
            "::",
            stringify!(d)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<load_args>())).im as *const _ as usize },
        208usize,
        concat!(
            "Offset of field: ",
            stringify!(load_args),
            "::",
            stringify!(im)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<load_args>())).resized as *const _ as usize },
        216usize,
        concat!(
            "Offset of field: ",
            stringify!(load_args),
            "::",
            stringify!(resized)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<load_args>())).type_ as *const _ as usize },
        224usize,
        concat!(
            "Offset of field: ",
            stringify!(load_args),
            "::",
            stringify!(type_)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<load_args>())).hierarchy as *const _ as usize },
        232usize,
        concat!(
            "Offset of field: ",
            stringify!(load_args),
            "::",
            stringify!(hierarchy)
        )
    );
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct box_label {
    pub id: ::std::os::raw::c_int,
    pub track_id: ::std::os::raw::c_int,
    pub x: f32,
    pub y: f32,
    pub w: f32,
    pub h: f32,
    pub left: f32,
    pub right: f32,
    pub top: f32,
    pub bottom: f32,
}
#[test]
fn bindgen_test_layout_box_label() {
    assert_eq!(
        ::std::mem::size_of::<box_label>(),
        40usize,
        concat!("Size of: ", stringify!(box_label))
    );
    assert_eq!(
        ::std::mem::align_of::<box_label>(),
        4usize,
        concat!("Alignment of ", stringify!(box_label))
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<box_label>())).id as *const _ as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(box_label),
            "::",
            stringify!(id)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<box_label>())).track_id as *const _ as usize },
        4usize,
        concat!(
            "Offset of field: ",
            stringify!(box_label),
            "::",
            stringify!(track_id)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<box_label>())).x as *const _ as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(box_label),
            "::",
            stringify!(x)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<box_label>())).y as *const _ as usize },
        12usize,
        concat!(
            "Offset of field: ",
            stringify!(box_label),
            "::",
            stringify!(y)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<box_label>())).w as *const _ as usize },
        16usize,
        concat!(
            "Offset of field: ",
            stringify!(box_label),
            "::",
            stringify!(w)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<box_label>())).h as *const _ as usize },
        20usize,
        concat!(
            "Offset of field: ",
            stringify!(box_label),
            "::",
            stringify!(h)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<box_label>())).left as *const _ as usize },
        24usize,
        concat!(
            "Offset of field: ",
            stringify!(box_label),
            "::",
            stringify!(left)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<box_label>())).right as *const _ as usize },
        28usize,
        concat!(
            "Offset of field: ",
            stringify!(box_label),
            "::",
            stringify!(right)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<box_label>())).top as *const _ as usize },
        32usize,
        concat!(
            "Offset of field: ",
            stringify!(box_label),
            "::",
            stringify!(top)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<box_label>())).bottom as *const _ as usize },
        36usize,
        concat!(
            "Offset of field: ",
            stringify!(box_label),
            "::",
            stringify!(bottom)
        )
    );
}
extern "C" {
    pub fn load_network(
        cfg: *mut ::std::os::raw::c_char,
        weights: *mut ::std::os::raw::c_char,
        clear: ::std::os::raw::c_int,
    ) -> *mut network;
}
extern "C" {
    pub fn load_network_custom(
        cfg: *mut ::std::os::raw::c_char,
        weights: *mut ::std::os::raw::c_char,
        clear: ::std::os::raw::c_int,
        batch: ::std::os::raw::c_int,
    ) -> *mut network;
}
extern "C" {
    pub fn free_network(net: network);
}
extern "C" {
    pub fn free_network_ptr(net: *mut network);
}
extern "C" {
    pub fn get_base_args(net: *mut network) -> load_args;
}
extern "C" {
    pub fn do_nms_sort(
        dets: *mut detection,
        total: ::std::os::raw::c_int,
        classes: ::std::os::raw::c_int,
        thresh: f32,
    );
}
extern "C" {
    pub fn do_nms_obj(
        dets: *mut detection,
        total: ::std::os::raw::c_int,
        classes: ::std::os::raw::c_int,
        thresh: f32,
    );
}
extern "C" {
    pub fn diounms_sort(
        dets: *mut detection,
        total: ::std::os::raw::c_int,
        classes: ::std::os::raw::c_int,
        thresh: f32,
        nms_kind: NMS_KIND,
        beta1: f32,
    );
}
extern "C" {
    pub fn network_predict(net: network, input: *mut f32) -> *mut f32;
}
extern "C" {
    pub fn network_predict_ptr(net: *mut network, input: *mut f32) -> *mut f32;
}
extern "C" {
    pub fn get_network_boxes(
        net: *mut network,
        w: ::std::os::raw::c_int,
        h: ::std::os::raw::c_int,
        thresh: f32,
        hier: f32,
        map: *mut ::std::os::raw::c_int,
        relative: ::std::os::raw::c_int,
        num: *mut ::std::os::raw::c_int,
        letter: ::std::os::raw::c_int,
    ) -> *mut detection;
}
extern "C" {
    pub fn network_predict_batch(
        net: *mut network,
        im: image,
        batch_size: ::std::os::raw::c_int,
        w: ::std::os::raw::c_int,
        h: ::std::os::raw::c_int,
        thresh: f32,
        hier: f32,
        map: *mut ::std::os::raw::c_int,
        relative: ::std::os::raw::c_int,
        letter: ::std::os::raw::c_int,
    ) -> *mut det_num_pair;
}
extern "C" {
    pub fn free_detections(dets: *mut detection, n: ::std::os::raw::c_int);
}
extern "C" {
    pub fn free_batch_detections(det_num_pairs: *mut det_num_pair, n: ::std::os::raw::c_int);
}
extern "C" {
    pub fn fuse_conv_batchnorm(net: network);
}
extern "C" {
    pub fn calculate_binary_weights(net: network);
}
extern "C" {
    pub fn detection_to_json(
        dets: *mut detection,
        nboxes: ::std::os::raw::c_int,
        classes: ::std::os::raw::c_int,
        names: *mut *mut ::std::os::raw::c_char,
        frame_id: ::std::os::raw::c_longlong,
        filename: *mut ::std::os::raw::c_char,
    ) -> *mut ::std::os::raw::c_char;
}
extern "C" {
    pub fn get_network_layer(net: *mut network, i: ::std::os::raw::c_int) -> *mut layer;
}
extern "C" {
    pub fn make_network_boxes(
        net: *mut network,
        thresh: f32,
        num: *mut ::std::os::raw::c_int,
    ) -> *mut detection;
}
extern "C" {
    pub fn reset_rnn(net: *mut network);
}
extern "C" {
    pub fn network_predict_image(net: *mut network, im: image) -> *mut f32;
}
extern "C" {
    pub fn network_predict_image_letterbox(net: *mut network, im: image) -> *mut f32;
}
extern "C" {
    pub fn validate_detector_map(
        datacfg: *mut ::std::os::raw::c_char,
        cfgfile: *mut ::std::os::raw::c_char,
        weightfile: *mut ::std::os::raw::c_char,
        thresh_calc_avg_iou: f32,
        iou_thresh: f32,
        map_points: ::std::os::raw::c_int,
        letter_box: ::std::os::raw::c_int,
        existing_net: *mut network,
    ) -> f32;
}
extern "C" {
    pub fn train_detector(
        datacfg: *mut ::std::os::raw::c_char,
        cfgfile: *mut ::std::os::raw::c_char,
        weightfile: *mut ::std::os::raw::c_char,
        gpus: *mut ::std::os::raw::c_int,
        ngpus: ::std::os::raw::c_int,
        clear: ::std::os::raw::c_int,
        dont_show: ::std::os::raw::c_int,
        calc_map: ::std::os::raw::c_int,
        thresh: f32,
        iou_thresh: f32,
        mjpeg_port: ::std::os::raw::c_int,
        show_imgs: ::std::os::raw::c_int,
        benchmark_layers: ::std::os::raw::c_int,
        chart_path: *mut ::std::os::raw::c_char,
    );
}
extern "C" {
    pub fn test_detector(
        datacfg: *mut ::std::os::raw::c_char,
        cfgfile: *mut ::std::os::raw::c_char,
        weightfile: *mut ::std::os::raw::c_char,
        filename: *mut ::std::os::raw::c_char,
        thresh: f32,
        hier_thresh: f32,
        dont_show: ::std::os::raw::c_int,
        ext_output: ::std::os::raw::c_int,
        save_labels: ::std::os::raw::c_int,
        outfile: *mut ::std::os::raw::c_char,
        letter_box: ::std::os::raw::c_int,
        benchmark_layers: ::std::os::raw::c_int,
    );
}
extern "C" {
    pub fn network_width(net: *mut network) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn network_height(net: *mut network) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn optimize_picture(
        net: *mut network,
        orig: image,
        max_layer: ::std::os::raw::c_int,
        scale: f32,
        rate: f32,
        thresh: f32,
        norm: ::std::os::raw::c_int,
    );
}
extern "C" {
    pub fn make_image_red(im: image);
}
extern "C" {
    pub fn make_attention_image(
        img_size: ::std::os::raw::c_int,
        original_delta_cpu: *mut f32,
        original_input_cpu: *mut f32,
        w: ::std::os::raw::c_int,
        h: ::std::os::raw::c_int,
        c: ::std::os::raw::c_int,
        alpha: f32,
    ) -> image;
}
extern "C" {
    pub fn resize_image(im: image, w: ::std::os::raw::c_int, h: ::std::os::raw::c_int) -> image;
}
extern "C" {
    pub fn quantize_image(im: image);
}
extern "C" {
    pub fn copy_image_from_bytes(im: image, pdata: *mut ::std::os::raw::c_char);
}
extern "C" {
    pub fn letterbox_image(im: image, w: ::std::os::raw::c_int, h: ::std::os::raw::c_int) -> image;
}
extern "C" {
    pub fn rgbgr_image(im: image);
}
extern "C" {
    pub fn make_image(
        w: ::std::os::raw::c_int,
        h: ::std::os::raw::c_int,
        c: ::std::os::raw::c_int,
    ) -> image;
}
extern "C" {
    pub fn load_image_color(
        filename: *mut ::std::os::raw::c_char,
        w: ::std::os::raw::c_int,
        h: ::std::os::raw::c_int,
    ) -> image;
}
extern "C" {
    pub fn free_image(m: image);
}
extern "C" {
    pub fn crop_image(
        im: image,
        dx: ::std::os::raw::c_int,
        dy: ::std::os::raw::c_int,
        w: ::std::os::raw::c_int,
        h: ::std::os::raw::c_int,
    ) -> image;
}
extern "C" {
    pub fn resize_min(im: image, min: ::std::os::raw::c_int) -> image;
}
extern "C" {
    pub fn free_layer_custom(l: layer, keep_cudnn_desc: ::std::os::raw::c_int);
}
extern "C" {
    pub fn free_layer(l: layer);
}
extern "C" {
    pub fn free_data(d: data);
}
extern "C" {
    pub fn load_data(args: load_args) -> pthread_t;
}
extern "C" {
    pub fn free_load_threads(ptr: *mut ::std::os::raw::c_void);
}
extern "C" {
    pub fn load_data_in_thread(args: load_args) -> pthread_t;
}
extern "C" {
    pub fn load_thread(ptr: *mut ::std::os::raw::c_void) -> *mut ::std::os::raw::c_void;
}
extern "C" {
    pub fn cuda_pull_array(x_gpu: *mut f32, x: *mut f32, n: size_t);
}
extern "C" {
    pub fn cuda_pull_array_async(x_gpu: *mut f32, x: *mut f32, n: size_t);
}
extern "C" {
    pub fn cuda_set_device(n: ::std::os::raw::c_int);
}
extern "C" {
    pub fn cuda_get_context() -> *mut ::std::os::raw::c_void;
}
extern "C" {
    pub fn free_ptrs(ptrs: *mut *mut ::std::os::raw::c_void, n: ::std::os::raw::c_int);
}
extern "C" {
    pub fn top_k(
        a: *mut f32,
        n: ::std::os::raw::c_int,
        k: ::std::os::raw::c_int,
        index: *mut ::std::os::raw::c_int,
    );
}
extern "C" {
    pub fn read_tree(filename: *mut ::std::os::raw::c_char) -> *mut tree;
}
extern "C" {
    pub fn get_metadata(file: *mut ::std::os::raw::c_char) -> metadata;
}
extern "C" {
    pub fn delete_json_sender();
}
extern "C" {
    pub fn send_json_custom(
        send_buf: *const ::std::os::raw::c_char,
        port: ::std::os::raw::c_int,
        timeout: ::std::os::raw::c_int,
    );
}
extern "C" {
    pub fn get_time_point() -> f64;
}
extern "C" {
    pub fn start_timer();
}
extern "C" {
    pub fn stop_timer();
}
extern "C" {
    pub fn get_time() -> f64;
}
extern "C" {
    pub fn stop_timer_and_show();
}
extern "C" {
    pub fn stop_timer_and_show_name(name: *mut ::std::os::raw::c_char);
}
extern "C" {
    pub fn show_total_time();
}
extern "C" {
    pub fn set_track_id(
        new_dets: *mut detection,
        new_dets_num: ::std::os::raw::c_int,
        thresh: f32,
        sim_thresh: f32,
        track_ciou_norm: f32,
        deque_size: ::std::os::raw::c_int,
        dets_for_track: ::std::os::raw::c_int,
        dets_for_show: ::std::os::raw::c_int,
    );
}
extern "C" {
    pub fn fill_remaining_id(
        new_dets: *mut detection,
        new_dets_num: ::std::os::raw::c_int,
        new_track_id: ::std::os::raw::c_int,
        thresh: f32,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn init_cpu();
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct __crt_locale_data {
    pub _address: u8,
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct __crt_multibyte_data {
    pub _address: u8,
}
pub type __builtin_va_list = *mut ::std::os::raw::c_char;
